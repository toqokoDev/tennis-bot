from typing import Any, Dict
from aiogram import Bot, types
from aiogram.types import FSInputFile

from config.paths import BASE_DIR
from config.profile import channels_id, tour_channel_id
from utils.utils import create_user_profile_link

async def send_registration_notification(message: types.Message, profile: dict):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª"""
    try:
        city = profile.get('city', '‚Äî')
        district = profile.get('district', '')
        if district:
            city = f"{city} - {district}"
            
        username_text = "\n"
        if profile.get('username'):
            username_text = f"‚úâÔ∏è @{profile.get('username')}\n\n"
        
        role = profile.get('role', '–ò–≥—Ä–æ–∫')
        channel_id = channels_id[profile.get('sport')]

        # –†–∞–∑–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –∏ –∏–≥—Ä–æ–∫–æ–≤
        if role == "–¢—Ä–µ–Ω–µ—Ä":
            registration_text = (
                "üë®‚Äçüè´ *–ù–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ!*\n\n"
                f"üèÜ {await create_user_profile_link(profile, profile.get('telegram_id'))}\n"
                f"üí∞ {profile.get('price', 0)} —Ä—É–±./—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n"
                f"üìç {city} ({profile.get('country', '')})\n"
                f"{username_text}"
                f"#—Ç—Ä–µ–Ω–µ—Ä"
            )
        else:
            registration_text = (
                "üéæ *–ù–æ–≤—ã–π –∏–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É!*\n\n"
                f"üë§ {await create_user_profile_link(profile, profile.get('telegram_id'))}\n" 
                f"üí™ {profile.get('player_level', '–ù–µ —É–∫–∞–∑–∞–Ω')} —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã\n"
                f"üìç {city} ({profile.get('country', '')})\n"
                f"{username_text}"
                f"#–∏–≥—Ä–æ–∫"
            )
        
        if profile.get('photo_path'):
            await message.bot.send_photo(
                chat_id=channel_id,
                photo=FSInputFile(BASE_DIR / profile.get('photo_path')),
                caption=registration_text,
                parse_mode="Markdown"
            )
        else:
            await message.bot.send_message(
                chat_id=channel_id,
                text=registration_text,
                parse_mode="Markdown"
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

async def send_game_notification_to_channel(bot: Bot, data: Dict[str, Any], users: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        game_type = data.get('game_type')
        score = data.get('score')

        channel_id = channels_id[users.get(data.get('current_user_id'), {}).get('sport')]

        if game_type == 'single':
            # –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞
            player1_id = data.get('current_user_id')
            player2_id = data.get('opponent1', {}).get('telegram_id')
            
            player1 = users.get(player1_id, {})
            player2 = users.get(player2_id, {})
            
            player1_link = await create_user_profile_link(player1, player1_id)
            player2_link = await create_user_profile_link(player2, player2_id)
            
            winner_side = data.get('winner_side')
            if winner_side == "team1":
                winner_link = player1_link
                loser_link = player2_link
            else:
                winner_link = player2_link
                loser_link = player1_link
            
            game_text = (
                "üéæ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞!*\n\n"
                f"üèÜ {winner_link}\n"
                f"ü•à {loser_link}\n\n"
                f"üìä –°—á–µ—Ç: {score}\n\n"
                f"#–∏–≥—Ä–∞"
            )
            
        else:
            # –ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞
            team1_player1_id = str(data.get('current_user_id'))
            team1_player2_id = data.get('partner', {}).get('telegram_id')
            team2_player1_id = data.get('opponent1', {}).get('telegram_id')
            team2_player2_id = data.get('opponent2', {}).get('telegram_id')
            
            team1_player1 = users.get(team1_player1_id, {})
            team1_player2 = users.get(team1_player2_id, {})
            team2_player1 = users.get(team2_player1_id, {})
            team2_player2 = users.get(team2_player2_id, {})
            
            team1_player1_link = await create_user_profile_link(team1_player1, team1_player1_id)
            team1_player2_link = await create_user_profile_link(team1_player2, team1_player2_id)
            team2_player1_link = await create_user_profile_link(team2_player1, team2_player1_id)
            team2_player2_link = await create_user_profile_link(team2_player2, team2_player2_id)
            
            winner_side = data.get('winner_side')
            if winner_side == "team1":
                winner_team = f"{team1_player1_link} & {team1_player2_link}"
                loser_team = f"{team2_player1_link} & {team2_player2_link}"
            else:
                winner_team = f"{team2_player1_link} & {team2_player2_link}"
                loser_team = f"{team1_player1_link} & {team1_player2_link}"
            
            game_text = (
                "üéæ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–∞—Ä–Ω–∞—è –∏–≥—Ä–∞!*\n\n"
                f"üèÜ {winner_team}\n"
                f"ü•à {loser_team}\n\n"
                f"üìä –°—á–µ—Ç: {score}\n\n"
                f"#–∏–≥—Ä–∞"
            )
        
        if data.get('photo_id'):
            await bot.send_photo(
                chat_id=channel_id,
                photo=data['photo_id'],
                caption=game_text,
                parse_mode="Markdown"
            )
        else:
            await bot.send_message(
                chat_id=channel_id,
                text=game_text,
                parse_mode="Markdown"
            )
        
    except:
        pass

async def send_game_offer_to_channel(bot: Bot, game_data: Dict[str, Any], user_id: str, user_data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª"""
    try:
        profile_link = await create_user_profile_link(user_data, user_id)
        sport = user_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        offer_text = (
            f"üéæ *–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã*\n\n"
            f"üë§ {profile_link}\n"
            f"üìç {game_data.get('city', '‚Äî')}\n"
            f"üìÖ {game_data.get('date', '‚Äî')} –≤ {game_data.get('time', '‚Äî')}\n"
            f"{sport} ‚Ä¢ {game_data.get('type', '‚Äî')}\n"
            f"üí≥ {game_data.get('payment_type', '‚Äî')}"
        )
        
        if game_data.get('competitive'):
            offer_text += f"\nüèÜ –ù–∞ —Å—á–µ—Ç"
            
        if game_data.get('comment'):
            offer_text += f"\nüí¨ {game_data['comment']} \n\n#–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
        else:
            offer_text += " \n\n#–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"
            
        channel_id = channels_id[sport]

        await bot.send_message(
            chat_id=channel_id,
            text=offer_text,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä—ã: {e}")

async def send_tour_to_channel(bot: Bot, user_id: str, user_data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª"""
    try:
        profile_link = await create_user_profile_link(user_data, user_id)
        sport = user_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        tour_text = (
            f"‚úàÔ∏è *–¢–µ–Ω–Ω–∏—Å–Ω—ã–π —Ç—É—Ä*\n\n"
            f"üë§ {profile_link}\n"
            f"üìç {user_data.get('city', '‚Äî')}, {user_data.get('country', '‚Äî')}\n"
            f"üìÖ {user_data.get('vacation_start')} - {user_data.get('vacation_end')}\n\n"
            f"{sport}"
        )
        
        if user_data.get('vacation_comment'):
            tour_text += f"\nüí¨ {user_data['vacation_comment']} \n\n#—Ç—É—Ä"
        else:
            tour_text += " \n\n#—Ç—É—Ä"
            
        await bot.send_message(
            chat_id=tour_channel_id,
            text=tour_text,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—É—Ä–∞ –≤ –∫–∞–Ω–∞–ª: {e}")
