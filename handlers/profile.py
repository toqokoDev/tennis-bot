from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config.paths import BASE_DIR, PHOTOS_DIR
from config.profile import (
    moscow_districts, base_keyboard, cities_data, countries, sport_type,
    get_sport_config, get_sport_texts, get_base_keyboard, tennis_levels, table_tennis_levels,
    DATING_GOALS, DATING_INTERESTS, DATING_ADDITIONAL_FIELDS
)
from models.states import EditProfileStates
from utils.bot import show_profile
from utils.media import download_photo_to_path
from services.storage import storage
from handlers.registration import check_profile_completeness, get_missing_fields_text

async def migrate_profile_data(old_sport: str, new_sport: str, profile: dict) -> dict:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–∏ —Å–º–µ–Ω–µ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    """
    old_config = get_sport_config(old_sport)
    new_config = get_sport_config(new_sport)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    new_profile = profile.copy()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
    new_profile["sport"] = new_sport
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞, –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if new_config.get("has_role", True) and not new_profile.get("role"):
        new_profile["role"] = "üéØ –ò–≥—Ä–æ–∫"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–≥—Ä–æ–∫
    
    if new_config.get("has_level", True) and not new_profile.get("player_level"):
        # –î–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö - —É—Ä–æ–≤–µ–Ω—å
        if new_sport == "üèì–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å":
            new_profile["player_level"] = "0.0"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        else:
            new_profile["player_level"] = "1.0"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        new_profile["rating_points"] = 500  # –ë–∞–∑–æ–≤—ã–µ –æ—á–∫–∏
    
    if new_config.get("has_payment", True) and not new_profile.get("price"):
        new_profile["price"] = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–ø–æ–ª–∞–º
        new_profile["default_payment"] = "üí∞ –ü–æ–ø–æ–ª–∞–º"
    
    if new_config.get("has_vacation", True):
        # –ü–æ–ª—è –æ—Ç–ø—É—Å–∫–∞ –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        pass
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    if new_sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        if not new_profile.get("dating_goal"):
            new_profile["dating_goal"] = "–û–±—â–µ–Ω–∏–µ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if not new_profile.get("dating_interests"):
            new_profile["dating_interests"] = []  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
        if not new_profile.get("dating_additional"):
            new_profile["dating_additional"] = {}  # –ü—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å—Ç—Ä–µ—á
    if new_sport in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É"]:
        if not new_profile.get("meeting_time"):
            new_profile["meeting_time"] = "–£—Ç–æ—á–Ω—é –ø–æ–∑–∂–µ"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    return new_profile

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id)
    
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    sport = profile.get("sport", "üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
    config = get_sport_config(sport)
    
    buttons = []
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
    buttons.append([
        InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="1edit_photo"),
        InlineKeyboardButton(text="üåç –°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥", callback_data="1edit_location")
    ])
    
    # –ü–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config.get("has_about_me", True):
        buttons.append([InlineKeyboardButton(text="üí¨ –û —Å–µ–±–µ", callback_data="1edit_comment")])
    
    if config.get("has_payment", True):
        buttons.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="1edit_payment")])
    
    if config.get("has_role", True):
        buttons.append([InlineKeyboardButton(text="üë§ –†–æ–ª—å", callback_data="1edit_role")])
    
    if config.get("has_level", True):
        buttons.append([InlineKeyboardButton(text="üìä –£—Ä–æ–≤–µ–Ω—å", callback_data="1edit_level")])
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    if sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        buttons.append([InlineKeyboardButton(text="üíï –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="1edit_dating_goal")])
        buttons.append([InlineKeyboardButton(text="üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="1edit_dating_interests")])
        buttons.append([InlineKeyboardButton(text="üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="1edit_dating_additional")])
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å—Ç—Ä–µ—á
    if sport in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É"]:
        buttons.append([InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏", callback_data="1edit_meeting_time")])
    
    # –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
    buttons.append([InlineKeyboardButton(text="üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞", callback_data="1edit_sport")])
    
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{user_id}")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_profile:"))
async def back_to_profile_handler(callback: types.CallbackQuery):
    user_id = callback.data.split(":")[1]
    profile = await storage.get_user(user_id)
    
    try:
        await callback.message.delete()
    except:
        pass

    if profile:
        await show_profile(callback.message, profile)
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "1delete_profile")
async def delete_profile_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            ]
        ]
    )
    try:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_keyboard
        )
    except:
        try:
            await callback.message.delete()
        except:
            await callback.message.edit_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=confirm_keyboard
            )
    
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete_handler(callback: types.CallbackQuery):
    user_id = callback.message.chat.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    main_inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    
    if user_key in users:
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if 'photo_path' in users[user_key] and users[user_key]['photo_path']:
            try:
                photo_path = BASE_DIR / users[user_key]['photo_path']
                if photo_path.exists():
                    photo_path.unlink()
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del users[user_key]
        await storage.save_users(users)
        
        await callback.message.edit_text(
            "üóëÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=main_inline_keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=main_inline_keyboard
        )
    
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_handler(callback: types.CallbackQuery):
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id)
    
    if profile:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø—Ä–æ—Ñ–∏–ª—è
        await show_profile(callback.message, profile)
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=base_keyboard
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.startswith("1edit_"))
async def edit_field_handler(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.replace("1edit_", "")
    
    try:
        await callback.message.delete()
    except:
        pass

    if field == "comment":
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–µ–±–µ:")
        await state.set_state(EditProfileStates.COMMENT)
    elif field == "payment":
        buttons = [
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–∞–º", callback_data="edit_payment_–ü–æ–ø–æ–ª–∞–º")],
            [InlineKeyboardButton(text="üí≥ –Ø –æ–ø–ª–∞—á–∏–≤–∞—é", callback_data="edit_payment_–Ø –æ–ø–ª–∞—á–∏–≤–∞—é")],
            [InlineKeyboardButton(text="üíµ –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", callback_data="edit_payment_–°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞—é")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç–∞:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.PAYMENT)
    elif field == "photo":
        buttons = [
            [InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo_upload")],
            [InlineKeyboardButton(text="üëÄ –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="edit_photo_none")],
            [InlineKeyboardButton(text="üì∏ –ò–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_photo_profile")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ç–æ:", reply_markup=keyboard)
    elif field == "location":
        buttons = []
        for country in countries[:5]:
            buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"edit_country_{country}")])
        buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="edit_other_country")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.COUNTRY)
    elif field == "sport":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        buttons = []
        row = []
        for i, sport in enumerate(sport_type):
            row.append(InlineKeyboardButton(text=sport, callback_data=f"edit_sport_{sport}"))
            if (i + 1) % 2 == 0 or i == len(sport_type) - 1:
                buttons.append(row)
                row = []
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.SPORT)
    elif field == "role":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        buttons = [
            [InlineKeyboardButton(text="üéæ –ò–≥—Ä–æ–∫", callback_data="edit_role_–ò–≥—Ä–æ–∫")],
            [InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="edit_role_–¢—Ä–µ–Ω–µ—Ä")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.ROLE)
    elif field == "price":
        if user_key not in users:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
            await callback.answer()
            return

        role = users[user_key].get('role')
        if role != "–¢—Ä–µ–Ω–µ—Ä":
            await callback.message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤.")
            await callback.answer()
            return

        await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
        await state.set_state(EditProfileStates.PRICE)
    elif field == "level":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
        users = await storage.load_users()
        user_key = str(callback.message.chat.id)
        
        if user_key in users:
            user_data = users[user_key]
            sport = user_data.get("sport", "üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
            config = get_sport_config(sport)
            
            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥
            if config.get("level_type") == "table_tennis":
                await callback.message.answer("üèì –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º —Ç–µ–Ω–Ω–∏—Å–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1500, 2000, 2500):")
            else:
                sport_name = sport.replace('üéæ', '').replace('üèì', '').replace('üè∏', '').replace('üèñÔ∏è', '').replace('ü•é', '').replace('üèÜ', '').strip()
                await callback.message.answer(f"üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ {sport_name} (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000, 1500, 2000):")
            
            await state.set_state(EditProfileStates.LEVEL)
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    elif field == "dating_goal":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
        buttons = []
        for goal in DATING_GOALS:
            buttons.append([InlineKeyboardButton(text=goal, callback_data=f"edit_dating_goal_{goal}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üíï –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.DATING_GOAL)
    elif field == "dating_interests":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        buttons = []
        for interest in DATING_INTERESTS:
            buttons.append([InlineKeyboardButton(text=interest, callback_data=f"edit_dating_interest_{interest}")])
        buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="edit_dating_interests_done")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)
        await state.set_state(EditProfileStates.DATING_INTERESTS)
    elif field == "dating_additional":
        await callback.message.answer("üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (—Ä–∞–±–æ—Ç–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ä–æ—Å—Ç –∏ —Ç.–¥.):")
        await state.set_state(EditProfileStates.DATING_ADDITIONAL)
    elif field == "meeting_time":
        await callback.message.answer("‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è:")
        await state.set_state(EditProfileStates.MEETING_TIME)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Å–µ–±–µ
@router.message(EditProfileStates.COMMENT, F.text)
async def save_comment_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    
    user_key = str(user_id)
    
    if user_key in users:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        users[user_key]['profile_comment'] = message.text.strip()
        await storage.save_users(users)
        
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–µ–±–µ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

@router.callback_query(EditProfileStates.PAYMENT, F.data.startswith("edit_payment_"))
async def save_payment_edit(callback: types.CallbackQuery):
    payment = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['default_payment'] = payment
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –¢–∏–ø –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
@router.callback_query(EditProfileStates.SPORT, F.data.startswith("edit_sport_"))
async def save_sport_edit(callback: types.CallbackQuery, state: FSMContext):
    new_sport = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        old_sport = users[user_key].get("sport", "üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
        
        # –ï—Å–ª–∏ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é
        if old_sport == new_sport:
            await show_profile(callback.message, users[user_key])
            await state.clear()
            await callback.answer()
            return
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        migrated_profile = await migrate_profile_data(old_sport, new_sport, users[user_key])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        users[user_key] = migrated_profile
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, migrated_profile)
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
@router.callback_query(EditProfileStates.ROLE, F.data.startswith("edit_role_"))
async def save_role_edit(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['role'] = role
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å "–ò–≥—Ä–æ–∫" ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if role == "–ò–≥—Ä–æ–∫":
            users[user_key].pop('price', None)
            await storage.save_users(users)
            
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.message.answer("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞! (–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            await show_profile(callback.message, users[user_key])
            await state.clear()
            await callback.answer()
            return
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å "–¢—Ä–µ–Ω–µ—Ä" ‚Äî —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        elif role == "–¢—Ä–µ–Ω–µ—Ä":
            await storage.save_users(users)
            
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.message.answer("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\nüí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
            await state.set_state(EditProfileStates.PRICE)
            await callback.answer()
            return
    
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(EditProfileStates.PRICE, F.text)
async def save_price_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    if user_key in users:
        try:
            price = int(message.text.strip())
            if price < 0:
                await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            users[user_key]['price'] = price
            await storage.save_users(users)
            
            await message.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_profile(message, users[user_key])
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
            return
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è

@router.message(EditProfileStates.LEVEL, F.text)
async def save_level_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    if user_key in users:
        sport = users[user_key].get("sport", "üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
        config = get_sport_config(sport)
        
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
            rating = int(message.text.strip())
            if rating < 0:
                await message.answer("‚ùå –†–µ–π—Ç–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            users[user_key]['player_level'] = users[user_key].get('player_level', 1)
            users[user_key]['rating_points'] = rating
            users[user_key]['rating_edited'] = True
            await storage.save_users(users)
            
            await message.answer("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await show_profile(message, users[user_key])
            
        except ValueError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
            users[user_key]['player_level'] = users[user_key].get('player_level', 1)
            users[user_key]['rating_points'] = 1000  # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
            users[user_key]['rating_edited'] = True
            await storage.save_users(users)
            
            await message.answer("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@router.callback_query(EditProfileStates.COUNTRY, F.data.startswith("edit_country_"))
async def process_country_selection(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", 2)[2]
    await state.update_data(country=country)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    current_city = users[user_key].get('city', '') if user_key in users else ''
    
    await ask_for_city(callback.message, state, country, current_city)
    await callback.answer()

@router.callback_query(EditProfileStates.COUNTRY, F.data == "edit_other_country")
async def process_other_country(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=None)
    await state.set_state(EditProfileStates.COUNTRY_INPUT)
    await callback.answer()

@router.message(EditProfileStates.COUNTRY_INPUT, F.text)
async def process_country_input(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text.strip())
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_key = str(message.from_user.id)
    current_city = users[user_key].get('city', '') if user_key in users else ''
    
    data = await state.get_data()
    country = data.get('country', '')
    await ask_for_city(message, state, country, current_city)

async def ask_for_city(message: types.Message, state: FSMContext, country: str, current_city: str = ''):
    data = await state.get_data()
    country = data.get('country', country)
    
    if country == "–†–æ—Å—Å–∏—è":
        main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"edit_city_{city}")] for city in main_russian_cities]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="edit_other_city")])
    else:
        cities = cities_data.get(country, [])
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"edit_city_{city}")] for city in cities]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="edit_other_city")])

    await message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(EditProfileStates.CITY)

@router.callback_query(EditProfileStates.CITY, F.data.startswith("edit_city_"))
async def process_city_selection(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 2)[2]
    
    if city == "–ú–æ—Å–∫–≤–∞":
        buttons = [[InlineKeyboardButton(text=district, callback_data=f"edit_district_{district}")] for district in moscow_districts]
        await callback.message.edit_text(
            "üèô –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥ –ú–æ—Å–∫–≤—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await save_location(callback, city, state)
    
    await callback.answer()

@router.callback_query(EditProfileStates.CITY, F.data.startswith("edit_district_"))
async def process_district_selection(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.split("_", 2)[2]
    await save_location(callback, district, state)
    await callback.answer()

@router.callback_query(EditProfileStates.CITY, F.data == "edit_other_city")
async def process_other_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=None)
    await state.set_state(EditProfileStates.CITY_INPUT)
    await callback.answer()

@router.message(EditProfileStates.CITY_INPUT, F.text)
async def process_city_input(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await save_location_message(message, city, state)

async def save_location(callback: types.CallbackQuery, city: str, state: FSMContext):
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        data = await state.get_data()
        country = data.get('country', '')
        
        users[user_key]['country'] = country
        users[user_key]['city'] = city
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

async def save_location_message(message: types.Message, city: str, state: FSMContext):
    users = await storage.load_users()
    user_key = str(message.from_user.id)
    
    if user_key in users:
        data = await state.get_data()
        country = data.get('country', '')
        
        users[user_key]['country'] = country
        users[user_key]['city'] = city
        await storage.save_users(users)
        
        await message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@router.callback_query(F.data.startswith("edit_photo_"))
async def edit_photo_handler(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key not in users:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
        return
    
    try:
        await callback.message.delete()
    except:
        pass

    if action == "upload":
        await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:")
        await state.set_state(EditProfileStates.PHOTO_UPLOAD)
    elif action == "none":
        users[user_key]['photo_path'] = None
        await storage.save_users(users)
        await callback.message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–æ!")
        await show_profile(callback.message, users[user_key])
    elif action == "profile":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram
        try:
            photos = await callback.message.bot.get_user_profile_photos(callback.message.chat.id, limit=1)
            if photos.total_count > 0:
                file_id = photos.photos[0][-1].file_id
                ts = int(datetime.now().timestamp())
                filename = f"{callback.message.chat.id}_{ts}.jpg"
                dest_path = PHOTOS_DIR / filename
                ok = await download_photo_to_path(callback.message.bot, file_id, dest_path)
                if ok:
                    rel_path = dest_path.relative_to(BASE_DIR).as_posix()
                    users[user_key]['photo_path'] = rel_path
                    await storage.save_users(users)
                    await callback.message.answer("‚úÖ –§–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    await show_profile(callback.message, users[user_key])
                else:
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
            else:
                await callback.message.answer("‚ùå –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram –Ω–µ—Ç —Ñ–æ—Ç–æ", reply_markup=base_keyboard)
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
@router.message(EditProfileStates.PHOTO_UPLOAD, F.photo)
async def save_photo_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    if user_key not in users:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
        await state.clear()
        return
    
    try:
        photo_id = message.photo[-1].file_id
        ts = int(datetime.now().timestamp())
        filename = f"{message.from_user.id}_{ts}.jpg"
        dest_path = PHOTOS_DIR / filename
        ok = await download_photo_to_path(message.bot, photo_id, dest_path)
        
        if ok:
            rel_path = dest_path.relative_to(BASE_DIR).as_posix()
            users[user_key]['photo_path'] = rel_path
            await storage.save_users(users)
            await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_profile(message, users[user_key])
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ", reply_markup=base_keyboard)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤
@router.callback_query(EditProfileStates.DATING_GOAL, F.data.startswith("edit_dating_goal_"))
async def process_dating_goal_edit(callback: types.CallbackQuery, state: FSMContext):
    goal = callback.data.split("_", 3)[3]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['dating_goal'] = goal
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()
    await state.clear()

@router.callback_query(EditProfileStates.DATING_INTERESTS, F.data.startswith("edit_dating_interest_"))
async def process_dating_interest_edit(callback: types.CallbackQuery, state: FSMContext):
    interest = callback.data.split("_", 3)[3]
    user_data = await state.get_data()
    interests = user_data.get('dating_interests', [])
    
    if interest in interests:
        interests.remove(interest)
    else:
        interests.append(interest)
    
    await state.update_data(dating_interests=interests)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    for i in DATING_INTERESTS:
        if i in interests:
            buttons.append([InlineKeyboardButton(text=f"‚úÖ {i}", callback_data=f"edit_dating_interest_{i}")])
        else:
            buttons.append([InlineKeyboardButton(text=i, callback_data=f"edit_dating_interest_{i}")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="edit_dating_interests_done")])
    
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(EditProfileStates.DATING_INTERESTS, F.data == "edit_dating_interests_done")
async def process_dating_interests_done_edit(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    interests = user_data.get('dating_interests', [])
    
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['dating_interests'] = interests
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()
    await state.clear()

@router.message(EditProfileStates.DATING_ADDITIONAL, F.text)
async def save_dating_additional_edit(message: types.Message, state: FSMContext):
    additional = message.text.strip()
    users = await storage.load_users()
    user_key = str(message.from_user.id)
    
    if user_key in users:
        users[user_key]['dating_additional'] = additional
        await storage.save_users(users)
        
        await message.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

@router.message(EditProfileStates.MEETING_TIME, F.text)
async def save_meeting_time_edit(message: types.Message, state: FSMContext):
    meeting_time = message.text.strip()
    users = await storage.load_users()
    user_key = str(message.from_user.id)
    
    if user_key in users:
        users[user_key]['meeting_time'] = meeting_time
        await storage.save_users(users)
        
        await message.answer("‚úÖ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    user_id = callback.message.chat.id
    users = await storage.load_users()
    user_data = users.get(str(user_id), {})
    sport = user_data.get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_base_keyboard(sport)
    
    try:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=keyboard
        )
    except:
        await callback.message.delete()
        
        await callback.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=keyboard
        )
    await callback.answer()
