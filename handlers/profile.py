from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config.paths import BASE_DIR, PHOTOS_DIR
from config.profile import moscow_districts, base_keyboard, cities_data, countries, sport_type
from models.states import EditProfileStates
from utils.bot import show_profile
from utils.media import download_photo_to_path
from services.storage import storage

router = Router()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "edit_profile")
async def edit_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id)
    
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí¨ –û —Å–µ–±–µ", callback_data="1edit_comment"),
                InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="1edit_payment")
            ],
            [
                InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="1edit_photo"),
                InlineKeyboardButton(text="üåç –°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥", callback_data="1edit_location")
            ],
            [
                InlineKeyboardButton(text="üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞", callback_data="1edit_sport"),
                InlineKeyboardButton(text="üë§ –†–æ–ª—å", callback_data="1edit_role")
            ],
            [
                InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="1edit_price"),
                InlineKeyboardButton(text="üìä –£—Ä–æ–≤–µ–Ω—å", callback_data="1edit_level")
            ],
            [
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="1delete_profile")
            ],
            [
                InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{user_id}")
            ]
        ]
    )
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data.startswith("back_to_profile:"))
async def back_to_profile_handler(callback: types.CallbackQuery):
    user_id = callback.data.split(":")[1]
    profile = await storage.get_user(user_id)
    
    try:
        await callback.message.delete()
    except:
        pass

    if profile:
        await show_profile(callback.message, profile)
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "1delete_profile")
async def delete_profile_handler(callback: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
    confirm_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
            ]
        ]
    )
    try:
        await callback.message.edit_text(
            "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=confirm_keyboard
        )
    except:
        try:
            await callback.message.delete()
        except:
            await callback.message.edit_text(
                "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=confirm_keyboard
            )
    
    await callback.answer()

@router.callback_query(F.data == "confirm_delete")
async def confirm_delete_handler(callback: types.CallbackQuery):
    user_id = callback.message.chat.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    main_inline_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
    )
    
    if user_key in users:
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        if 'photo_path' in users[user_key] and users[user_key]['photo_path']:
            try:
                photo_path = BASE_DIR / users[user_key]['photo_path']
                if photo_path.exists():
                    photo_path.unlink()
            except:
                pass
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        del users[user_key]
        await storage.save_users(users)
        
        await callback.message.edit_text(
            "üóëÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=main_inline_keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=main_inline_keyboard
        )
    
    await callback.answer()

@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_handler(callback: types.CallbackQuery):
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id)
    
    if profile:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üí¨ –û —Å–µ–±–µ", callback_data="1edit_comment"),
                    InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="1edit_payment")
                ],
                [
                    InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="1edit_photo"),
                    InlineKeyboardButton(text="üåç –°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥", callback_data="1edit_location")
                ],
                [
                    InlineKeyboardButton(text="üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞", callback_data="1edit_sport"),
                    InlineKeyboardButton(text="üë§ –†–æ–ª—å", callback_data="1edit_role")
                ],
                [
                    InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="1edit_price"),
                    InlineKeyboardButton(text="üìä –£—Ä–æ–≤–µ–Ω—å", callback_data="1edit_level")
                ],
                [
                    InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="1delete_profile")
                ],
                [
                    InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{user_id}")
                ]
            ]
        )
        
        await callback.message.edit_text(
            "‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=keyboard
        )
    else:
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=base_keyboard
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.startswith("1edit_"))
async def edit_field_handler(callback: types.CallbackQuery, state: FSMContext):
    field = callback.data.split("_")[1]
    
    try:
        await callback.message.delete()
    except:
        pass

    if field == "comment":
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–µ–±–µ:")
        await state.set_state(EditProfileStates.COMMENT)
    elif field == "payment":
        buttons = [
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–∞–º", callback_data="edit_payment_–ü–æ–ø–æ–ª–∞–º")],
            [InlineKeyboardButton(text="üí≥ –Ø –æ–ø–ª–∞—á–∏–≤–∞—é", callback_data="edit_payment_–Ø –æ–ø–ª–∞—á–∏–≤–∞—é")],
            [InlineKeyboardButton(text="üíµ –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", callback_data="edit_payment_–°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞—é")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç–∞:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.PAYMENT)
    elif field == "photo":
        buttons = [
            [InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="edit_photo_upload")],
            [InlineKeyboardButton(text="üëÄ –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="edit_photo_none")],
            [InlineKeyboardButton(text="üì∏ –ò–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_photo_profile")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ç–æ:", reply_markup=keyboard)
    elif field == "location":
        buttons = []
        for country in countries[:5]:
            buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"edit_country_{country}")])
        buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="edit_other_country")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.COUNTRY)
    elif field == "sport":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        buttons = []
        row = []
        for i, sport in enumerate(sport_type):
            row.append(InlineKeyboardButton(text=sport, callback_data=f"edit_sport_{sport}"))
            if (i + 1) % 2 == 0 or i == len(sport_type) - 1:
                buttons.append(row)
                row = []
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.SPORT)
    elif field == "role":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        buttons = [
            [InlineKeyboardButton(text="üéæ –ò–≥—Ä–æ–∫", callback_data="edit_role_–ò–≥—Ä–æ–∫")],
            [InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="edit_role_–¢—Ä–µ–Ω–µ—Ä")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üë§ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=keyboard)
        await state.set_state(EditProfileStates.ROLE)
    elif field == "price":
        if user_key not in users:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
            await callback.answer()
            return

        role = users[user_key].get('role')
        if role != "–¢—Ä–µ–Ω–µ—Ä":
            await callback.message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤.")
            await callback.answer()
            return

        await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
        await state.set_state(EditProfileStates.PRICE)
    elif field == "level":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Ä–æ–≤–µ–Ω—å
        users = await storage.load_users()
        user_key = str(callback.message.chat.id)
        
        if user_key in users:
            user_data = users[user_key]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Ä–æ–≤–µ–Ω—å —Ä–∞–Ω–µ–µ
            if user_data.get('level_edited', False):
                await callback.message.answer("üìä –í–∞—à —É—Ä–æ–≤–µ–Ω—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–≥—Ä –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω –≤—Ä—É—á–Ω—É—é.")
            else:
                await callback.message.answer("üìä –í–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤):")
                await state.set_state(EditProfileStates.LEVEL)
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Å–µ–±–µ
@router.message(EditProfileStates.COMMENT, F.text)
async def save_comment_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    
    user_key = str(user_id)
    
    if user_key in users:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        users[user_key]['profile_comment'] = message.text.strip()
        await storage.save_users(users)
        
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–µ–±–µ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

@router.callback_query(EditProfileStates.PAYMENT, F.data.startswith("edit_payment_"))
async def save_payment_edit(callback: types.CallbackQuery):
    payment = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['default_payment'] = payment
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –¢–∏–ø –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
@router.callback_query(EditProfileStates.SPORT, F.data.startswith("edit_sport_"))
async def save_sport_edit(callback: types.CallbackQuery, state: FSMContext):
    sport = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['sport'] = sport
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
@router.callback_query(EditProfileStates.ROLE, F.data.startswith("edit_role_"))
async def save_role_edit(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        users[user_key]['role'] = role
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å "–ò–≥—Ä–æ–∫" ‚Äî —É–¥–∞–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        if role == "–ò–≥—Ä–æ–∫":
            users[user_key].pop('price', None)
            await storage.save_users(users)
            
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.message.answer("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞! (–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞)")
            await show_profile(callback.message, users[user_key])
            await state.clear()
            await callback.answer()
            return
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å "–¢—Ä–µ–Ω–µ—Ä" ‚Äî —Å—Ä–∞–∑—É —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        elif role == "–¢—Ä–µ–Ω–µ—Ä":
            await storage.save_users(users)
            
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.message.answer("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\n\nüí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
            await state.set_state(EditProfileStates.PRICE)
            await callback.answer()
            return
    
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(EditProfileStates.PRICE, F.text)
async def save_price_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    if user_key in users:
        try:
            price = int(message.text.strip())
            if price < 0:
                await message.answer("‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            users[user_key]['price'] = price
            await storage.save_users(users)
            
            await message.answer("‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_profile(message, users[user_key])
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏:")
            return
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
@router.message(EditProfileStates.LEVEL, F.text)
async def save_level_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    if user_key in users:
        try:
            level = int(message.text.strip())
            if level < 0:
                await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            users[user_key]['level'] = level
            users[user_key]['level_edited'] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —É—Ä–æ–≤–µ–Ω—å
            await storage.save_users(users)
            
            await message.answer("‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω!")
            await show_profile(message, users[user_key])
        except ValueError:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É—Ä–æ–≤–Ω—è:")
            return
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@router.callback_query(EditProfileStates.COUNTRY, F.data.startswith("edit_country_"))
async def process_country_selection(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", 2)[2]
    await state.update_data(country=country)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    current_city = users[user_key].get('city', '') if user_key in users else ''
    
    await ask_for_city(callback.message, state, country, current_city)
    await callback.answer()

@router.callback_query(EditProfileStates.COUNTRY, F.data == "edit_other_country")
async def process_other_country(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=None)
    await state.set_state(EditProfileStates.COUNTRY_INPUT)
    await callback.answer()

@router.message(EditProfileStates.COUNTRY_INPUT, F.text)
async def process_country_input(message: types.Message, state: FSMContext):
    await state.update_data(country=message.text.strip())
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_key = str(message.from_user.id)
    current_city = users[user_key].get('city', '') if user_key in users else ''
    
    data = await state.get_data()
    country = data.get('country', '')
    await ask_for_city(message, state, country, current_city)

async def ask_for_city(message: types.Message, state: FSMContext, country: str, current_city: str = ''):
    data = await state.get_data()
    country = data.get('country', country)
    
    if country == "–†–æ—Å—Å–∏—è":
        main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"edit_city_{city}")] for city in main_russian_cities]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="edit_other_city")])
    else:
        cities = cities_data.get(country, [])
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"edit_city_{city}")] for city in cities[:5]]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="edit_other_city")])

    await message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(EditProfileStates.CITY)

@router.callback_query(EditProfileStates.CITY, F.data.startswith("edit_city_"))
async def process_city_selection(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", 2)[2]
    
    if city == "–ú–æ—Å–∫–≤–∞":
        buttons = [[InlineKeyboardButton(text=district, callback_data=f"edit_district_{district}")] for district in moscow_districts]
        await callback.message.edit_text(
            "üèô –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥ –ú–æ—Å–∫–≤—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await save_location(callback, city, state)
    
    await callback.answer()

@router.callback_query(EditProfileStates.CITY, F.data.startswith("edit_district_"))
async def process_district_selection(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.split("_", 2)[2]
    await save_location(callback, district, state)
    await callback.answer()

@router.callback_query(EditProfileStates.CITY, F.data == "edit_other_city")
async def process_other_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=None)
    await state.set_state(EditProfileStates.CITY_INPUT)
    await callback.answer()

@router.message(EditProfileStates.CITY_INPUT, F.text)
async def process_city_input(message: types.Message, state: FSMContext):
    city = message.text.strip()
    await save_location_message(message, city, state)

async def save_location(callback: types.CallbackQuery, city: str, state: FSMContext):
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key in users:
        data = await state.get_data()
        country = data.get('country', '')
        
        users[user_key]['country'] = country
        users[user_key]['city'] = city
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(callback.message, users[user_key])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

async def save_location_message(message: types.Message, city: str, state: FSMContext):
    users = await storage.load_users()
    user_key = str(message.from_user.id)
    
    if user_key in users:
        data = await state.get_data()
        country = data.get('country', '')
        
        users[user_key]['country'] = country
        users[user_key]['city'] = city
        await storage.save_users(users)
        
        await message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(message, users[user_key])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@router.callback_query(F.data.startswith("edit_photo_"))
async def edit_photo_handler(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_", 2)[2]
    users = await storage.load_users()
    user_key = str(callback.message.chat.id)
    
    if user_key not in users:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
        return
    
    try:
        await callback.message.delete()
    except:
        pass

    if action == "upload":
        await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:")
        await state.set_state(EditProfileStates.PHOTO_UPLOAD)
    elif action == "none":
        users[user_key]['photo_path'] = None
        await storage.save_users(users)
        await callback.message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–æ!")
        await show_profile(callback.message, users[user_key])
    elif action == "profile":
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è Telegram
        try:
            photos = await callback.message.bot.get_user_profile_photos(callback.message.chat.id, limit=1)
            if photos.total_count > 0:
                file_id = photos.photos[0][-1].file_id
                ts = int(datetime.now().timestamp())
                filename = f"{callback.message.chat.id}_{ts}.jpg"
                dest_path = PHOTOS_DIR / filename
                ok = await download_photo_to_path(callback.message.bot, file_id, dest_path)
                if ok:
                    rel_path = dest_path.relative_to(BASE_DIR).as_posix()
                    users[user_key]['photo_path'] = rel_path
                    await storage.save_users(users)
                    await callback.message.answer("‚úÖ –§–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    await show_profile(callback.message, users[user_key])
                else:
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
            else:
                await callback.message.answer("‚ùå –í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ Telegram –Ω–µ—Ç —Ñ–æ—Ç–æ", reply_markup=base_keyboard)
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", reply_markup=base_keyboard)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
@router.message(EditProfileStates.PHOTO_UPLOAD, F.photo)
async def save_photo_upload(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    users = await storage.load_users()
    user_key = str(user_id)
    
    if user_key not in users:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=base_keyboard)
        await state.clear()
        return
    
    try:
        photo_id = message.photo[-1].file_id
        ts = int(datetime.now().timestamp())
        filename = f"{message.from_user.id}_{ts}.jpg"
        dest_path = PHOTOS_DIR / filename
        ok = await download_photo_to_path(message.bot, photo_id, dest_path)
        
        if ok:
            rel_path = dest_path.relative_to(BASE_DIR).as_posix()
            users[user_key]['photo_path'] = rel_path
            await storage.save_users(users)
            await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_profile(message, users[user_key])
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ", reply_markup=base_keyboard)
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ", reply_markup=base_keyboard)
    
    await state.clear()

@router.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: types.CallbackQuery):
    try:
        await callback.message.edit_text(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=base_keyboard
        )
    except:
        await callback.message.delete()
        
        await callback.message.answer(
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=base_keyboard
        )
    await callback.answer()
