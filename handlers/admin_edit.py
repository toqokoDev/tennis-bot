from calendar import c
from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config.paths import BASE_DIR, PHOTOS_DIR
from config.profile import create_sport_keyboard, moscow_districts, cities_data, countries, sport_type
from models.states import AdminEditProfileStates, RegistrationStates
from services.storage import storage
from utils.admin import is_admin
from utils.bot import show_profile
from utils.media import download_photo_to_path

admin_edit_router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@admin_edit_router.callback_query(F.data.startswith("admin_edit_profile:"))
async def admin_edit_profile_handler(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(":")[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(admin_edit_user_id=user_id)
    
    profile = users[user_id]
    sport = profile.get("sport", "üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    from config.profile import get_sport_config
    config = get_sport_config(sport)
    
    buttons = []
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã)
    buttons.append([
        InlineKeyboardButton(text="üì∑ –§–æ—Ç–æ", callback_data="adminUserProfile_edit_photo"),
        InlineKeyboardButton(text="üåç –°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥", callback_data="adminUserProfile_edit_location")
    ])
    
    # –ü–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if config.get("has_about_me", True):
        buttons.append([InlineKeyboardButton(text="üí¨ –û —Å–µ–±–µ", callback_data="adminUserProfile_edit_comment")])
    
    if config.get("has_payment", True):
        buttons.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞", callback_data="adminUserProfile_edit_payment")])
    
    if config.get("has_role", True):
        buttons.append([InlineKeyboardButton(text="üé≠ –†–æ–ª—å", callback_data="adminUserProfile_edit_role")])
    
    if config.get("has_level", True):
        buttons.append([InlineKeyboardButton(text="üìä –£—Ä–æ–≤–µ–Ω—å", callback_data="adminUserProfile_edit_level")])
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    if sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        buttons.append([InlineKeyboardButton(text="üíï –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞", callback_data="adminUserProfile_edit_dating_goal")])
        buttons.append([InlineKeyboardButton(text="üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="adminUserProfile_edit_dating_interests")])
        buttons.append([InlineKeyboardButton(text="üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", callback_data="adminUserProfile_edit_dating_additional")])
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å—Ç—Ä–µ—á
    if sport in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É"]:
        buttons.append([InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏", callback_data="adminUserProfile_edit_meeting_time")])
    
    # –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
    buttons.append([InlineKeyboardButton(text="üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞", callback_data="adminUserProfile_edit_sport")])
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å (–¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤)
    if profile.get('role') == '–¢—Ä–µ–Ω–µ—Ä':
        buttons.append([InlineKeyboardButton(text="üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="adminUserProfile_edit_price")])
    
    # –ù–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_edit_profile")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await callback.message.edit_text(
            f"üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n"
            f"–ò–º—è: {profile.get('first_name', '')} {profile.get('last_name', '')}\n"
            f"ID: {user_id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    except:
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            f"üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è:\n"
            f"–ò–º—è: {profile.get('first_name', '')} {profile.get('last_name', '')}\n"
            f"ID: {user_id}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@admin_edit_router.callback_query(F.data.startswith("adminUserProfile_edit_"))
async def admin_edit_field_handler(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    field = callback.data.split("_", 2)[2]
    
    try:
        await callback.message.delete()
    except:
        pass

    if field == "comment":
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–µ–±–µ:")
        await state.set_state(AdminEditProfileStates.COMMENT)
    elif field == "payment":
        buttons = [
            [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–∞–º", callback_data="adminProfile_edit_payment_–ü–æ–ø–æ–ª–∞–º")],
            [InlineKeyboardButton(text="üí≥ –Ø –æ–ø–ª–∞—á–∏–≤–∞—é", callback_data="adminProfile_edit_payment_–Ø –æ–ø–ª–∞—á–∏–≤–∞—é")],
            [InlineKeyboardButton(text="üíµ –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", callback_data="adminProfile_edit_payment_–°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞—é")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç–∞:", reply_markup=keyboard)
        await state.set_state(AdminEditProfileStates.PAYMENT)
    elif field == "photo":
        buttons = [
            [InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="adminProfile_edit_photo_upload")],
            [InlineKeyboardButton(text="üëÄ –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="adminProfile_edit_photo_none")],
            [InlineKeyboardButton(text="üì∏ –ò–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="adminProfile_edit_photo_profile")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ñ–æ—Ç–æ:", reply_markup=keyboard)
    elif field == "location":
        buttons = []
        for country in countries[:5]:
            buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"adminProfile_edit_country_{country}")])
        buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="adminProfile_edit_other_country")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:", reply_markup=keyboard)
        await state.set_state(AdminEditProfileStates.COUNTRY)
    elif field == "sport":
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        await callback.message.answer("üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:", reply_markup=create_sport_keyboard(pref="adminProfile_edit_sport_"))
        await state.set_state(AdminEditProfileStates.SPORT)
    elif field == "role":
        buttons = [
            [InlineKeyboardButton(text="üéØ –ò–≥—Ä–æ–∫", callback_data="adminProfile_edit_role_–ò–≥—Ä–æ–∫")],
            [InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="adminProfile_edit_role_–¢—Ä–µ–Ω–µ—Ä")]
        ]
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:", reply_markup=keyboard)
        await state.set_state(AdminEditProfileStates.ROLE)
    elif field == "price":
        # –ó–∞–ø—Ä–æ—Å —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        data = await state.get_data()
        user_id = data.get('admin_edit_user_id')
        
        if not user_id:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        
        users = await storage.load_users()
        if user_id in users:
            current_price = users[user_id].get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            await callback.message.answer(f"üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {current_price} —Ä—É–±.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö):")
            await state.set_state(AdminEditProfileStates.TRAINER_PRICE)
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif field == "level":
        # –ó–∞–ø—Ä–æ—Å —É—Ä–æ–≤–Ω—è
        data = await state.get_data()
        user_id = data.get('admin_edit_user_id')
        
        if not user_id:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            return
        
        users = await storage.load_users()
        if user_id in users:
            current_level = users[user_id].get('level', '–ù–µ —É–∫–∞–∑–∞–Ω')
            level_edited = users[user_id].get('level_edited', False)
            
            if level_edited:
                await callback.message.answer(f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª —É—Ä–æ–≤–µ–Ω—å –≤—Ä—É—á–Ω—É—é.\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤):")
            else:
                await callback.message.answer(f"üìä –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {current_level}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—á–∫–æ–≤):")
            
            await state.set_state(AdminEditProfileStates.LEVEL)
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    elif field == "dating_goal":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞
        from config.profile import DATING_GOALS
        buttons = []
        for i, goal in enumerate(DATING_GOALS):
            buttons.append([InlineKeyboardButton(text=goal, callback_data=f"adgoal_{i}")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üíï –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:", reply_markup=keyboard)
        await state.set_state(AdminEditProfileStates.DATING_GOAL)
    elif field == "dating_interests":
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        from config.profile import DATING_INTERESTS
        buttons = []
        for i, interest in enumerate(DATING_INTERESTS):
            buttons.append([InlineKeyboardButton(text=interest, callback_data=f"adint_{i}")])
        buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="adint_done")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        await callback.message.answer("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):", reply_markup=keyboard)
        await state.set_state(AdminEditProfileStates.DATING_INTERESTS)
    elif field == "dating_additional":
        await callback.message.answer("üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (—Ä–∞–±–æ—Ç–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ä–æ—Å—Ç –∏ —Ç.–¥.):")
        await state.set_state(AdminEditProfileStates.DATING_ADDITIONAL)
    elif field == "meeting_time":
        await callback.message.answer("‚è∞ –ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –∫–æ–≥–¥–∞ —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è:")
        await state.set_state(AdminEditProfileStates.MEETING_TIME)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Å–µ–±–µ
@admin_edit_router.message(AdminEditProfileStates.COMMENT, F.text)
async def admin_save_comment_edit(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ùÔøΩ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['profile_comment'] = message.text.strip()
        await storage.save_users(users)
        
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Å–µ–±–µ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(message, users[user_id])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

@admin_edit_router.callback_query(AdminEditProfileStates.PAYMENT, F.data.startswith("adminProfile_edit_payment_"))
async def admin_save_payment_edit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    payment = callback.data.split("_", 3)[3]
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['default_payment'] = payment
        await storage.save_users(users)

        await callback.message.edit_text("‚úÖ –¢–∏–ø –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, users[user_id])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
@admin_edit_router.callback_query(AdminEditProfileStates.SPORT, F.data.startswith("adminProfile_edit_sport_"))
async def admin_save_sport_edit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    sport = callback.data.split("_", 3)[3]
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['sport'] = sport
        await storage.save_users(users)
        
        await callback.message.edit_text("‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(callback.message, users[user_id])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–æ–ª–∏
@admin_edit_router.callback_query(AdminEditProfileStates.ROLE, F.data.startswith("adminProfile_edit_role_"))
async def admin_save_role_edit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    role = callback.data.split("_", 3)[3]
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        if role == "–¢—Ä–µ–Ω–µ—Ä" and users[user_id].get('role') != "–¢—Ä–µ–Ω–µ—Ä":
            # –ï—Å–ª–∏ –º–µ–Ω—è–µ–º –Ω–∞ —Ç—Ä–µ–Ω–µ—Ä–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
            await state.update_data(role=role)
            await callback.message.edit_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
            await state.set_state(AdminEditProfileStates.TRAINER_PRICE)
        else:
            # –ï—Å–ª–∏ –º–µ–Ω—è–µ–º –Ω–∞ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ —Ä–æ–ª—å –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
            users[user_id]['role'] = role
            if role == "–ò–≥—Ä–æ–∫":
                users[user_id]['price'] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
            
            await storage.save_users(users)
            await callback.message.edit_text("‚úÖ –†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            await show_profile(callback.message, users[user_id])
            await state.clear()
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã —Ç—Ä–µ–Ω–µ—Ä–∞
@admin_edit_router.message(AdminEditProfileStates.TRAINER_PRICE, F.text)
async def admin_save_trainer_price(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    role = data.get('role')
    
    if not user_id or not role:
        await message.answer("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        await state.clear()
        return
    
    try:
        price = int(message.text.strip())
        if price <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ):")
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['role'] = role
        users[user_id]['price'] = price
        await storage.save_users(users)
        
        await message.answer("‚úÖ –†–æ–ª—å –∏ —Ü–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(message, users[user_id])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
@admin_edit_router.message(AdminEditProfileStates.LEVEL, F.text)
async def admin_save_level_edit(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    try:
        level = int(message.text.strip())
        if level < 0:
            await message.answer("‚ùå –£—Ä–æ–≤–µ–Ω—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è —É—Ä–æ–≤–Ω—è:")
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['level'] = level
        users[user_id]['level_edited'] = True  # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É—Ä–æ–≤–µ–Ω—å –±—ã–ª –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω
        await storage.save_users(users)
        
        await message.answer("‚úÖ –£—Ä–æ–≤–µ–Ω—å –æ–±–Ω–æ–≤–ª–µ–Ω!")
        await show_profile(message, users[user_id])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
@admin_edit_router.callback_query(AdminEditProfileStates.COUNTRY, F.data.startswith("adminProfile_edit_country_"))
async def admin_process_country_selection(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    country = callback.data.split("_", 3)[3]
    await state.update_data(country=country)
    
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    current_city = users[user_id].get('city', '') if user_id in users else ''
    
    await admin_ask_for_city(callback.message, state, country, current_city)
    await callback.answer()

@admin_edit_router.callback_query(AdminEditProfileStates.COUNTRY, F.data == "adminProfile_edit_other_country")
async def admin_process_other_country(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=None)
    await state.set_state(AdminEditProfileStates.COUNTRY_INPUT)
    await callback.answer()

@admin_edit_router.message(AdminEditProfileStates.COUNTRY_INPUT, F.text)
async def admin_process_country_input(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    await state.update_data(country=message.text.strip())
    
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    current_city = users[user_id].get('city', '') if user_id in users else ''
    
    data = await state.get_data()
    country = data.get('country', '')
    await admin_ask_for_city(message, state, country, current_city)

async def admin_ask_for_city(message: types.Message, state: FSMContext, country: str, current_city: str = ''):
    data = await state.get_data()
    country = data.get('country', country)
    
    cities = cities_data.get(country, [])
    buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"adminProfile_edit_city_{city}")] for city in cities]
    buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="adminProfile_edit_other_city")])

    try:
        await message.edit_text(
            f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except:
        await message.answer(
            f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    await state.set_state(AdminEditProfileStates.CITY)

@admin_edit_router.callback_query(AdminEditProfileStates.CITY, F.data.startswith("adminProfile_edit_city_"))
async def admin_process_city_selection(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    city = callback.data.split("_", 3)[3]
    await state.update_data(city=city)
    
    if city == "–ú–æ—Å–∫–≤–∞":
        buttons = []
        row = []
        for i, district in enumerate(moscow_districts):
            row.append(InlineKeyboardButton(text=district, callback_data=f"adminProfile_edit_district_{district}"))
            if (i + 1) % 3 == 0 or i == len(moscow_districts) - 1:
                buttons.append(row)
                row = []
        await callback.message.edit_text(
            "üèô –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥ –ú–æ—Å–∫–≤—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await admin_save_location(callback, city, state)
    
    await callback.answer()

@admin_edit_router.callback_query(AdminEditProfileStates.CITY, F.data.startswith("adminProfile_edit_district_"))
async def admin_process_district_selection(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    data = await state.get_data()
    city = data.get('city', '')
    
    district = callback.data.split("_", 3)[3]
    await admin_save_location(callback, city, state, district)
    await callback.answer()

@admin_edit_router.callback_query(AdminEditProfileStates.CITY, F.data == "adminProfile_edit_other_city")
async def admin_process_other_city(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=None)
    await state.set_state(AdminEditProfileStates.CITY_INPUT)
    await callback.answer()

@admin_edit_router.message(AdminEditProfileStates.CITY_INPUT, F.text)
async def admin_process_city_input(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    city = message.text.strip()
    await admin_save_location_message(message, city, state)

async def admin_save_location(callback: types.CallbackQuery, city: str, state: FSMContext, district: str = ''):
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        data = await state.get_data()
        country = data.get('country', '')
        
        users[user_id]['country'] = country
        users[user_id]['city'] = city
        users[user_id]['district'] = district
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(callback.message, users[user_id])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

async def admin_save_location_message(message: types.Message, city: str, state: FSMContext):
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        data = await state.get_data()
        country = data.get('country', '')
        
        users[user_id]['country'] = country
        users[user_id]['city'] = city
        await storage.save_users(users)
        
        await message.answer("‚úÖ –°—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
        await show_profile(message, users[user_id])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–æ—Ç–æ
@admin_edit_router.callback_query(F.data.startswith("adminProfile_edit_photo_"))
async def admin_edit_photo_handler(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    action = callback.data.split("_", 3)[3]
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        return
    
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    try:
        await callback.message.delete()
    except:
        pass

    if action == "upload":
        await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:")
        await state.set_state(AdminEditProfileStates.PHOTO_UPLOAD)
    elif action == "none":
        users[user_id]['photo_path'] = None
        await storage.save_users(users)
        await callback.message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è —É–¥–∞–ª–µ–Ω–æ!")
        await show_profile(callback.message, users[user_id])
    elif action == "profile":
        try:
            photos = await callback.message.bot.get_user_profile_photos(int(user_id), limit=1)
            if photos.total_count > 0:
                file_id = photos.photos[0][-1].file_id
                ts = int(datetime.now().timestamp())
                filename = f"{user_id}_{ts}.jpg"
                dest_path = PHOTOS_DIR / filename
                ok = await download_photo_to_path(callback.message.bot, file_id, dest_path)
                if ok:
                    rel_path = dest_path.relative_to(BASE_DIR).as_posix()
                    users[user_id]['photo_path'] = rel_path
                    await storage.save_users(users)
                    await callback.message.answer("‚úÖ –§–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                    await show_profile(callback.message, users[user_id])
                else:
                    await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
            else:
                await callback.message.answer("‚ùå –í –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ñ–æ—Ç–æ")
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è")
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ
@admin_edit_router.message(AdminEditProfileStates.PHOTO_UPLOAD, F.photo)
async def admin_save_photo_upload(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id not in users:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    try:
        photo_id = message.photo[-1].file_id
        ts = int(datetime.now().timestamp())
        filename = f"{user_id}_{ts}.jpg"
        dest_path = PHOTOS_DIR / filename
        ok = await download_photo_to_path(message.bot, photo_id, dest_path)
        
        if ok:
            rel_path = dest_path.relative_to(BASE_DIR).as_posix()
            users[user_id]['photo_path'] = rel_path
            await storage.save_users(users)
            await message.answer("‚úÖ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
            await show_profile(message, users[user_id])
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤ (–∞–¥–º–∏–Ω)
@admin_edit_router.callback_query(AdminEditProfileStates.DATING_GOAL, F.data.startswith("adgoal_"))
async def admin_process_dating_goal_edit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    goal_index = int(callback.data.split("_")[1])
    from config.profile import DATING_GOALS
    goal = DATING_GOALS[goal_index]
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await callback.answer()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['dating_goal'] = goal
        await storage.save_users(users)
        
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer("‚úÖ –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_profile(callback.message, users[user_id])
    else:
        await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await callback.answer()
    await state.clear()

@admin_edit_router.callback_query(AdminEditProfileStates.DATING_INTERESTS, F.data.startswith("adint_"))
async def admin_process_dating_interest_edit(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    if callback.data == "adint_done":
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
        user_data = await state.get_data()
        interests = user_data.get('dating_interests', [])
        user_id = user_data.get('admin_edit_user_id')
        
        if not user_id:
            await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
            await callback.answer()
            return
        
        users = await storage.load_users()
        
        if user_id in users:
            users[user_id]['dating_interests'] = interests
            await storage.save_users(users)
            
            try:
                await callback.message.delete()
            except:
                pass
            
            await callback.message.answer("‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            await show_profile(callback.message, users[user_id])
        else:
            await callback.message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        await callback.answer()
        await state.clear()
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–∞
    interest_index = int(callback.data.split("_")[1])
    from config.profile import DATING_INTERESTS
    interest = DATING_INTERESTS[interest_index]
    user_data = await state.get_data()
    interests = user_data.get('dating_interests', [])
    
    if interest in interests:
        interests.remove(interest)
    else:
        interests.append(interest)
    
    await state.update_data(dating_interests=interests)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    for i, interest_text in enumerate(DATING_INTERESTS):
        if interest_text in interests:
            buttons.append([InlineKeyboardButton(text=f"‚úÖ {interest_text}", callback_data=f"adint_{i}")])
        else:
            buttons.append([InlineKeyboardButton(text=interest_text, callback_data=f"adint_{i}")])
    buttons.append([InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="adint_done")])
    
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@admin_edit_router.message(AdminEditProfileStates.DATING_ADDITIONAL, F.text)
async def admin_save_dating_additional_edit(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    additional = message.text.strip()
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['dating_additional'] = additional
        await storage.save_users(users)
        
        await message.answer("‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await show_profile(message, users[user_id])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

@admin_edit_router.message(AdminEditProfileStates.MEETING_TIME, F.text)
async def admin_save_meeting_time_edit(message: types.Message, state: FSMContext):
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    meeting_time = message.text.strip()
    data = await state.get_data()
    user_id = data.get('admin_edit_user_id')
    
    if not user_id:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–Ω")
        await state.clear()
        return
    
    users = await storage.load_users()
    
    if user_id in users:
        users[user_id]['meeting_time'] = meeting_time
        await storage.save_users(users)
        
        await message.answer("‚úÖ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        await show_profile(message, users[user_id])
    else:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@admin_edit_router.callback_query(F.data == "admin_cancel")
async def admin_cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await state.clear()
    await callback.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()
