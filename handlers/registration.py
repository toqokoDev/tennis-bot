from datetime import datetime

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config.paths import BASE_DIR, PHOTOS_DIR
from config.profile import moscow_districts, player_levels, base_keyboard

from models.states import RegistrationStates

from utils.utils import calculate_age
from utils.media import download_photo_to_path
from utils.bot import show_current_data, show_profile
from utils.ssesion import delete_session, load_session, save_session
from utils.validate import validate_date, validate_date_range, validate_future_date, validate_price
from utils.json_data import get_user_profile_from_storage, is_user_registered, load_json, load_users, save_user_to_json


router = Router()

# ---------- –ü–µ—Ä–≤–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ----------
cities_data = load_json("cities.json")
sports = load_json("sports.json")
countries = list(cities_data.keys())

# ---------- –ö–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞ ----------
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–º–∞–Ω–¥–µ start (–¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏)
    if len(message.text.split()) > 1:
        command_parts = message.text.split()
        if len(command_parts) >= 2:
            start_param = command_parts[1]
            
            # –ï—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å (profile_12345)
            if start_param.startswith('profile_'):
                profile_user_id = start_param.replace('profile_', '')
                users = load_users()
                
                if profile_user_id in users:
                    profile_user = users[profile_user_id]
                    
                    await show_profile(message, profile_user)
                else:
                    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    
                return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    session_data = load_session(user_id)
    if session_data:
        await state.set_data(session_data)
    
    if is_user_registered(user_id):
        profile = get_user_profile_from_storage(user_id) or {}
        first_name = profile.get('first_name', message.from_user.first_name or '')
        last_name = profile.get('last_name', message.from_user.last_name or '')
        rating = profile.get('rating_points', 0)
        games_played = profile.get('games_played', 0)
        games_wins = profile.get('games_wins', 0)
        
        greet = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{first_name} {last_name}</b>!\n\n"
            f"üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>\n"
            f"üéæ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{games_played}</b>\n"
            f"‚úÖ –ü–æ–±–µ–¥: <b>{games_wins}</b>\n\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ tennis-play.com\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )  

        await message.answer(greet, parse_mode="HTML", reply_markup=base_keyboard)
        await state.clear()
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    await state.set_state(RegistrationStates.PHONE)
    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n\n"
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ tennis-play.com\n\n"
        "üéæ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ –ù–∞–π—Ç–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –¥–ª—è –º–∞—Ç—á–µ–π\n"
        "‚Ä¢ –í–Ω–æ—Å–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥\n\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="HTML"
    )
    save_session(user_id, await state.get_data())

@router.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user_id = message.chat.id
    if not is_user_registered(user_id):
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    profile = get_user_profile_from_storage(user_id) or {}
    await show_profile(message, profile)

@router.message(Command("profile_id"))
async def cmd_profile_id(message: types.Message):
    try:
        user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profile_id USER_ID")
        return
    
    profile = get_user_profile_from_storage(user_id)
    if not profile:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await show_profile(message, profile)

@router.message(RegistrationStates.PHONE, F.contact)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(RegistrationStates.FIRST_NAME)
    save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.FIRST_NAME, F.text)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.LAST_NAME)
    save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.LAST_NAME, F.text)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(RegistrationStates.BIRTH_DATE)
    save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.BIRTH_DATE, F.text)
async def process_birth_date(message: Message, state: FSMContext):
    date_str = message.text.strip()
    if not validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    age = calculate_age(date_str)
    if age < 12:
        await message.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –Ω–∞—à —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å—Ç–∞—Ä—à–µ 12 –ª–µ—Ç.")
        await state.clear()
        return
    elif age > 100:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
        return
    
    await state.update_data(birth_date=date_str)
    
    buttons = []
    for country in countries[:5]:
        buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"country_{country}")])
    buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="other_country")])

    await show_current_data(
        message, state,
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.COUNTRY)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.COUNTRY, F.data.startswith("country_"))
async def process_country_selection(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(country=country)
    await ask_for_city(callback.message, state, country)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.callback_query(RegistrationStates.COUNTRY, F.data == "other_country")
async def process_other_country(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=None)
    await state.set_state(RegistrationStates.COUNTRY_INPUT)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.message(RegistrationStates.COUNTRY_INPUT, F.text)
async def process_country_input(message: Message, state: FSMContext):
    await state.update_data(country=message.text.strip())
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(RegistrationStates.CITY_INPUT)
    save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.CITY_INPUT, F.text)
async def process_city_input(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await ask_for_role(message, state)
    save_session(message.chat.id, await state.get_data())

async def ask_for_city(message: types.Message, state: FSMContext, country: str):
    if country == "–†–æ—Å—Å–∏—è":
        main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"city_{city}")] for city in main_russian_cities]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="other_city")])
    else:
        cities = cities_data.get(country, [])
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"city_{city}")] for city in cities[:5]]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="other_city")])

    await show_current_data(
        message, state,
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.CITY)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.CITY, F.data.startswith("city_"))
async def process_city_selection(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=1)[1]

    if city == "–ú–æ—Å–∫–≤–∞":
        buttons = [[InlineKeyboardButton(text=district, callback_data=f"district_{district}")] for district in moscow_districts]
        await show_current_data(
            callback.message, state,
            "üèô –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥ –ú–æ—Å–∫–≤—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await state.update_data(city=city)
        await ask_for_role(callback.message, state)

    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.callback_query(RegistrationStates.CITY, F.data.startswith("district_"))
async def process_district_selection(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(city=district)
    await ask_for_role(callback.message, state)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.callback_query(RegistrationStates.CITY, F.data == "other_city")
async def process_other_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=None)
    await state.set_state(RegistrationStates.CITY_INPUT)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

async def ask_for_role(message: types.Message, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text="üéØ –ò–≥—Ä–æ–∫", callback_data="role_–ò–≥—Ä–æ–∫")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="role_–¢—Ä–µ–Ω–µ—Ä")]
    ]
    await show_current_data(
        message, state,
        "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.ROLE)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.ROLE, F.data.startswith("role_"))
async def process_role_selection(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(role=role)

    if role == "–¢—Ä–µ–Ω–µ—Ä":
        await callback.message.edit_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=None)
        await state.set_state(RegistrationStates.TRAINER_PRICE)
    else:
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π —Å Markdown
        levels_text = """*üèÜ –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π —Ç–µ–Ω–Ω–∏—Å–∏—Å—Ç–æ–≤:*

*0\.0* \- –ù–æ–≤–∏—á–æ–∫ –±–µ–∑ –æ–ø—ã—Ç–∞
*0\.5* \- –î–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏
*1\.0* \- –¢–µ–Ω–Ω–∏—Å–∏—Å—Ç –¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–µ —à–∞–≥–∏
*1\.5* \- –ò–≥—Ä–æ–∫ –æ–±–ª–∞–¥–∞–µ—Ç –Ω–µ–±–æ–ª—å—à–∏–º –æ–ø—ã—Ç–æ–º, —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —É–¥–∞—Ä–æ–≤
*2\.0* \- –ó–∞–º–µ—Ç–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–¥–∞—Ä–æ–≤\. –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–º–∞—Ö
*2\.5* \- –ü—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–¥–≤–∏–¥–µ—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ—Ç–∞ –º—è—á–∞, –Ω–æ —á—É–≤—Å—Ç–≤–æ –∫–æ—Ä—Ç–∞ —Å–ª–∞–±–æ–µ
*3\.0* \- –•–æ—Ä–æ—à–æ –æ—Ç–±–∏–≤–∞–µ—Ç —Å—Ä–µ–¥–Ω–∏–µ –ø–æ —Ç–µ–º–ø—É –º—è—á–∏, –Ω–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–∏–ª—É
*3\.5* \- –ú–æ–∂–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–¥–∞—Ä–æ–≤ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
*4\.0* \- –í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–¥–∞—Ä—ã, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –≥–ª—É–±–∏–Ω—É –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
*4\.5* \- –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–¥–∞—Ä—ã, —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–ª—É –∏ –≤—Ä–∞—â–µ–Ω–∏–µ
*5\.0* \- –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ —á—É–≤—Å—Ç–≤—É–µ—Ç –º—è—á, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–æ–±–µ–Ω–Ω—ã–µ —É–¥–∞—Ä—ã
*5\.5* \- –ì–ª–∞–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ \- –º–æ—â–Ω—ã–µ —É–¥–∞—Ä—ã –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
*6\.0* \- –í—ã—Å–æ–∫–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
*6\.5* \- –ë–ª–∏–∑–æ–∫ –∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —É—Ä–æ–≤–Ω—é
*7\.0* \- –°–ø–æ—Ä—Ç—Å–º–µ–Ω –º–∏—Ä–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞

üëá *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:*"""
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å–µ—Ç–∫–µ 5√ó3
        buttons = []
        levels_list = list(player_levels.keys())
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
        for i in range(0, len(levels_list), 5):
            row = []
            for level in levels_list[i:i+5]:
                row.append(InlineKeyboardButton(
                    text=f"üéæ {level}",
                    callback_data=f"level_{level}"
                ))
            buttons.append(row)
        
        await callback.message.edit_text(
            levels_text,
            parse_mode="MarkdownV2",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(RegistrationStates.PLAYER_LEVEL)

    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.message(RegistrationStates.TRAINER_PRICE, F.text)
async def process_trainer_price(message: types.Message, state: FSMContext):
    price_str = message.text.strip()
    if not validate_price(price_str):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):")
        return
    
    await state.update_data(price=int(price_str))
    await ask_for_sport(message, state)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.PLAYER_LEVEL, F.data.startswith("level_"))
async def process_player_level(callback: types.CallbackQuery, state: FSMContext):
    level = callback.data.split("_", maxsplit=1)[1]
    description = player_levels.get(level, {}).get('desc', '')
    await state.update_data(player_level=level)

    await callback.message.edit_text(
        f"üèÜ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: {level}\n\n{description}",
        reply_markup=None
    )
    await ask_for_sport(callback.message, state)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

async def ask_for_sport(message: types.Message, state: FSMContext):
    buttons = [[InlineKeyboardButton(text=sport, callback_data=f"sport_{sport}")] for sport in sports[:5]]
    await show_current_data(
        message, state,
        "üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.SPORT)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.SPORT, F.data.startswith("sport_"))
async def process_sport_selection(callback: types.CallbackQuery, state: FSMContext):
    sport = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(sport=sport)

    buttons = [
        [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_–ú—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_–ñ–µ–Ω—Å–∫–∏–π")]
    ]
    await show_current_data(
        callback.message, state,
        "üë´ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.GENDER)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.callback_query(RegistrationStates.GENDER, F.data.startswith("gender_"))
async def process_gender_selection(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(gender=gender)
    
    user_data = await state.get_data()
    if user_data.get('role') == "–¢—Ä–µ–Ω–µ—Ä":
        # –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ –∏ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await state.update_data(photo="none", photo_path=None, show_in_search=True)
        await finish_registration(callback.message, state)
    else:
        # –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        buttons = [
            [InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="photo_upload")],
            [InlineKeyboardButton(text="üëÄ –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="photo_none")],
            [InlineKeyboardButton(text="–§–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="photo_profile")]
        ]
        await show_current_data(
            callback.message, state,
            "üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(RegistrationStates.PHOTO)
    
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.callback_query(RegistrationStates.PHOTO, F.data.startswith("photo_"))
async def process_photo_choice(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", maxsplit=1)[1]

    if choice == "upload":
        await callback.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫):", reply_markup=None)
        return

    if choice == "profile":
        try:
            photos = await callback.message.bot.get_user_profile_photos(callback.from_user.id, limit=1)
            if photos.total_count > 0:
                file_id = photos.photos[0][-1].file_id
                ts = int(datetime.now().timestamp())
                filename = f"{callback.from_user.id}_{ts}.jpg"
                dest_path = PHOTOS_DIR / filename
                ok = await download_photo_to_path(callback.message.bot, file_id, dest_path)
                if ok:
                    rel_path = dest_path.relative_to(BASE_DIR).as_posix()
                    await state.update_data(photo="profile", photo_path=rel_path)
                    await ask_for_show_in_search(callback.message, state)
                else:
                    await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é:")
                    return
            else:
                await callback.message.edit_text("‚ùå –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é:")
                return
        except Exception:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é:")
            return
    elif choice == "none":
        await state.update_data(photo="none", photo_path=None)
        await ask_for_show_in_search(callback.message, state)
    else:
        await state.update_data(photo="none", photo_path=None)
        await ask_for_show_in_search(callback.message, state)

    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.message(RegistrationStates.PHOTO, F.photo)
async def process_photo_upload(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    ts = int(datetime.now().timestamp())
    filename = f"{message.chat.id}_{ts}.jpg"
    dest_path = PHOTOS_DIR / filename
    ok = await download_photo_to_path(message.bot, photo_id, dest_path)
    if ok:
        rel_path = dest_path.relative_to(BASE_DIR).as_posix()
        await state.update_data(photo="uploaded", photo_path=rel_path)
        await ask_for_show_in_search(message, state)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ñ–æ—Ç–æ.")
    save_session(message.chat.id, await state.get_data())

async def ask_for_show_in_search(message: types.Message, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="showsearch_yes")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="showsearch_no")]
    ]
    await show_current_data(
        message, state,
        "üîç –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø–æ–∏—Å–∫–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.SHOW_IN_SEARCH)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.SHOW_IN_SEARCH, F.data.startswith("showsearch_"))
async def process_show_in_search(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(show_in_search=(choice == "yes"))

    buttons = [
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="vacation_yes")],
        [InlineKeyboardButton(text="‚è© –ù–µ—Ç", callback_data="vacation_no")]
    ]
    await show_current_data(
        callback.message, state,
        "‚úàÔ∏è –•–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –ø–æ —Ç–µ–Ω–Ω–∏—Å—É –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.VACATION_TENNIS)
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.callback_query(RegistrationStates.VACATION_TENNIS, F.data.startswith("vacation_"))
async def process_vacation_tennis(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", maxsplit=1)[1]
    
    if choice == "yes":
        await callback.message.edit_text("‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=None)
        await state.set_state(RegistrationStates.VACATION_START)
    else:
        await state.update_data(vacation_tennis=False)
        await ask_for_default_payment(callback.message, state)
    
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.message(RegistrationStates.VACATION_START, F.text)
async def process_vacation_start(message: Message, state: FSMContext):
    date_str = message.text.strip()
    if not validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    if not validate_future_date(date_str):
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        return
    
    await state.update_data(vacation_start=date_str, vacation_tennis=True)
    await message.answer("‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–¥—ã—Ö–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(RegistrationStates.VACATION_END)
    save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_END, F.text)
async def process_vacation_end(message: Message, state: FSMContext):
    date_str = message.text.strip()
    if not validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    user_data = await state.get_data()
    start_date = user_data.get('vacation_start')
    
    if not validate_date_range(start_date, date_str):
        await message.answer("‚ùå –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        return
    
    await state.update_data(vacation_end=date_str)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(RegistrationStates.VACATION_COMMENT)
    save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_COMMENT, F.text)
async def process_vacation_comment(message: Message, state: FSMContext):
    if message.text.strip() != "/skip":
        await state.update_data(vacation_comment=message.text.strip())
    await ask_for_default_payment(message, state)
    save_session(message.chat.id, await state.get_data())

async def ask_for_default_payment(message: types.Message, state: FSMContext):
    buttons = [
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–∞–º", callback_data="defaultpay_–ü–æ–ø–æ–ª–∞–º")],
        [InlineKeyboardButton(text="üí≥ –Ø –æ–ø–ª–∞—á–∏–≤–∞—é", callback_data="defaultpay_–Ø –æ–ø–ª–∞—á–∏–≤–∞—é")],
        [InlineKeyboardButton(text="üíµ –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", callback_data="defaultpay_–°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç")]
    ]
    await show_current_data(
        message, state,
        "üí≥ –ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∫–æ—Ä—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.DEFAULT_PAYMENT)
    save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.DEFAULT_PAYMENT, F.data.startswith("defaultpay_"))
async def process_default_payment(callback: types.CallbackQuery, state: FSMContext):
    payment = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(default_payment=payment)
    
    user_data = await state.get_data()
    if user_data.get('role') == "–¢—Ä–µ–Ω–µ—Ä":
        # –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å—Ä–∞–∑—É –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await finish_registration(callback.message, state)
    else:
        # –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        await callback.message.edit_text("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–Ω–∫–µ—Ç–µ (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):", reply_markup=None)
        await state.set_state(RegistrationStates.PROFILE_COMMENT)
    
    await callback.answer()
    save_session(callback.from_user.id, await state.get_data())

@router.message(RegistrationStates.PROFILE_COMMENT, F.text)
async def process_profile_comment(message: types.Message, state: FSMContext):
    if message.text.strip() != "/skip":
        await state.update_data(profile_comment=message.text.strip())

    await finish_registration(message, state)
    
    save_session(message.chat.id, await state.get_data())

async def finish_registration(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    username = message.from_user.username

    user_state = await state.get_data()

    profile = {
        "telegram_id": user_id,
        "username": username,
        "first_name": user_state.get("first_name"),
        "last_name": user_state.get("last_name"),
        "phone": user_state.get("phone"),
        "birth_date": user_state.get("birth_date"),
        "country": user_state.get("country"),
        "city": user_state.get("city"),
        "role": user_state.get("role", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"),
        "sport": user_state.get("sport"),
        "gender": user_state.get("gender"),
        "player_level": user_state.get("player_level"),
        "rating_points": player_levels.get(user_state.get("player_level"), {}).get("points", 0),
        "price": user_state.get("price"),
        "photo_path": user_state.get("photo_path"),
        "games_played": 0,
        "games_wins": 0,
        "default_payment": user_state.get("default_payment"),
        "show_in_search": user_state.get("show_in_search", True),
        "profile_comment": user_state.get("profile_comment"),
        "games": [],  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∏–≥—Ä
        "created_at": datetime.now().isoformat(timespec="seconds")
    }

    if user_state.get('vacation_tennis', False):
        profile["vacation_tennis"] = True
        profile["vacation_start"] = user_state.get('vacation_start')
        profile["vacation_end"] = user_state.get('vacation_end')
        profile["vacation_comment"] = user_state.get('vacation_comment')

    save_user_to_json(user_id, profile)
    await state.clear()
    delete_session(user_id)

    await show_profile(message, profile)
