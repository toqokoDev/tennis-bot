from datetime import datetime, timedelta
import re

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

from config.paths import BASE_DIR, PHOTOS_DIR
from config.profile import (
    create_sport_keyboard, moscow_districts, player_levels, tennis_levels, table_tennis_levels, 
    base_keyboard, cities_data, sport_type, countries, SPORT_FIELD_CONFIG,
    DATING_GOALS, DATING_INTERESTS, DATING_ADDITIONAL_FIELDS, get_sport_config, get_sport_texts, get_base_keyboard,
    channels_usernames
)

from models.states import RegistrationStates

from services.channels import send_registration_notification
from utils.admin import is_user_banned
from utils.media import download_photo_to_path
from utils.bot import show_current_data, show_profile
from utils.validate import validate_date, validate_date_range, validate_future_date, validate_price
from services.storage import storage
from services.web_api import web_api_client
from services.channels import send_tournament_application_to_channel
from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ----------

def get_levels_for_sport(sport: str) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    config = get_sport_config(sport)
    level_type = config.get("level_type", "tennis")
    
    if level_type == "table_tennis":
        return table_tennis_levels
    elif level_type == "table_tennis_rating":
        return {}  # –î–ª—è –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –Ω–µ –Ω—É–∂–Ω—ã –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    else:
        return tennis_levels

def check_profile_completeness(profile: dict, sport: str) -> tuple[bool, list]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (is_complete, missing_fields)
    """
    config = get_sport_config(sport)
    missing_fields = []
    
    # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è (–≤—Å–µ–≥–¥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
    required_basic = ["first_name", "last_name", "birth_date", "country", "city", "gender"]
    for field in required_basic:
        if not profile.get(field):
            missing_fields.append(field)
    
    # –ü–æ–ª—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    if config.get("has_role", True) and not profile.get("role"):
        missing_fields.append("role")
    
    if config.get("has_level", True) and not profile.get("player_level"):
        missing_fields.append("player_level")
    
    if config.get("has_about_me", True) and not profile.get("profile_comment"):
        missing_fields.append("profile_comment")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    if sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        if not profile.get("dating_goal"):
            missing_fields.append("dating_goal")
        if not profile.get("dating_interests"):
            missing_fields.append("dating_interests")
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –≤—Å—Ç—Ä–µ—á
    if sport in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É"]:
        if not profile.get("meeting_time"):
            missing_fields.append("meeting_time")
    
    return len(missing_fields) == 0, missing_fields

def get_missing_fields_text(missing_fields: list, sport: str) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π"""
    field_names = {
        "first_name": "–ò–º—è",
        "last_name": "–§–∞–º–∏–ª–∏—è", 
        "birth_date": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è",
        "country": "–°—Ç—Ä–∞–Ω–∞",
        "city": "–ì–æ—Ä–æ–¥",
        "gender": "–ü–æ–ª",
        "role": "–†–æ–ª—å",
        "player_level": "–£—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã",
        "profile_comment": "–û —Å–µ–±–µ",
        "dating_goal": "–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞",
        "dating_interests": "–ò–Ω—Ç–µ—Ä–µ—Å—ã",
        "meeting_time": "–í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏"
    }
    
    missing_text = []
    for field in missing_fields:
        missing_text.append(f"‚Ä¢ {field_names.get(field, field)}")
    
    return "\n".join(missing_text)

async def show_registration_success(message: types.Message, profile: dict):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    sport = profile.get("sport", "üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å")
    config = get_sport_config(sport)
    texts = get_sport_texts(sport)
    channel_username = channels_usernames.get(sport, "")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    success_text = f"‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
    success_text += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ {sport}!\n\n"
    
    if channel_username:
        success_text += f"üì¢ <b>–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏:</b>\n"
        success_text += f"@{channel_username}\n\n"
    
    success_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É"
    buttons.append([InlineKeyboardButton(
        text=texts.get("offer_button", "üéæ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É"), 
        callback_data="new_offer"
    )])
    
    # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä" (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ —Å has_vacation=True)
    if config.get("has_vacation", False):
        buttons.append([InlineKeyboardButton(
            text="‚úàÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä", 
            callback_data="create_tour"
        )])
    
    # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    buttons.append([InlineKeyboardButton(
        text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", 
        callback_data="main_menu"
    )])
    
    try:
        await message.edit_text(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except:
        await message.answer(
            success_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )

async def handle_auto_registration(message: types.Message, state: FSMContext, start_param: str):
    user_id = str(message.chat.id)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if await storage.is_user_registered(user_id):
            profile = await storage.get_user(user_id) or {}
            first_name = profile.get('first_name', message.from_user.first_name or '')
            last_name = profile.get('last_name', message.from_user.last_name or '')
            rating = profile.get('rating_points', 0)
            games_played = profile.get('games_played', 0)
            games_wins = profile.get('games_wins', 0)
            
            greet = (
                f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{first_name} {last_name}</b>!\n\n"
                f"üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>\n"
                f"üéæ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{games_played}</b>\n"
                f"‚úÖ –ü–æ–±–µ–¥: <b>{games_wins}</b>\n\n"
                f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ @tennis_playbot\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )  

            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sport = profile.get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            keyboard = get_base_keyboard(sport)

            await message.answer(greet, parse_mode="HTML", reply_markup=keyboard)
            return
        
        # –ü–∞—Ä—Å–∏–º start_param: —Ñ–æ—Ä–º–∞—Ç web_domain_userid
        # –ù–∞–ø—Ä–∏–º–µ—Ä: web_com_123 –∏–ª–∏ web_by_456
        parts = start_param.replace('web_', '', 1).split('_', 1)
        domain = parts[0] if len(parts) > 1 else 'com'
        web_user_id = parts[1] if len(parts) > 1 else parts[0]
        
        await message.answer(
            "‚è≥ –ü–æ–ª—É—á–∞—é –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞...",
            reply_markup=ReplyKeyboardRemove()
        )
        
        web_user_data = await web_api_client.get_user_data(web_user_id, domain)
        
        if not web_user_data:
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞.\n\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {web_user_id}\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ\n"
                "‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API\n"
                "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–±—ã—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n"
                "<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>",
                parse_mode="HTML",
                reply_markup=ReplyKeyboardMarkup(
                    keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
                    resize_keyboard=True,
                    one_time_keyboard=True
                )
            )
            await state.set_state(RegistrationStates.PHONE)
            await storage.save_session(message.chat.id, await state.get_data())
            return
        
        params = web_api_client.convert_web_user_to_params(web_user_data)

        if params.get("country", "") == "–ë–µ–ª–æ—Ä—É—Å—Å–∏—è":
            params["country"] = "–ë–µ–ª–∞—Ä—É—Å—å"
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
        photo_path = None
        photo_url_large = web_user_data.get('photo_url_large', '')
        
        if photo_url_large and photo_url_large.strip():
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏ –ø—É—Ç—å
                ts = int(datetime.now().timestamp())
                filename = f"{user_id}_{ts}.jpg"
                dest_path = PHOTOS_DIR / filename
                
                # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
                if await web_api_client.download_photo(photo_url_large, str(dest_path)):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    photo_path = dest_path.relative_to(BASE_DIR).as_posix()
            except Exception as e:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ñ–æ—Ç–æ
                pass

        profile = {
            "telegram_id": int(user_id),
            "username": message.chat.username,
            "first_name": params.get("fname", ""),
            "last_name": params.get("lname", ""),
            "phone": params.get("phone", ""),
            "birth_date": params.get("bdate", ""),
            "country": next((c for c in countries if params.get("country", "") != "" and params.get("country", "").lower() in c.lower()), params.get("country", "")),
            "city": params["city"],
            "district": params.get("district", "").replace('–ú–æ—Å–∫–≤–∞ - ', ''),
            "role": params.get("role", "–ò–≥—Ä–æ–∫"),
            "sport": next((s for s in sport_type if params.get("sport", "") != "" and params.get("sport", "").lower() in s.lower()), sport_type[0]),
            "gender": params.get("gender", "–ú—É–∂—Å–∫–æ–π"),
            "player_level": params.get("level", ""),
            "rating_points": table_tennis_levels[params.get("level", "")].get("points", 0),
            "price": params.get("price", None),
            "photo_path": photo_path,
            "games_played": 0,
            "games_wins": 0,
            "default_payment": params.get("payment", "–ü–æ–ø–æ–ª–∞–º"),
            "show_in_search": True,
            "profile_comment": params.get("comment", ""),
            "referrals_invited": 0,
            "games": [],
            "created_at": datetime.now().isoformat(timespec="seconds")
        }
        
        await storage.save_user(user_id, profile)
        
        await send_registration_notification(message, profile)
        
        await show_registration_success(message, profile)
        
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ª—é–±–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ –æ–±—ã—á–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
            "<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(RegistrationStates.PHONE)
        await storage.save_session(message.chat.id, await state.get_data())

# ---------- –ö–æ–º–∞–Ω–¥—ã –∏ –ª–æ–≥–∏–∫–∞ ----------
@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if await is_user_banned(user_id):
        await message.answer(
            "‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ, —á—Ç–æ —ç—Ç–æ –æ—à–∏–±–∫–∞, "
            "—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π.",
            reply_markup=ReplyKeyboardRemove()
        )
        return
    
    referral_id = None
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –∫–æ–º–∞–Ω–¥–µ start (–¥–ª—è —Å—Å—ã–ª–æ–∫ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏)
    if len(message.text.split()) > 1:
        command_parts = message.text.split()
        if len(command_parts) >= 2:
            start_param = command_parts[1]
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Web API
            if start_param.startswith('web_'):
                await handle_auto_registration(message, state, start_param)
                return
            
            if start_param.startswith('ref_'):
                referral_id = start_param.replace('ref_', '')
                
                if referral_id != user_id:
                    await state.update_data(referral_id=referral_id)

            elif start_param.startswith('profile_'):
                profile_user_id = start_param.replace('profile_', '')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                if await is_user_banned(profile_user_id):
                    await message.answer("‚õî –≠—Ç–æ—Ç –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                    return
                
                users = await storage.load_users()
                
                if profile_user_id in users:
                    profile_user = users[profile_user_id]
                    await show_profile(message, profile_user)
                else:
                    await message.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    
                return
            elif start_param.startswith('join_tournament_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link –¥–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                tournament_id = start_param.replace('join_tournament_', '')
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                if not await storage.is_user_registered(user_id):
                    await message.answer(
                        "‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è.")
                    # –ü—Ä–æ–¥–æ–ª–∂–∏–º –æ–±—ã—á–Ω—ã–π start- flow —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏–∂–µ
                else:
                    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ —Ç—É—Ä–Ω–∏—Ä–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ –∏ –Ω–µ –∑–∞–ø–∏—Å–∞–Ω)
                    tournaments = await storage.load_tournaments()
                    t = tournaments.get(tournament_id)
                    if not t:
                        await message.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return
                    participants = t.get('participants', {}) or {}
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç
                    max_participants = int(t.get('participants_count', 0) or 0)
                    if max_participants and len(participants) >= max_participants:
                        await message.answer("‚ùå –í —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –º–µ—Å—Ç")
                        return
                    if str(user_id) in participants:
                        # –£–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç ‚Äî –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ—Ö–æ–¥–∞
                        kb = InlineKeyboardBuilder()
                        kb.button(text="üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"view_tournament:{tournament_id}")
                        kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tournaments_main_menu")
                        kb.adjust(1)
                        await message.answer(
                            f"‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ: {t.get('name', '–¢—É—Ä–Ω–∏—Ä')}",
                            reply_markup=kb.as_markup()
                        )
                        return
                    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    users_all = await storage.load_users()
                    u = users_all.get(str(user_id), {})
                    participants[str(user_id)] = {
                        'name': f"{u.get('first_name', '')} {u.get('last_name', '')}".strip(),
                        'phone': u.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
                        'added_at': datetime.now().isoformat(),
                        'added_by': int(user_id)
                    }
                    t['participants'] = participants
                    tournaments[tournament_id] = t
                    await storage.save_tournaments(tournaments)
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
                    try:
                        await send_tournament_application_to_channel(message.bot, tournament_id, t, str(user_id), u)
                    except Exception:
                        pass
                    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
                    kb = InlineKeyboardBuilder()
                    kb.button(text="üèÜ –û—Ç–∫—Ä—ã—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"view_tournament:{tournament_id}")
                    kb.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data=f"tournament_games_history:{tournament_id}")
                    kb.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tournaments_main_menu")
                    kb.adjust(1)
                    await message.answer(
                        "‚úÖ –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç—É—Ä–Ω–∏—Ä!",
                        reply_markup=kb.as_markup()
                    )
                return
            elif start_param.startswith('view_tournament_'):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ deep-link –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∫–∞–Ω–∞–ª–∞
                tournament_id = start_param.replace('view_tournament_', '')
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫—Ä–∞—Ç–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—É—Ä–Ω–∏—Ä–µ
                from handlers.tournament import show_tournament_brief_info
                await show_tournament_brief_info(message, tournament_id, user_id)
                return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
    session_data = await storage.load_session(user_id)
    
    if session_data:
        await state.set_data(session_data)
    
    if await storage.is_user_registered(user_id):
        profile = await storage.get_user(user_id) or {}
        first_name = profile.get('first_name', message.from_user.first_name or '')
        last_name = profile.get('last_name', message.from_user.last_name or '')
        rating = profile.get('rating_points', 0)
        games_played = profile.get('games_played', 0)
        games_wins = profile.get('games_wins', 0)
        
        greet = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{first_name} {last_name}</b>!\n\n"
            f"üèÜ –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: <b>{rating}</b>\n"
            f"üéæ –°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: <b>{games_played}</b>\n"
            f"‚úÖ –ü–æ–±–µ–¥: <b>{games_wins}</b>\n\n"
            f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –±–æ—Ç–µ @tennis_playbot\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )  

        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sport = profile.get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
        keyboard = get_base_keyboard(sport)
        await message.answer(greet, parse_mode="HTML", reply_markup=keyboard)
        await state.clear()
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
    await state.set_state(RegistrationStates.PHONE)
    welcome_text = (
        f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{message.from_user.full_name}</b>!\n\n"
        "–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –±–æ—Ç–µ @tennis_playbot –ø—Ä–æ–µ–∫—Ç–∞ Tennis-Play.com\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n"
        "–ù–∞—á–∏–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href='https://tennis-play.com/privacy-bot'>–ø–æ–ª–∏—Ç–∏–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a> "
        "–∏ –¥–∞—ë—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ <a href='https://tennis-play.com/soglasie'>–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö</a>\n\n"
        "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>"
    )
    
    await message.answer(
        welcome_text,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
            resize_keyboard=True,
            one_time_keyboard=True
        ),
        parse_mode="HTML"
    )
    await storage.save_session(user_id, await state.get_data())

@router.message(Command("profile"))
async def cmd_profile(message: types.Message):
    user_id = message.chat.id
    if not await storage.is_user_registered(user_id):
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    profile = await storage.get_user(user_id) or {}
    await show_profile(message, profile)

@router.message(Command("profile_id"))
async def cmd_profile_id(message: types.Message):
    try:
        user_id = int(message.text.split()[1])
    except (IndexError, ValueError):
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /profile_id USER_ID")
        return
    
    profile = await storage.get_user(user_id)
    if not profile:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    await show_profile(message, profile)

@router.message(RegistrationStates.PHONE, (F.contact | F.text))
async def process_phone(message: Message, state: FSMContext):

    phone = None
    phone_pattern = re.compile(r'^\+?\d{10,15}$')

    if message.contact:
        phone = message.contact.phone_number
    elif message.text:
        text = message.text.strip()
        if phone_pattern.match(text):
            phone = text

    if not phone:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
        return

    await state.update_data(phone=phone)

    await message.answer(
        "‚úÖ –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—É—á–µ–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )

    await show_current_data(
        message, state,
        "üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
        reply_markup=create_sport_keyboard(pref="sport_")
    )
    await state.set_state(RegistrationStates.SPORT)
    await storage.save_session(message.chat.id, await state.get_data())
    

@router.callback_query(RegistrationStates.SPORT, F.data.startswith("sport_"))
async def process_sport_selection(callback: types.CallbackQuery, state: FSMContext):
    sport = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(sport=sport)
    await callback.message.edit_text("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=None)
    await state.set_state(RegistrationStates.FIRST_NAME)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.FIRST_NAME, F.text)
async def process_first_name(message: Message, state: FSMContext):
    await state.update_data(first_name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:")
    await state.set_state(RegistrationStates.LAST_NAME)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.LAST_NAME, F.text)
async def process_last_name(message: Message, state: FSMContext):
    await state.update_data(last_name=message.text.strip())
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
    await state.set_state(RegistrationStates.BIRTH_DATE)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.BIRTH_DATE, F.text)
async def process_birth_date(message: Message, state: FSMContext):
    date_str = message.text.strip()
    if not await validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    await state.update_data(birth_date=date_str)
    
    buttons = []
    for country in countries[:5]:
        buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"country_{country}")])
    buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="other_country")])

    await show_current_data(
        message, state,
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É —Å—Ç—Ä–∞–Ω—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.COUNTRY)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.COUNTRY, F.data.startswith("country_"))
async def process_country_selection(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(country=country)
    await ask_for_city(callback.message, state, country)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.COUNTRY, F.data == "other_country")
async def process_other_country(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:", reply_markup=None)
    await state.set_state(RegistrationStates.COUNTRY_INPUT)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.COUNTRY_INPUT, F.text)
async def process_country_input(message: Message, state: FSMContext):
    await state.update_data(country=message.text.strip())
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(RegistrationStates.CITY_INPUT)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.CITY_INPUT, F.text)
async def process_city_input(message: Message, state: FSMContext):
    await state.update_data(city=message.text.strip())
    await ask_for_role(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_city(message: types.Message, state: FSMContext, country: str):
    cities = cities_data.get(country, [])
    buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"city_{city}")] for city in cities]
    buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="other_city")])

    await show_current_data(
        message, state,
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.CITY)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.CITY, F.data.startswith("city_"))
async def process_city_selection(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=1)[1]

    if city == "–ú–æ—Å–∫–≤–∞":
        buttons = []
        row = []
        for i, district in enumerate(moscow_districts):
            row.append(InlineKeyboardButton(text=district, callback_data=f"district_{district}"))
            if (i + 1) % 3 == 0 or i == len(moscow_districts) - 1:
                buttons.append(row)
                row = []
        await show_current_data(
            callback.message, state,
            "üèô –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥ –ú–æ—Å–∫–≤—ã:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    else:
        await state.update_data(city=city)
        await ask_for_role(callback.message, state)

    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.CITY, F.data.startswith("district_"))
async def process_district_selection(callback: types.CallbackQuery, state: FSMContext):
    district = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(city="–ú–æ—Å–∫–≤–∞")
    await state.update_data(district=district.strip())
    await ask_for_role(callback.message, state)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.CITY, F.data == "other_city")
async def process_other_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", reply_markup=None)
    await state.set_state(RegistrationStates.CITY_INPUT)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

async def ask_for_role(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    if not config.get("has_role", True):
        # –ï—Å–ª–∏ —Ä–æ–ª—å –Ω–µ –Ω—É–∂–Ω–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await ask_for_gender(message, state)
        return
    
    buttons = [
        [InlineKeyboardButton(text="üéØ –ò–≥—Ä–æ–∫", callback_data="role_–ò–≥—Ä–æ–∫")],
        [InlineKeyboardButton(text="üë®‚Äçüè´ –¢—Ä–µ–Ω–µ—Ä", callback_data="role_–¢—Ä–µ–Ω–µ—Ä")]
    ]
    await show_current_data(
        message, state,
        "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.ROLE)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.ROLE, F.data.startswith("role_"))
async def process_role_selection(callback: types.CallbackQuery, state: FSMContext):
    role = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(role=role)

    if role == "–¢—Ä–µ–Ω–µ—Ä":
        await callback.message.edit_text("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ä—É–±–ª—è—Ö, —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):", reply_markup=None)
        await state.set_state(RegistrationStates.TRAINER_PRICE)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
        await ask_for_level_or_gender(callback.message, state)

    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

async def ask_for_gender(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="üë® –ú—É–∂—Å–∫–æ–π", callback_data="gender_–ú—É–∂—Å–∫–æ–π")],
        [InlineKeyboardButton(text="üë© –ñ–µ–Ω—Å–∫–∏–π", callback_data="gender_–ñ–µ–Ω—Å–∫–∏–π")]
    ]
    await show_current_data(
        message, state,
        "üë´ –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.GENDER)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_level_or_gender(message: types.Message, state: FSMContext):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    if config.get("has_level", True):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Ä–æ–≤–Ω–∏
        await show_levels_page(message, state, page=0)
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª—É
        await ask_for_gender(message, state)

@router.message(RegistrationStates.TRAINER_PRICE, F.text)
async def process_trainer_price(message: types.Message, state: FSMContext):
    price_str = message.text.strip()
    if not await validate_price(price_str):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–æ–ª—å—à–µ 0):")
        return
    
    await state.update_data(price=int(price_str))
    
    await show_levels_page(message, state, page=0)
    await state.set_state(RegistrationStates.PLAYER_LEVEL)
    await storage.save_session(message.chat.id, await state.get_data())

async def show_levels_page(message: types.Message, state: FSMContext, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —É—Ä–æ–≤–Ω—è–º–∏ –∏–≥—Ä–æ–∫–æ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è"""
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    levels_dict = get_levels_for_sport(sport)
    
    # –î–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    if config.get("level_type") in ["table_tennis", "table_tennis_rating"]:
        await ask_for_table_tennis_rating(message, state)
        return
    
    levels_list = list(levels_dict.keys())
    items_per_page = 3
    total_pages = (len(levels_list) + items_per_page - 1) // items_per_page
    
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(levels_list))
    current_levels = levels_list[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–∏—Ö —É—Ä–æ–≤–Ω–µ–π
    sport_name = sport.replace("üéæ", "").replace("üèì", "").replace("üè∏", "").replace("üèñÔ∏è", "").replace("ü•é", "").replace("üèÜ", "")
    levels_text = f"üèÜ *–°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π {sport_name.lower()}:*\n\n"
    
    for level in current_levels:
        description = levels_dict[level]["desc"]
        levels_text += f"*{level}* - {description}\n\n"
    
    levels_text += f"*–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}*\n\nüëá *–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å:*"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—Ä–æ–≤–Ω–µ–π
    buttons = []
    for level in current_levels:
        buttons.append([InlineKeyboardButton(
            text=f"üéæ {level}",
            callback_data=f"level_{level}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"levelpage_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"levelpage_{page+1}"))
    
    if nav_buttons:
        buttons.append(nav_buttons)
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
    try:
        await message.edit_text(
            levels_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except:
        await message.answer(
            levels_text,
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    
    await state.set_state(RegistrationStates.PLAYER_LEVEL)
    await state.update_data(level_page=page)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_table_tennis_rating(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞"""
    await message.edit_text(
        "üèì –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ –≤ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º —Ç–µ–Ω–Ω–∏—Å—É (—Ü–∏—Ñ—Ä—ã):",
        reply_markup=None
    )
    await state.set_state(RegistrationStates.TABLE_TENNIS_RATING)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.PLAYER_LEVEL, F.data.startswith("levelpage_"))
async def process_level_page_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —É—Ä–æ–≤–Ω–µ–π"""
    page = int(callback.data.split("_", maxsplit=1)[1])
    await show_levels_page(callback.message, state, page)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.TABLE_TENNIS_RATING, F.text)
async def process_table_tennis_rating(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞"""
    rating = message.text.strip()
    await state.update_data(player_level=rating)
    await ask_for_gender(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.PLAYER_LEVEL, F.data.startswith("level_"))
async def process_player_level(callback: types.CallbackQuery, state: FSMContext):
    level = callback.data.split("_", maxsplit=1)[1]
    user_data = await state.get_data()
    sport = user_data.get("sport")
    levels_dict = get_levels_for_sport(sport)

    await state.update_data(player_level=level)
    
    await ask_for_gender(callback.message, state)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.GENDER, F.data.startswith("gender_"))
async def process_gender_selection(callback: types.CallbackQuery, state: FSMContext):
    gender = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(gender=gender)
    
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    if sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        await ask_for_dating_goals(callback.message, state)
    elif config.get("has_about_me", True):
        await ask_for_profile_comment(callback.message, state)
    elif config.get("has_meeting_time", False):
        await ask_for_meeting_time(callback.message, state)
    else:
        await ask_for_photo(callback.message, state)
    
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

async def ask_for_profile_comment(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º about_me_text –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ comment_text
    about_me_text = config.get("about_me_text")
    comment_text = config.get("comment_text", "‚Ä¢ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
    
    if about_me_text:
        await message.edit_text(f"{about_me_text} (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):", reply_markup=None)
    else:
        await message.edit_text(f"{comment_text} (–∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):", reply_markup=None)
    
    await state.set_state(RegistrationStates.PROFILE_COMMENT)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_dating_goals(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    buttons = []
    for goal in DATING_GOALS:
        buttons.append([InlineKeyboardButton(text=goal, callback_data=f"dating_goal_{goal}")])
    
    await message.edit_text(
        "üíï –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.DATING_GOAL)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_photo(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    buttons = [
        [InlineKeyboardButton(text="üì∑ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="photo_upload")],
        [InlineKeyboardButton(text="üëÄ –ë–µ–∑ —Ñ–æ—Ç–æ", callback_data="photo_none")],
        [InlineKeyboardButton(text="–§–æ—Ç–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="photo_profile")]
    ]
    await show_current_data(
        message, state,
        "üì∑ –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.PHOTO)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.PROFILE_COMMENT, F.text)
async def process_profile_comment(message: types.Message, state: FSMContext):
    if message.text.strip() != "/skip":
        await state.update_data(profile_comment=message.text.strip())
    
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    if config.get("has_meeting_time", False):
        await ask_for_meeting_time(message, state)
    else:
        await ask_for_photo(message, state)
    
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.DATING_GOAL, F.data.startswith("dating_goal_"))
async def process_dating_goal(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    goal = callback.data.split("_", maxsplit=2)[2]
    await state.update_data(dating_goal=goal)
    
    if goal == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç":
        await callback.message.edit_text("üíï –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:", reply_markup=None)
        await state.set_state(RegistrationStates.DATING_GOAL)
        return
    
    await ask_for_dating_interests(callback.message, state)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.DATING_GOAL, F.text)
async def process_dating_goal_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    await state.update_data(dating_goal=message.text.strip())
    await ask_for_dating_interests(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_dating_interests(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    buttons = []
    for interest in DATING_INTERESTS:
        buttons.append([InlineKeyboardButton(text=interest, callback_data=f"dating_interest_{interest}")])
    
    await message.edit_text(
        "üéØ –í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.DATING_INTERESTS)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.DATING_INTERESTS, F.data.startswith("dating_interest_"))
async def process_dating_interest(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    interest = callback.data.split("_", maxsplit=2)[2]
    user_data = await state.get_data()
    selected_interests = user_data.get("dating_interests", [])
    
    if interest == "–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ":
        await callback.message.edit_text("üéØ –û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:", reply_markup=None)
        await state.set_state(RegistrationStates.DATING_INTERESTS)
        return
    
    if interest in selected_interests:
        selected_interests.remove(interest)
    else:
        selected_interests.append(interest)
    
    await state.update_data(dating_interests=selected_interests)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    interests_text = "üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:\n" + "\n".join([f"‚Ä¢ {i}" for i in selected_interests])
    interests_text += "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:"
    
    buttons = []
    for interest in DATING_INTERESTS:
        text = f"{'‚úÖ' if interest in selected_interests else '‚¨ú'} {interest}"
        buttons.append([InlineKeyboardButton(text=text, callback_data=f"dating_interest_{interest}")])
    buttons.append([InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ", callback_data="dating_interests_done")])
    
    await callback.message.edit_text(
        interests_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.DATING_INTERESTS, F.text)
async def process_dating_interest_text(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    user_data = await state.get_data()
    selected_interests = user_data.get("dating_interests", [])
    selected_interests.append(f"–°–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: {message.text.strip()}")
    await state.update_data(dating_interests=selected_interests)
    await ask_for_dating_interests(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.DATING_INTERESTS, F.data == "dating_interests_done")
async def process_dating_interests_done(callback: types.CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    await ask_for_dating_additional(callback.message, state)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

async def ask_for_dating_additional(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    additional_text = "üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n\n"
    for field in DATING_ADDITIONAL_FIELDS:
        additional_text += f"‚Ä¢ {field}\n"
    additional_text += "\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ª—é–±–æ–º—É –∏–∑ –ø–æ–ª–µ–π –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞:"
    
    await message.edit_text(additional_text, reply_markup=None)
    await state.set_state(RegistrationStates.DATING_ADDITIONAL)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.DATING_ADDITIONAL, F.text)
async def process_dating_additional(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    if message.text.strip() != "/skip":
        await state.update_data(dating_additional=message.text.strip())
    
    await ask_for_photo(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_meeting_time(message: types.Message, state: FSMContext):
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫–∞ –∏ –ø–æ –ø–∏–≤—É"""
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    meeting_text = config.get("meeting_time_text", "–ù–∞–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–µ–Ω—å –∏ –≤—Ä–µ–º—è –∏–ª–∏ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏, –∫–æ–≥–¥–∞ –≤–∞–º —É–¥–æ–±–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è.")
    try:
        await message.edit_text(meeting_text)
    except:
        await message.answer(meeting_text)

    await state.set_state(RegistrationStates.MEETING_TIME)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.MEETING_TIME, F.text)
async def process_meeting_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏"""
    await state.update_data(meeting_time=message.text.strip())
    await ask_for_photo(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.PHOTO, F.data.startswith("photo_"))
async def process_photo_choice(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", maxsplit=1)[1]

    if choice == "upload":
        await callback.message.edit_text("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∏–∑ –≥–∞–ª–µ—Ä–µ–∏ –∏–ª–∏ —Å–¥–µ–ª–∞–π—Ç–µ —Å–Ω–∏–º–æ–∫):", reply_markup=None)
        return

    if choice == "profile":
        try:
            photos = await callback.message.bot.get_user_profile_photos(callback.message.chat.id, limit=1)
            if photos.total_count > 0:
                file_id = photos.photos[0][-1].file_id
                ts = int(datetime.now().timestamp())
                filename = f"{callback.message.chat.id}_{ts}.jpg"
                dest_path = PHOTOS_DIR / filename
                ok = await download_photo_to_path(callback.message.bot, file_id, dest_path)
                if ok:
                    rel_path = dest_path.relative_to(BASE_DIR).as_posix()
                    await state.update_data(photo="profile", photo_path=rel_path)
                    await ask_for_next_step_after_photo(callback.message, state)
                else:
                    await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é:")
                    return
            else:
                await callback.message.edit_text("‚ùå –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é:")
                return
        except Exception:
            await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤—Ä—É—á–Ω—É—é:")
            return
    elif choice == "none":
        await state.update_data(photo="none", photo_path=None)
        await ask_for_next_step_after_photo(callback.message, state)
    else:
        await state.update_data(photo="none", photo_path=None)
        await ask_for_next_step_after_photo(callback.message, state)

    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.PHOTO, F.photo)
async def process_photo_upload(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    ts = int(datetime.now().timestamp())
    filename = f"{message.chat.id}_{ts}.jpg"
    dest_path = PHOTOS_DIR / filename
    ok = await download_photo_to_path(message.bot, photo_id, dest_path)
    if ok:
        rel_path = dest_path.relative_to(BASE_DIR).as_posix()
        await state.update_data(photo="uploaded", photo_path=rel_path)
        await ask_for_next_step_after_photo(message, state)
    else:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Ñ–æ—Ç–æ.")
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_next_step_after_photo(message: types.Message, state: FSMContext):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ"""
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    if config.get("has_payment", True) and sport not in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É", "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞"]:
        await ask_for_default_payment(message, state)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
        await complete_registration_without_profile(message, state)

@router.callback_query(RegistrationStates.VACATION_TENNIS, F.data.startswith("vacation_"))
async def process_vacation_tennis(callback: types.CallbackQuery, state: FSMContext):
    choice = callback.data.split("_", maxsplit=1)[1]
    
    if choice == "yes":
        # –°–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω—É –æ—Ç–¥—ã—Ö–∞
        buttons = []
        for country in countries[:5]:
            buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"vacation_country_{country}")])
        buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="vacation_other_country")])

        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –æ—Ç–¥—ã—Ö–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(RegistrationStates.VACATION_COUNTRY)
    else:
        await state.update_data(vacation_tennis=False)
        await complete_registration_without_profile(callback.message, state)
    
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.VACATION_COUNTRY, F.data.startswith("vacation_country_"))
async def process_vacation_country_selection(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", maxsplit=2)[2]
    await state.update_data(vacation_country=country)
    await ask_for_vacation_city(callback.message, state, country)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.VACATION_COUNTRY, F.data == "vacation_other_country")
async def process_vacation_other_country(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –æ—Ç–¥—ã—Ö–∞:", reply_markup=None)
    await state.set_state(RegistrationStates.VACATION_COUNTRY_INPUT)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_COUNTRY_INPUT, F.text)
async def process_vacation_country_input(message: Message, state: FSMContext):
    await state.update_data(vacation_country=message.text.strip())
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞:")
    await state.set_state(RegistrationStates.VACATION_CITY_INPUT)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_CITY_INPUT, F.text)
async def process_vacation_city_input(message: Message, state: FSMContext):
    await state.update_data(vacation_city=message.text.strip())
    await message.answer("‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(RegistrationStates.VACATION_START)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_vacation_city(message: types.Message, state: FSMContext, country: str):
    cities = cities_data.get(country, [])
    buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"vacation_city_{city}")] for city in cities]
    buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="vacation_o ther_city")])

    await show_current_data(
        message, state,
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–¥—ã—Ö–∞ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.VACATION_CITY)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.VACATION_CITY, F.data.startswith("vacation_city_"))
async def process_vacation_city_selection(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=2)[2]
    await state.update_data(vacation_city=city)
    await callback.message.edit_text("‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):", reply_markup=None)
    await state.set_state(RegistrationStates.VACATION_START)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.VACATION_CITY, F.data == "vacation_other_city")
async def process_vacation_other_city(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞:", reply_markup=None)
    await state.set_state(RegistrationStates.VACATION_CITY_INPUT)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_START, F.text)
async def process_vacation_start(message: Message, state: FSMContext):
    date_str = message.text.strip()
    if not await validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    if not await validate_future_date(date_str):
        await message.answer("‚ùå –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–¥—ã—Ö–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        return
    
    await state.update_data(vacation_start=date_str, vacation_tennis=True)
    await message.answer("‚úàÔ∏è –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–¥—ã—Ö–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    await state.set_state(RegistrationStates.VACATION_END)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_END, F.text)
async def process_vacation_end(message: Message, state: FSMContext):
    date_str = message.text.strip()
    if not await validate_date(date_str):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    
    user_data = await state.get_data()
    start_date = user_data.get('vacation_start')
    
    if not await validate_date_range(start_date, date_str):
        await message.answer("‚ùå –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
        return
    
    await state.update_data(vacation_end=date_str)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ–µ–∑–¥–∫–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –∏–ª–∏ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):")
    await state.set_state(RegistrationStates.VACATION_COMMENT)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(RegistrationStates.VACATION_COMMENT, F.text)
async def process_vacation_comment(message: Message, state: FSMContext):
    if message.text.strip() != "/skip":
        await state.update_data(vacation_comment=message.text.strip())
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º vacation_tennis=True
    await state.update_data(vacation_tennis=True)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await complete_registration_without_profile(message, state)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_default_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    sport = user_data.get("sport")
    config = get_sport_config(sport)
    
    if not config.get("has_payment", True):
        await complete_registration_without_profile(message, state)
        return
    
    buttons = [
        [InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–∞–º", callback_data="defaultpay_–ü–æ–ø–æ–ª–∞–º")],
        [InlineKeyboardButton(text="üí≥ –Ø –æ–ø–ª–∞—á–∏–≤–∞—é", callback_data="defaultpay_–Ø –æ–ø–ª–∞—á–∏–≤–∞—é")],
        [InlineKeyboardButton(text="üíµ –°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç", callback_data="defaultpay_–°–æ–ø–µ—Ä–Ω–∏–∫ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç")]
    ]
    await show_current_data(
        message, state,
        "üí≥ –ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –∫–æ—Ä—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(RegistrationStates.DEFAULT_PAYMENT)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(RegistrationStates.DEFAULT_PAYMENT, F.data.startswith("defaultpay_"))
async def process_default_payment(callback: types.CallbackQuery, state: FSMContext):
    payment = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(default_payment=payment)
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await complete_registration_without_profile(callback.message, state)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

async def complete_registration_without_profile(message: types.Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –ø–æ–∫–∞–∑–∞ –∞–Ω–∫–µ—Ç—ã, —Å–Ω–∞—á–∞–ª–∞ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ —Ç—É—Ä, –ø–æ—Ç–æ–º –ø—Ä–æ –∏–≥—Ä—É"""
    user_id = message.chat.id
    username = message.chat.username
    
    user_state = await state.get_data()
    profile = await create_user_profile(user_id, username, user_state)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
    referral_id = user_state.get('referral_id')
    if referral_id and await storage.is_user_registered(referral_id):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
        referrer_data = await storage.get_user(referral_id) or {}
        referrals_count = referrer_data.get('referrals_invited', 0) + 1
        
        await storage.update_user(referral_id, {
            'referrals_invited': referrals_count
        })
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä 5 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        if referrals_count >= 5:
            # –î–∞—Ä–∏–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü
            await storage.update_user(referral_id, {
                'active': True,
                'until': (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d'),
                'activated': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            })
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            try:
                await message.bot.send_message(
                    referral_id,
                    "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ 5 –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 1 –º–µ—Å—è—Ü!"
                )
            except:
                pass
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await storage.save_user(user_id, profile)
    await state.clear()
    await storage.delete_session(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await send_registration_notification(message, profile)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await show_registration_success(message, profile)

async def create_user_profile(user_id: int, username: str, user_state: dict) -> dict:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã–µ –æ—á–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    sport = user_state.get("sport")
    levels_dict = get_levels_for_sport(sport)
    player_level = user_state.get("player_level")
    
    # –î–ª—è –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–≥–æ —Ç–µ–Ω–Ω–∏—Å–∞ —Ä–µ–π—Ç–∏–Ω–≥ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∏–ª–∏ —á–∏—Å–ª–æ–≤—ã–º
    if sport == "üèì–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å":
        if player_level and player_level.replace(".", "").isdigit():
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω —á–∏—Å–ª–æ–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –æ—á–∫–∏
            try:
                rating_points = int(float(player_level))
            except ValueError:
                rating_points = 1000
        else:
            rating_points = 1000  # –ë–∞–∑–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞
    else:
        rating_points = levels_dict.get(player_level, {}).get("points", 0)
    
    profile = {
        "telegram_id": user_id,
        "username": username,
        "first_name": user_state.get("first_name"),
        "last_name": user_state.get("last_name"),
        "phone": user_state.get("phone"),
        "birth_date": user_state.get("birth_date"),
        "country": user_state.get("country"),
        "city": user_state.get("city"),
        "district": user_state.get("district", ""),
        "role": user_state.get("role", "–ò–≥—Ä–æ–∫"),
        "sport": user_state.get("sport"),
        "gender": user_state.get("gender"),
        "player_level": user_state.get("player_level"),
        "rating_points": rating_points,
        "price": user_state.get("price"),
        "photo_path": user_state.get("photo_path"),
        "games_played": 0,
        "games_wins": 0,
        "default_payment": user_state.get("default_payment"),
        "show_in_search": True,
        "profile_comment": user_state.get("profile_comment"),
        "referrals_invited": 0,
        "games": [],
        "created_at": datetime.now().isoformat(timespec="seconds")
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    if sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        profile["dating_goal"] = user_state.get("dating_goal")
        profile["dating_interests"] = user_state.get("dating_interests", [])
        profile["dating_additional"] = user_state.get("dating_additional")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è –≤—Å—Ç—Ä–µ—á
    if sport in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É"]:
        profile["meeting_time"] = user_state.get("meeting_time")
    
    # –ü–æ–ª—è –¥–ª—è —Ç—É—Ä–∞ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ, –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    return profile

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ----------

@router.callback_query(F.data == "create_tour")
async def process_create_tour_after_registration(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å —Ç—É—Ä' –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞
    await callback.message.answer(
        "‚úàÔ∏è –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )
    await callback.answer()

@router.callback_query(F.data == "main_menu")
async def process_main_menu_after_registration(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id) or {}
    sport = profile.get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
    keyboard = get_base_keyboard(sport)
    
    await callback.message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=keyboard
    )
    await callback.answer()

