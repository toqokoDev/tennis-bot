from yookassa import Configuration, Payment
from datetime import datetime, timedelta
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.config import SECRET_KEY, SHOP_ID, SUBSCRIPTION_PRICE
from config.profile import base_keyboard
from models.states import PaymentStates
from utils.json_data import load_users, write_users
from utils.payment import create_payment

router = Router()

@router.message(F.text == "üí≥ –ü–ª–∞—Ç–µ–∂–∏")
async def handle_payments(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    user_id = message.from_user.id
    users = load_users()
    
    if str(user_id) in users and users[str(user_id)].get('subscription', {}).get('active', False):
        subscription_until = users[str(user_id)]['subscription'].get('until')
        if subscription_until:
            try:
                until_date = datetime.strptime(subscription_until, '%Y-%m-%d')
                if until_date > datetime.now():
                    await message.answer(
                        f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription_until}\n\n"
                        "–í—Å–µ PRO-—Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã!",
                        parse_mode="HTML"
                    )
                    return
            except ValueError:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∫–∞–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
                pass

    text = (
        "üåü <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏ Tennis-Play PRO:</b>\n\n"
        "‚Ä¢ –í–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–∞\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –∏–≥—Ä–æ–∫–æ–≤\n"
        "‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä—ã\n\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü</b>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üí∞ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", 
        callback_data="buy_subscription"
    ))
    
    await message.answer(
        text,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "buy_subscription")
async def start_payment_process(callback: types.CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –æ–ø–ª–∞—Ç—ã
    user_id = callback.message.chat.id
    users = load_users()
    
    if str(user_id) in users and users[str(user_id)].get('subscription', {}).get('active', False):
        subscription_until = users[str(user_id)]['subscription'].get('until')
        if subscription_until:
            try:
                until_date = datetime.strptime(subscription_until, '%Y-%m-%d')
                if until_date > datetime.now():
                    await callback.message.answer(
                        f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription_until}\n\n"
                        "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ, –ø–æ–∫–∞ —Ç–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞.",
                        parse_mode="HTML"
                    )
                    await callback.answer()
                    return
            except ValueError:
                # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã
                pass

    Configuration.account_id = SHOP_ID
    Configuration.secret_key = SECRET_KEY
    
    payment_link, payment_id = create_payment(callback.message.chat.id, SUBSCRIPTION_PRICE, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞")

    await state.update_data(payment_id=payment_id)
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", 
        url=payment_link
    ))
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", 
        callback_data="confirm_payment"
    ))
    
    await callback.message.answer(
        f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{payment_link}\n\n"
        "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'",
        reply_markup=builder.as_markup()
    )
    
    await state.set_state(PaymentStates.CONFIRM_PAYMENT)
    await callback.answer()

@router.callback_query(PaymentStates.CONFIRM_PAYMENT, F.data == "confirm_payment")
async def confirm_payment(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment_id = data.get('payment_id', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    
    payment = Payment.find_one(payment_id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    try:
        await callback.message.delete()
    except:
        pass
    
    if payment.status == "succeeded":
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        user_id = callback.message.chat.id
        users = load_users()
        
        if str(user_id) in users and users[str(user_id)].get('subscription', {}).get('active', False):
            subscription_until = users[str(user_id)]['subscription'].get('until')
            if subscription_until:
                try:
                    until_date = datetime.strptime(subscription_until, '%Y-%m-%d')
                    if until_date > datetime.now():
                        await callback.message.answer(
                            f"‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {subscription_until}\n\n"
                            "–î–µ–Ω—å–≥–∏ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 3-5 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.",
                            reply_markup=base_keyboard
                        )
                        await state.clear()
                        await callback.answer()
                        return
                except ValueError:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é
                    pass
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        await callback.message.answer(
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            "–î–æ—Å—Ç—É–ø –∫ PRO-—Ñ—É–Ω–∫—Ü–∏—è–º –æ—Ç–∫—Ä—ã—Ç –Ω–∞ 30 –¥–Ω–µ–π.",
            reply_markup=base_keyboard
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = callback.message.chat.id
        users = load_users()
        if str(user_id) not in users:
            users[str(user_id)] = {}
        
        users[str(user_id)]['subscription'] = {
            'active': True,
            'until': (datetime.now() + timedelta(days=30)).strftime('%Y-%m-%d'),
            'activated': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }
        write_users(users)
    else:
        await callback.message.answer(
            "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=base_keyboard
        )
    
    await state.clear()
    await callback.answer()
