"""
–ú–æ–¥—É–ª—å –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –∏–≥—Ä
"""
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime

from models.states import AddScoreState
from services.storage import storage
from utils.tournament_manager import tournament_manager
from utils.utils import create_user_profile_link
from handlers.enter_invoice import (
    create_set_score_keyboard, 
    save_message_id,
    format_rating
)

router = Router()


# ==================== HELPER FUNCTIONS ====================

def _have_same_tournament_game(g: dict, tournament_id: str, user_a: str, user_b: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–≥—Ä–∞ —Ç–æ–π –∂–µ —Å–∞–º–æ–π —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä–æ–π"""
    try:
        if g.get('tournament_id') != tournament_id:
            return False
        t1 = [str(x) for x in g.get('players', {}).get('team1', [])]
        t2 = [str(x) for x in g.get('players', {}).get('team2', [])]
        ua = str(user_a)
        ub = str(user_b)
        # Single players are recorded as one per team for tournament mode
        return ((ua in t1 and ub in t2) or (ua in t2 and ub in t1))
    except Exception:
        return False


async def _already_played_in_tournament(tournament_id: str, user_a: str, user_b: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—ã–≥—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ –∏–≥—Ä–∞ –º–µ–∂–¥—É –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –¥–∞–Ω–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ"""
    try:
        games = await storage.load_games()
        for g in games:
            if _have_same_tournament_game(g, tournament_id, user_a, user_b):
                return True
        return False
    except Exception:
        return False


async def create_tournament_keyboard(current_user_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å —Å—á–µ—Ç.
    –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'started'."""
    tournaments = await storage.load_tournaments()
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ—Å—Ç—É–ø–Ω—ã —Ç—É—Ä–Ω–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω
    user_tournaments = {}
    for tournament_id, tournament_data in tournaments.items():
        if tournament_data.get('status') not in ['started']:
            continue
        participants = tournament_data.get('participants', {})
        if current_user_id in participants and len(participants) >= 2:
            user_tournaments[tournament_id] = tournament_data
    
    if not user_tournaments:
        builder.button(text="‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞", callback_data="tournament_score:no_tournaments")
    else:
        for tournament_id, tournament_data in user_tournaments.items():
            name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
            participants_count = len(tournament_data.get('participants', {}))
            builder.button(text=f"üèÜ {name} ({city}) - {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
                          callback_data=f"tournament_score:select:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()


async def create_tournament_opponents_keyboard(tournament_id: str, current_user_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    builder = InlineKeyboardBuilder()
    
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω
    tournaments = await storage.load_tournaments()
    t = tournaments.get(tournament_id, {})
    if t.get('status') != 'started':
        builder.button(text="‚è≥ –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–æ–º", callback_data="tournament_score:no_participants")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="tournament_score:back_to_list")
        builder.adjust(1)
        return builder.as_markup()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤
    available_opponents = await tournament_manager.get_available_opponents(tournament_id, current_user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É–∂–µ —Å—ã–≥—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    filtered: list[dict] = []
    for opp in available_opponents:
        opp_id = str(opp.get('user_id'))
        if not await _already_played_in_tournament(tournament_id, current_user_id, opp_id):
            filtered.append(opp)
    available_opponents = filtered
    
    if not available_opponents:
        builder.button(text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤", callback_data="tournament_score:no_participants")
    else:
        for i, opponent in enumerate(available_opponents):
            name = opponent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            match_number = opponent.get('match_number', 0)
            builder.button(text=f"üë§ {name} (–ú–∞—Ç—á {match_number + 1})", 
                         callback_data=f"tournament_score:opponent:{tournament_id}:{i}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="tournament_score:back_to_list")
    builder.adjust(1)
    return builder.as_markup()


# ==================== HANDLERS ====================

@router.callback_query(F.data.startswith("tournament_score:select:"))
async def handle_tournament_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = callback.data.split(":", 2)[2]
    await state.update_data(tournament_id=tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments.get(tournament_id, {})
    participants = tournament_data.get('participants', {})
    current_user_id = str(callback.message.chat.id)
    
    if current_user_id not in participants:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–∞")
        return
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–Ω–æ—Å–∏—Ç—å —Å—á–µ—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ (>=2) –∏ –µ—Å—Ç—å —Å –∫–µ–º –∏–≥—Ä–∞—Ç—å
    tournament_status = tournament_data.get('status', 'active')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–≥—Ä
    from config.tournament_config import MIN_PARTICIPANTS
    tournament_type = tournament_data.get('type', '–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞')
    min_participants = MIN_PARTICIPANTS.get(tournament_type, 4)
    current_participants = len(participants)
    
    if current_participants < 2:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–≥—Ä!\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üë• –¢–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_participants}\n"
            f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 2", 
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer()
        return
    
    await state.set_state(AddScoreState.selecting_tournament_opponent)
    keyboard = await create_tournament_opponents_keyboard(tournament_id, current_user_id)
    await callback.message.edit_text(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("tournament_score:opponent:"))
async def handle_tournament_opponent_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞"""
    parts = callback.data.split(":")
    tournament_id = parts[2]
    opponent_index = int(parts[3]) if len(parts) > 3 else 0
    current_user_id = str(callback.message.chat.id)
    
    print(f"[TOURNAMENT_SCORE] opponent_index: {opponent_index}")
    print(f"[TOURNAMENT_SCORE] tournament_id: {tournament_id}")
    print(f"[TOURNAMENT_SCORE] current_user_id: {current_user_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
    available_opponents = await tournament_manager.get_available_opponents(tournament_id, current_user_id)
    print(f"[TOURNAMENT_SCORE] available_opponents count={len(available_opponents)}")
    print(f"[TOURNAMENT_SCORE] available_opponents={available_opponents}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if opponent_index >= len(available_opponents):
        await callback.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent_data = available_opponents[opponent_index]
    match_id = selected_opponent_data.get('match_id')
    opponent_id = selected_opponent_data.get('user_id')
    
    users = await storage.load_users()
    
    if opponent_id not in users:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent = users[opponent_id]
    selected_opponent['telegram_id'] = opponent_id
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    if await _already_played_in_tournament(tournament_id, current_user_id, opponent_id):
        await callback.answer("–≠—Ç–æ—Ç –º–∞—Ç—á —É–∂–µ —Å—ã–≥—Ä–∞–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ", show_alert=True)
        # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
        keyboard = await create_tournament_opponents_keyboard(tournament_id, current_user_id)
        await callback.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=keyboard
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
    await state.update_data(
        game_type='tournament',
        opponent1=selected_opponent, 
        tournament_match_id=match_id
    )
    await state.set_state(AddScoreState.selecting_set_score)
    
    keyboard = create_set_score_keyboard(1)
    
    username = selected_opponent.get('username', '')
    username_text = f"@{username}" if username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    await callback.message.edit_text( 
        f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\n"
        f"üë§ {await create_user_profile_link(selected_opponent, opponent_id, additional=False)}\n"
        f"üì± Username: {username_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç 1-–≥–æ —Å–µ—Ç–∞:",
        reply_markup=keyboard, 
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "tournament_score:no_tournaments")
async def handle_no_tournaments(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    await callback.message.edit_text(
        "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ 'üèÜ –¢—É—Ä–Ω–∏—Ä—ã'.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∏–≥—Ä—ã.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
    )
    await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")


@router.callback_query(F.data == "tournament_score:no_participants")
async def handle_no_participants(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""
    await callback.message.edit_text(
        "‚ùå –í —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –∫ —Ç—É—Ä–Ω–∏—Ä—É.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
    )
    await callback.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")


@router.callback_query(F.data == "tournament_score:back_to_list")
async def handle_back_to_tournament_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    current_user_id = str(callback.message.chat.id)
    await state.set_state(AddScoreState.selecting_tournament)
    keyboard = await create_tournament_keyboard(current_user_id)
    await callback.message.edit_text(
        "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await callback.answer()

