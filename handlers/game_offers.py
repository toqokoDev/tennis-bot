from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from datetime import datetime, timedelta
from config.config import SUBSCRIPTION_PRICE
from services.channels import send_game_offer_to_channel
from services.storage import storage
from models.states import GameOfferStates
from utils.admin import is_admin
from utils.bot import show_current_data
from utils.game import get_user_games, save_user_game

from config.profile import moscow_districts, game_types, payment_types, base_keyboard, cities_data
from utils.validate import validate_time, validate_date

router = Router()

# ---------- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä—ã ----------
@router.callback_query(F.data == "my_offers")
async def my_offers_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    
    profile = await storage.get_user(user_id)
    
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    active_games = [game for game in profile.get('games', []) if game.get('active', True)]
    
    if not active_games:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ state –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(active_games=active_games, current_offer_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await show_single_offer(callback, state)
    await callback.answer()

async def show_single_offer(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    user_data = await state.get_data()
    active_games = user_data.get('active_games', [])
    current_index = user_data.get('current_offer_index', 0)
    
    if not active_games:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    game = active_games[current_index]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
    response = [
        f"üéæ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{game['id']} ({current_index + 1}/{len(active_games)})",
        f"üèô –ì–æ—Ä–æ–¥: {game.get('city', '‚Äî')}",
        f"üìÖ –î–∞—Ç–∞: {game.get('date', '‚Äî')}",
        f"‚è∞ –í—Ä–µ–º—è: {game.get('time', '‚Äî')}",
        f"üîç –¢–∏–ø: {game.get('type', '‚Äî')}",
        f"üí≥ –û–ø–ª–∞—Ç–∞: {game.get('payment_type', '‚Äî')}",
        f"üèÜ –ù–∞ —Å—á–µ—Ç: {'–î–∞' if game.get('competitive') else '–ù–µ—Ç'}",
        f"üîÑ –ü–æ–≤—Ç–æ—Ä: {'–î–∞' if game.get('repeat') else '–ù–µ—Ç'}"
    ]
    
    if game.get('comment'):
        response.append(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {game['comment']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    if len(active_games) > 1:
        nav_buttons = []
        if current_index > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="offer_prev"))
        if current_index < len(active_games) - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="offer_next"))
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_offer_{game['id']}"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{user_id}")
    ]
    keyboard_buttons.append(action_buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    try:
        if hasattr(callback, 'message'):
            await callback.message.edit_text("\n".join(response), reply_markup=keyboard)
        else:
            await callback.message.delete()
            await callback.answer("\n".join(response), reply_markup=keyboard)
            
    except:
        await callback.message.delete()
        if hasattr(callback, 'message'):
            await callback.message.answer("\n".join(response), reply_markup=keyboard)
        else:
            await callback.answer("\n".join(response), reply_markup=keyboard)

@router.callback_query(F.data == "offer_prev")
async def offer_prev_handler(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    current_index = user_data.get('current_offer_index', 0)
    
    if current_index > 0:
        await state.update_data(current_offer_index=current_index - 1)
        await show_single_offer(callback, state)
    
    await callback.answer()

@router.callback_query(F.data == "offer_next")
async def offer_next_handler(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    active_games = user_data.get('active_games', [])
    current_index = user_data.get('current_offer_index', 0)
    
    if current_index < len(active_games) - 1:
        await state.update_data(current_offer_index=current_index + 1)
        await show_single_offer(callback, state)
    
    await callback.answer()

@router.callback_query(F.data.startswith("delete_offer_"))
async def delete_offer_single_handler(callback: types.CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_", maxsplit=2)[2]
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_yes_{game_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="delete_no_single")
            ]
        ]
    )
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{game_id}?",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "delete_no_single")
async def delete_no_single_handler(callback: types.CallbackQuery, state: FSMContext):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    await show_single_offer(callback, state)
    await callback.answer()

@router.callback_query(F.data.startswith("delete_yes_"))
async def delete_yes_handler(callback: types.CallbackQuery, state: FSMContext):
    game_id = callback.data.split("_", maxsplit=2)[2]
    user_id = callback.message.chat.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await storage.load_users()
    user_data = users.get(str(user_id))
    
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–º–µ—á–∞–µ–º –∏–≥—Ä—É –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é
    for game in user_data.get('games', []):
        if str(game.get('id')) == game_id:
            game['active'] = False
            break
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    users[str(user_id)] = user_data
    await storage.save_users(users)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state
    user_data = await state.get_data()
    active_games = user_data.get('active_games', [])
    current_index = user_data.get('current_offer_index', 0)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    active_games = [game for game in active_games if str(game.get('id')) != game_id]
    
    if not active_games:
        # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–æ–ª—å—à–µ –Ω–µ—Ç
        try:
            await callback.message.delete()
        except:
            pass
        await callback.message.answer("‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ! –£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.")
        await state.update_data(active_games=None, current_offer_index=None)
        return
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å
    if current_index >= len(active_games):
        current_index = len(active_games) - 1
    
    await state.update_data(active_games=active_games, current_offer_index=current_index)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    await show_single_offer(callback, state)
    await callback.answer()

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

@router.callback_query(F.data == "new_offer")
async def new_offer_handler(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id)
    users = await storage.load_users()
    
    if not profile:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    user_data = users.get(str(user_id), {})
    subscription_active = user_data.get('subscription', {}).get('active', False)
    
    if not await is_admin(callback.message.chat.id):
        if not subscription_active:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            free_offers_used = user_data.get('free_offers_used', 0)
            
            if free_offers_used >= 2:
                text = (
                    "üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                    "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä—ã (–º–∞–∫—Å–∏–º—É–º 2).\n\n"
                    "–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π Tennis-Play PRO.\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü</b>\n\n"
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü–ª–∞—Ç–µ–∂–∏' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
                )
                
                await callback.message.answer(
                    text,
                    parse_mode="HTML"
                )
                await callback.answer()
                return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    country = profile.get('country', '')
    city = profile.get('city', '')
    
    await state.update_data(country=country, city=city)
    
    if "–ú–æ—Å–∫–≤–∞" in city:
        buttons = [[InlineKeyboardButton(text=district, callback_data=f"gamecity_{district}")] for district in moscow_districts]
    else:
        cities = cities_data.get(country, [])
        unique_cities = []
        if city:
            unique_cities.append(city)
        for c in cities:
            if c not in unique_cities:
                unique_cities.append(c)
        buttons = [[InlineKeyboardButton(text=f"{c}", callback_data=f"gamecity_{c}")] for c in unique_cities[:5]]

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer(
        "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∏–≥—Ä—ã:",
        reply_markup=keyboard
    )
    await state.set_state(GameOfferStates.GAME_CITY)
    await callback.answer()
    
@router.message(F.text == "üéæ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É")
async def offer_game_command(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    users = await storage.load_users()
    user_data = users.get(str(user_id), {})
    
    if not user_data:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    subscription_active = user_data.get('subscription', {}).get('active', False)
    
    if not await is_admin(message.chat.id):
        if not subscription_active:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
            free_offers_used = user_data.get('free_offers_used', 0)
            
            if free_offers_used >= 2:
                text = (
                    "üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                    "–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä—ã (–º–∞–∫—Å–∏–º—É–º 2).\n\n"
                    "–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π Tennis-Play PRO.\n\n"
                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü</b>\n\n"
                    "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü–ª–∞—Ç–µ–∂–∏' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
                )
                
                await message.answer(
                    text,
                    parse_mode="HTML"
                )
                return
    
    country = user_data.get('country', '')
    city = user_data.get('city', '')
    
    await state.update_data(country=country, city=city)
    
    if "–ú–æ—Å–∫–≤–∞" in city:
        buttons = [[InlineKeyboardButton(text=district, callback_data=f"gamecity_{district}")] for district in moscow_districts]
    else:
        cities = cities_data.get(country, [])
        unique_cities = []
        if city:
            unique_cities.append(city)
        for c in cities:
            if c not in unique_cities:
                unique_cities.append(c)
        buttons = [[InlineKeyboardButton(text=f"üèô {c}", callback_data=f"gamecity_{c}")] for c in unique_cities[:5]]

    await show_current_data(
        message, state,
        "üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.GAME_CITY)
    await storage.save_session(user_id, await state.get_data())

@router.callback_query(GameOfferStates.GAME_CITY, F.data.startswith("gamecity_"))
async def process_game_city(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(game_city=city)

    today = datetime.now().strftime('%d.%m.%Y')
    tomorrow = (datetime.now() + timedelta(days=1)).strftime('%d.%m.%Y')

    buttons = [
        [InlineKeyboardButton(text=f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today})", callback_data=f"gamedate_{today}")],
        [InlineKeyboardButton(text=f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow})", callback_data=f"gamedate_{tomorrow}")],
        [InlineKeyboardButton(text="üìù –í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É—é", callback_data="gamedate_manual")]
    ]
    await show_current_data(
        callback.message, state,
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.GAME_DATE)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(GameOfferStates.GAME_DATE, F.data.startswith("gamedate_"))
async def process_game_date(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "gamedate_manual":
        await show_current_data(
            callback.message, state,
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–≥—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025):"
        )
        await state.set_state(GameOfferStates.GAME_DATE_MANUAL)
        await callback.answer()
        return
    
    date = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(game_date=date)

    times = [f"‚è∞ {hour:02d}:00" for hour in range(7, 24)] + ["‚è∞ 00:00"]

    buttons = []
    for i in range(0, len(times), 3):
        row = []
        for time in times[i:i+3]:
            time_only = time.split()[1]
            row.append(InlineKeyboardButton(text=time, callback_data=f"gametime_{time_only}"))
        buttons.append(row)

    await show_current_data(
        callback.message, state,
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.GAME_TIME)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(GameOfferStates.GAME_DATE_MANUAL, F.text)
async def process_game_date_manual(message: types.Message, state: FSMContext):
    date_text = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
    if not await validate_date(date_text):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025):")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
    try:
        input_date = datetime.strptime(date_text, '%d.%m.%Y')
        today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
        
        if input_date < today:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É:")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 25.12.2025):")
        return
    
    await state.update_data(game_date=date_text)

    times = [f"‚è∞ {hour:02d}:00" for hour in range(7, 24)] + ["‚è∞ 00:00"]

    buttons = []
    for i in range(0, len(times), 3):
        row = []
        for time in times[i:i+3]:
            time_only = time.split()[1]
            row.append(InlineKeyboardButton(text=time, callback_data=f"gametime_{time_only}"))
        buttons.append(row)

    await show_current_data(
        message, state,
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.GAME_TIME)
    await storage.save_session(message.chat.id, await state.get_data())

@router.callback_query(GameOfferStates.GAME_TIME, F.data.startswith("gametime_"))
async def process_game_time(callback: types.CallbackQuery, state: FSMContext):
    time = callback.data.split("_", maxsplit=1)[1]
    if not await validate_time(time):
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        return
    
    await state.update_data(game_time=time)

    buttons = [[InlineKeyboardButton(text=gt, callback_data=f"gametype_{gt}")] for gt in game_types]
    await show_current_data(
        callback.message, state,
        "üéæ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.GAME_TYPE)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(GameOfferStates.GAME_TYPE, F.data.startswith("gametype_"))
async def process_game_type(callback: types.CallbackQuery, state: FSMContext):
    game_type = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(game_type=game_type)

    buttons = [[InlineKeyboardButton(text=pt, callback_data=f"paytype_{pt.split()[1]}")] for pt in payment_types]
    await show_current_data(
        callback.message, state,
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–ª–∞—Ç–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.PAYMENT_TYPE)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(GameOfferStates.PAYMENT_TYPE, F.data.startswith("paytype_"))
async def process_payment_type(callback: types.CallbackQuery, state: FSMContext):
    payment_type = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(payment_type=payment_type)

    buttons = [
        [InlineKeyboardButton(text="üèÜ –ù–∞ —Å—á—ë—Ç", callback_data="gamecomp_yes")],
        [InlineKeyboardButton(text="üéæ –ù–µ –Ω–∞ —Å—á—ë—Ç", callback_data="gamecomp_no")]
    ]
    await show_current_data(
        callback.message, state,
        "üèÜ –ò–≥—Ä–∞ –Ω–∞ —Å—á—ë—Ç?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(GameOfferStates.GAME_COMPETITIVE)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.callback_query(GameOfferStates.GAME_COMPETITIVE, F.data.startswith("gamecomp_"))
async def process_game_competitive(callback: types.CallbackQuery, state: FSMContext):
    competitive = callback.data.split("_", maxsplit=1)[1] == "yes"
    await state.update_data(game_competitive=competitive)

    await show_current_data(
        callback.message, state,
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–≥—Ä–µ (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):"
    )
    await state.set_state(GameOfferStates.GAME_COMMENT)
    await callback.answer()
    await storage.save_session(callback.message.chat.id, await state.get_data())

@router.message(GameOfferStates.GAME_COMMENT, F.text)
async def process_game_comment(message: types.Message, state: FSMContext):
    if message.text.strip() != "/skip":
        await state.update_data(game_comment=message.text.strip())
    
    user_data = await state.get_data()
    
    game_data = {
        "city": user_data.get('game_city'),
        "date": user_data.get('game_date'),
        "time": user_data.get('game_time'),
        "type": user_data.get('game_type'),
        "payment_type": user_data.get('payment_type'),
        "competitive": user_data.get('game_competitive'),
        "comment": user_data.get('game_comment')
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É
    game_id = await save_user_game(message.chat.id, game_data)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    users = await storage.load_users()
    user_id_str = str(message.chat.id)
    
    if user_id_str in users:
        if not users[user_id_str].get('subscription', {}).get('active', False):
            free_offers_used = users[user_id_str].get('free_offers_used', 0)
            users[user_id_str]['free_offers_used'] = free_offers_used + 1
            await storage.save_users(users)
    
    await state.clear()
    await storage.delete_session(message.chat.id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∏–≥—Ä–µ
    response = [
        "‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n",
        f"üéæ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{game_id}",
        f"üèô –ì–æ—Ä–æ–¥: {game_data.get('city', '‚Äî')}",
        f"üìÖ –î–∞—Ç–∞: {game_data.get('date', '‚Äî')}",
        f"‚è∞ –í—Ä–µ–º—è: {game_data.get('time', '‚Äî')}",
        f"üîç –¢–∏–ø: {game_data.get('type', '‚Äî')}",
        f"üí≥ –û–ø–ª–∞—Ç–∞: {game_data.get('payment_type', '‚Äî')}",
        f"üèÜ –ù–∞ —Å—á–µ—Ç: {'–î–∞' if game_data.get('competitive') else '–ù–µ—Ç'}",
        f"üîÑ –ü–æ–≤—Ç–æ—Ä: {'–î–∞' if game_data.get('repeat') else '–ù–µ—Ç'}"
    ]
    
    if game_data.get('comment'):
        response.append(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {game_data['comment']}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–¥–ø–∏—Å–∫–∏
    users = await storage.load_users()
    user_data = users.get(str(message.chat.id), {})
    subscription_active = user_data.get('subscription', {}).get('active', False)
    
    if not subscription_active:
        free_offers_used = user_data.get('free_offers_used', 0)
        remaining_offers = max(0, 1 - free_offers_used)
        response.append(f"\nüìä –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ—Å—Ç–∞–ª–æ—Å—å: {remaining_offers}/1")
        response.append("üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π!")
    
    await send_game_offer_to_channel(message.bot, game_data, str(message.chat.id), user_data)
    await message.answer("\n".join(response), reply_markup=base_keyboard)

@router.message(F.text == "üìã –ú–æ–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
async def list_my_games(message: types.Message, state: FSMContext):
    user_id = message.chat.id
    games = await get_user_games(user_id)
    
    if not games:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä—ã.")
        return
    
    active_games = [game for game in games if game.get('active', True)]
    
    if not active_games:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä—ã.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä –≤ state –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await state.update_data(active_games=active_games, current_offer_index=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
    response = []
    game = active_games[0]
    
    response = [
        f"üéæ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{game['id']} (1/{len(active_games)})",
        f"üèô –ì–æ—Ä–æ–¥: {game.get('city', '‚Äî')}",
        f"üìÖ –î–∞—Ç–∞: {game.get('date', '‚Äî')}",
        f"‚è∞ –í—Ä–µ–º—è: {game.get('time', '‚Äî')}",
        f"üîç –¢–∏–ø: {game.get('type', '‚Äî')}",
        f"üí≥ –û–ø–ª–∞—Ç–∞: {game.get('payment_type', '‚Äî')}",
        f"üèÜ –ù–∞ —Å—á–µ—Ç: {'–î–∞' if game.get('competitive') else '–ù–µ—Ç'}",
        f"üîÑ –ü–æ–≤—Ç–æ—Ä: {'–î–∞' if game.get('repeat') else '–ù–µ—Ç'}"
    ]
    
    if game.get('comment'):
        response.append(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {game['comment']}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
    if len(active_games) > 1:
        nav_buttons = []
        if 0 > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="offer_prev"))
        if 0 < len(active_games) - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="offer_next"))
        if nav_buttons:
            keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    action_buttons = [
        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_offer_{game['id']}"),
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{user_id}")
    ]
    keyboard_buttons.append(action_buttons)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await message.answer("\n".join(response), reply_markup=keyboard)

@router.callback_query(F.data == "delete_offer")
async def delete_offer_handler(callback: types.CallbackQuery):
    user_id = callback.message.chat.id
    profile = await storage.get_user(user_id)
    
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    active_games = [game for game in profile.get('games', []) if game.get('active', True)]
    
    if not active_games:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    buttons = []
    for game in active_games:
        game_info = f"#{game['id']} - {game.get('date', '?')} {game.get('time', '?')}"
        buttons.append([
            InlineKeyboardButton(
                text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {game_info}", 
                callback_data=f"confirm_delete_{game['id']}"
            )
        ])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_offers")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_delete_"))
async def confirm_delete_handler(callback: types.CallbackQuery):
    game_id = callback.data.split("_", maxsplit=2)[2]
    user_id = callback.message.chat.id
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await storage.load_users()
    user_data = users.get(str(user_id))
    
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò—â–µ–º –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    game_found = False
    for game in user_data.get('games', []):
        if str(game.get('id')) == game_id and game.get('active', True):
            game_found = True
            break
    
    if not game_found:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"delete_yes_{game_id}"),
                InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="delete_no")
            ]
        ]
    )
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ #{game_id}?",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "delete_no")
async def delete_no_handler(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    await my_offers_handler(callback)
    await callback.answer()

@router.callback_query(F.data == "back_to_offers")
async def back_to_offers_handler(callback: types.CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    await my_offers_handler(callback)
    await callback.answer()
