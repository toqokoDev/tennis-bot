from typing import Union
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.config import SUBSCRIPTION_PRICE, BOT_USERNAME
from config.profile import PRICE_RANGES, cities_data, create_sport_keyboard, sport_type, countries
from models.states import SearchStates
from services.storage import storage
from utils.admin import is_admin
from utils.bot import show_profile
from utils.utils import calculate_age, count_users_by_location, get_top_countries, get_top_cities

router = Router()

@router.message(F.text == "üîç –ï—â–µ")
async def handle_more(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úàÔ∏è –¢—É—Ä—ã", callback_data="tours_main_menu")
    )
    builder.row(
        types.InlineKeyboardButton(text="üåç –í—Å–µ –∏–≥—Ä–æ–∫–∏", callback_data="all_players"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="find_coach")
    )
    builder.row(
        types.InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about"),
        types.InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    builder.row(
        types.InlineKeyboardButton(text="üèÜ –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã", url="https://tennis-play.com/tournaments/"),
        types.InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è", url="https://tennis-play.com/tournaments/weekend/")
    )
    builder.row(
        types.InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="profile"),
        types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://tennis-play.com/")
    )
    
    await message.answer("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data == "about")
async def handle_about(callback: types.CallbackQuery):
    about_text = (
        "Tennis-Play - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∏ –º–∞—Ç—á–µ–π.\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"
        "- –£–¥–æ–±–Ω—É—é —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã\n"
        "- –†–µ–π—Ç–∏–Ω–≥–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É\n"
        "- –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é –º–∞—Ç—á–µ–π —Å –∏–≥—Ä–æ–∫–∞–º–∏ —Å–≤–æ–µ–≥–æ —É—Ä–æ–≤–Ω—è\n"
        "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∏—Å—Ç–æ—Ä–∏—é –≤—Å—Ç—Ä–µ—á\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://tennis-play.com/contacts/"
    )
    await callback.message.edit_text(about_text)
    await callback.answer()

@router.callback_query(F.data == "contacts")
async def handle_contacts(callback: types.CallbackQuery):
    contacts_text = (
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞ –∞–¥—Ä–µ—Å:\n"
        "üìß info@tennis-play.com"
    )
    await callback.message.edit_text(contacts_text)
    await callback.answer()

@router.callback_query(F.data == "all_players")
async def handle_all_players(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SearchStates.SEARCH_TYPE)
    await state.update_data(search_type="players")
    
    user_id = callback.message.chat.id
    users = await storage.load_users()

    if not await is_admin(user_id):
        if not users[str(user_id)].get('subscription', {}).get('active', False):
            referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{callback.from_user.id}"
            text = (
                "üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π Tennis-Play PRO.\n\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü</b>\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü–ª–∞—Ç–µ–∂–∏' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 5 –¥—Ä—É–∑–µ–π.\n\n"
                f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π <code>{referral_link}</code>\n\n"
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞¬ª.\n\n"
            )
            
            await callback.message.answer(
                text,
                parse_mode="HTML"
            )

            await state.clear()
            return
    
    buttons = []
    for country in countries[:5]:
        count = await count_users_by_location("players", country)
        buttons.append([InlineKeyboardButton(
            text=f"{country} ({count})", 
            callback_data=f"search_country_{country}"
        )])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    other_countries = await get_top_countries(search_type="players", exclude_countries=countries[:5])
    other_countries_count = sum(count for country, count in other_countries)
    
    if other_countries_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üåé –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ({other_countries_count})", 
            callback_data="search_other_country"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="back_to_main"
    )])

    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchStates.SEARCH_COUNTRY)
    await callback.answer()

@router.callback_query(F.data == "find_coach")
async def handle_find_coach(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SearchStates.SEARCH_TYPE)
    await state.update_data(search_type="coaches")
    
    # –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    await show_sport_types(callback.message, state)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_COUNTRY, F.data.startswith("search_country_"))
async def process_search_country(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", maxsplit=2)[2]
    await state.update_data(search_country=country)
    
    data = await state.get_data()
    search_type = data.get('search_type')
    
    cities = cities_data.get(country, [])
    buttons = []
    for city in cities:
        count = await count_users_by_location(search_type, country, city)
        buttons.append([InlineKeyboardButton(
            text=f"{city} ({count})", 
            callback_data=f"search_city_{city}"
        )])

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    other_cities = await get_top_cities(search_type=search_type, country=country, exclude_cities=cities)
    other_cities_count = sum(count for city, count in other_cities)
    
    if other_cities_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üèô –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ ({other_cities_count})", 
            callback_data="search_other_city"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", 
        callback_data="back_to_countries"
    )])
    
    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ {search_type_text} –≤ {country}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    
    await state.set_state(SearchStates.SEARCH_CITY)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_COUNTRY, F.data == "search_other_country")
async def process_search_other_country(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-7 —Å—Ç—Ä–∞–Ω, –∏—Å–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ
    top_countries = await get_top_countries(search_type=search_type, exclude_countries=countries[:5])
    
    buttons = []
    for country, count in top_countries:
        buttons.append([InlineKeyboardButton(
            text=f"{country} ({count})", 
            callback_data=f"search_country_{country}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="back_to_countries"
    )])
    
    await callback.message.edit_text(
        f"üåç –¢–æ–ø —Å—Ç—Ä–∞–Ω —Å {search_type_text}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_COUNTRY, F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úàÔ∏è –¢—É—Ä—ã", callback_data="tours_main_menu")
    )
    builder.row(
        types.InlineKeyboardButton(text="üåç –í—Å–µ –∏–≥—Ä–æ–∫–∏", callback_data="all_players"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="find_coach")
    )
    builder.row(
        types.InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about"),
        types.InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    builder.row(
        types.InlineKeyboardButton(text="üèÜ –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã", url="https://tennis-play.com/tournaments/"),
        types.InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è", url="https://tennis-play.com/tournaments/weekend/")
    )
    builder.row(
        types.InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="profile"),
        types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://tennis-play.com/")
    )
    
    await callback.message.edit_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=builder.as_markup())
    await callback.answer()

@router.message(SearchStates.SEARCH_COUNTRY_INPUT, F.text)
async def process_search_country_input(message: Message, state: FSMContext):
    await state.update_data(search_country=message.text.strip())
    
    data = await state.get_data()
    search_type = data.get('search_type')
    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    await message.answer(
        f"üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ {search_type_text}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_countries")
        ]])
    )
    await state.set_state(SearchStates.SEARCH_CITY_INPUT)
    await storage.save_session(message.from_user.id, await state.get_data())

@router.callback_query(SearchStates.SEARCH_CITY, F.data.startswith("search_city_"))
async def process_search_city(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=2)[2]
    await state.update_data(search_city=city)
    
    await perform_search(callback.message, state)

    await callback.answer()

@router.callback_query(SearchStates.SEARCH_CITY, F.data == "search_other_city")
async def process_search_other_city(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    country = data.get('search_country')
    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    exclude_cities = cities_data.get(country, [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-7 –≥–æ—Ä–æ–¥–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ, –∏—Å–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ
    top_cities = await get_top_cities(search_type=search_type, country=country, exclude_cities=exclude_cities)
    
    buttons = []
    for city, count in top_cities:
        buttons.append([InlineKeyboardButton(
            text=f"{city} ({count})", 
            callback_data=f"search_city_{city}"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="back_to_cities"
    )])
    
    await callback.message.edit_text(
        f"üèô –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤ –≤ {country} —Å {search_type_text}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchStates.SEARCH_RESULTS)
    await callback.answer()

@router.callback_query(F.data == "back_to_countries")
async def back_to_countries(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    
    buttons = []
    for country in countries[:5]:
        count = await count_users_by_location(search_type, country)
        buttons.append([InlineKeyboardButton(
            text=f"{country} ({count})", 
            callback_data=f"search_country_{country}"
        )])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    other_countries = await get_top_countries(search_type=search_type, exclude_countries=countries[:5])
    other_countries_count = sum(count for country, count in other_countries)
    
    if other_countries_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üåé –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ({other_countries_count})", 
            callback_data="search_other_country"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="back_to_main"
    )])

    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    await callback.message.edit_text(
        f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ {search_type_text}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchStates.SEARCH_COUNTRY)
    await callback.answer()

@router.message(SearchStates.SEARCH_CITY_INPUT, F.text)
async def process_search_city_input(message: Message, state: FSMContext):
    await state.update_data(search_city=message.text.strip())
    
    data = await state.get_data()
    search_type = data.get('search_type')
    
    # –î–ª—è –∏–≥—Ä–æ–∫–æ–≤ —Å—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫, –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–µ–Ω—ã
    if search_type == "players":
        await perform_search(message, state)
    else:
        await show_price_ranges(message, state)
    await storage.save_session(message.from_user.id, await state.get_data())

@router.callback_query(SearchStates.SEARCH_CITY_INPUT, F.data == "back_to_countries")
async def back_to_countries_from_input(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    
    buttons = []
    for country in countries[:5]:
        count = await count_users_by_location(search_type, country)
        buttons.append([InlineKeyboardButton(
            text=f"{country} ({count})", 
            callback_data=f"search_country_{country}"
        )])
    
    counts = []
    for c in countries[:5]:
        counts.append(await count_users_by_location(search_type, c))

    count_other = await count_users_by_location(search_type) - sum(counts)
    buttons.append([InlineKeyboardButton(
        text=f"üåé –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ({count_other})", 
        callback_data="search_other_country"
    )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
        callback_data="back_to_main"
    )])

    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    await callback.message.edit_text(
        f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ {search_type_text}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchStates.SEARCH_COUNTRY)
    await callback.answer()

async def show_sport_types(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message = message.message
    
    builder = InlineKeyboardBuilder()

    builder.row(InlineKeyboardButton(
        text="–í—Å–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞",
        callback_data="sport_any"
    ))
    
    sport_keyboard = create_sport_keyboard(pref="sport_")
    for row in sport_keyboard.inline_keyboard:
        builder.row(*row)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é",
        callback_data="back_to_main"
    ))

    try:
        await message.edit_text(
            "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
            reply_markup=builder.as_markup()
        )
    except:
        try:
            await message.delete()
        except:
            await message.answer(
            "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞:",
            reply_markup=builder.as_markup()
        )
    await state.set_state(SearchStates.SEARCH_SPORT)

@router.callback_query(SearchStates.SEARCH_SPORT, F.data.startswith("sport_"))
async def process_sport_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "sport_any":
        await state.update_data(sport_type=None)
    else:
        sport_type = callback.data.split("_", 1)[1]
        await state.update_data(sport_type=sport_type)
    
    await show_price_ranges(callback.message, state)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_SPORT, F.data == "back_to_main")
async def back_to_main_from_sport(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="‚úàÔ∏è –¢—É—Ä—ã", callback_data="tours_main_menu")
    )
    builder.row(
        types.InlineKeyboardButton(text="üåç –í—Å–µ –∏–≥—Ä–æ–∫–∏", callback_data="all_players"),
        types.InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç—Ä–µ–Ω–µ—Ä–∞", callback_data="find_coach")
    )
    builder.row(
        types.InlineKeyboardButton(text="–û –Ω–∞—Å", callback_data="about"),
        types.InlineKeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")
    )
    builder.row(
        types.InlineKeyboardButton(text="üèÜ –ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã", url="https://tennis-play.com/tournaments/"),
        types.InlineKeyboardButton(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã –≤—ã—Ö–æ–¥–Ω–æ–≥–æ –¥–Ω—è", url="https://tennis-play.com/tournaments/weekend/")
    )
    builder.row(
        types.InlineKeyboardButton(text="üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞", callback_data="profile"),
        types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://tennis-play.com/")
    )
    
    await callback.message.edit_text("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:", reply_markup=builder.as_markup())
    await callback.answer()

async def show_price_ranges(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message = message.message
    
    builder = InlineKeyboardBuilder()
    
    builder.row(InlineKeyboardButton(
        text="üíµ –õ—é–±–∞—è —Ü–µ–Ω–∞",
        callback_data="price_range_any"
    ))

    for price_range in PRICE_RANGES:
        builder.add(InlineKeyboardButton(
            text=price_range["label"],
            callback_data=f"price_range_{price_range['min']}_{price_range['max']}"
        ))
    
    builder.adjust(1, 2)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞",
        callback_data="back_to_sport"
    ))
    try:
        await message.edit_text(
            "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞:",
            reply_markup=builder.as_markup()
        )
    except:
        try:
            await message.delete()
        except:
            await message.answer(
                "üíµ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Ä–æ–∫–∞:",
                reply_markup=builder.as_markup()
            )
    await state.set_state(SearchStates.SEARCH_PRICE_RANGE)

@router.callback_query(SearchStates.SEARCH_PRICE_RANGE, F.data.startswith("price_range_"))
async def process_price_range(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "price_range_any":
        await state.update_data(price_min=None, price_max=None)
    else:
        _, _, min_price, max_price = callback.data.split("_")
        await state.update_data(price_min=int(min_price), price_max=int(max_price))
    
    # –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤
    data = await state.get_data()
    search_type = data.get('search_type')
    
    if search_type == "coaches":
        buttons = []
        for country in countries[:5]:
            count = await count_users_by_location(search_type, country)
            buttons.append([InlineKeyboardButton(
                text=f"{country} ({count})", 
                callback_data=f"search_country_{country}"
            )])
        
        counts = []
        for c in countries[:5]:
            counts.append(await count_users_by_location(search_type, c))

        count_other = await count_users_by_location(search_type) - sum(counts)
        buttons.append([InlineKeyboardButton(
            text=f"üåé –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ({count_other})", 
            callback_data="search_other_country"
        )])
        
        buttons.append([InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ü–µ–Ω–µ", 
            callback_data="back_to_price_range"
        )])

        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
        await state.set_state(SearchStates.SEARCH_COUNTRY)
    else:
        await perform_search(callback.message, state)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_PRICE_RANGE, F.data == "back_to_sport")
async def back_to_sport_from_price(callback: types.CallbackQuery, state: FSMContext):
    await show_sport_types(callback.message, state)
    await callback.answer()

async def perform_search(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message = message.message
    
    data = await state.get_data()
    search_type = data.get('search_type')
    country = data.get('search_country')
    city = data.get('search_city')
    sport_type = data.get('sport_type')
    price_min = data.get('price_min')
    price_max = data.get('price_max')
    
    users = await storage.load_users()
    results = []
    
    for user_id, profile in users.items():
        if not profile.get('show_in_search', True):
            continue
            
        if search_type == "coaches" and profile.get('role') != "–¢—Ä–µ–Ω–µ—Ä":
            continue
        elif search_type == "players" and profile.get('role') != "–ò–≥—Ä–æ–∫":
            continue
            
        if profile.get('country') == country and profile.get('city') == city:
            # –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞
            if search_type == "coaches" and sport_type:
                profile_sport = profile.get('sport')
                if not profile_sport or profile_sport != sport_type:
                    continue
            
            # –î–ª—è —Ç—Ä–µ–Ω–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if search_type == "coaches" and price_min is not None and price_max is not None:
                lesson_price = profile.get('price')
                if lesson_price and isinstance(lesson_price, (int, float)):
                    if price_min <= lesson_price <= price_max:
                        results.append((user_id, profile))
                else:
                    # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–µ –≤–∫–ª—é—á–∞–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    continue
            else:
                results.append((user_id, profile))
    
    if not results:
        search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
        sport_text = f" –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ {sport_type}" if sport_type else ""
        price_text = ""
        if search_type == "coaches" and price_min is not None and price_max is not None:
            price_text = f" –≤ —Ü–µ–Ω–æ–≤–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ {price_min}-{price_max} —Ä—É–±."
        
        try:
            await message.edit_text(
                f"üòï –í –≥–æ—Ä–æ–¥–µ {city} ({country}){sport_text}{price_text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {search_type_text}.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cities")
                ]])
            )
        except:
            try:
                await message.delete()
            except:
                await message.answer(
                    f"üòï –í –≥–æ—Ä–æ–¥–µ {city} ({country}){sport_text}{price_text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ {search_type_text}.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_cities")
                    ]])
                )
        await state.set_state(SearchStates.SEARCH_NO_RESULTS)
        return
    
    await state.update_data(search_results=results, current_page=0)
    await show_search_results_list(message, state, 0)

async def show_search_results_list(message: types.Message, state: FSMContext, page: int = 0):
    data = await state.get_data()
    results = data.get('search_results', [])
    search_type = data.get('search_type')
    country = data.get('search_country')
    city = data.get('search_city')
    sport_type = data.get('sport_type')
    price_min = data.get('price_min')
    price_max = data.get('price_max')
    
    if not results:
        await message.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    results_per_page = 10
    total_pages = (len(results) + results_per_page - 1) // results_per_page
    start_idx = page * results_per_page
    end_idx = min(start_idx + results_per_page, len(results))
    current_results = results[start_idx:end_idx]
    
    builder = InlineKeyboardBuilder()
    
    for user_id, profile in current_results:
        name = f"{profile.get('first_name', '')[0]}. {profile.get('last_name', '')}".strip()
        
        age = await calculate_age(profile.get('birth_date', '05.05.2000'))
        gender_profile = profile.get('gender', '')
        gender_icon = "üë®" if gender_profile == '–ú—É–∂—Å–∫–æ–π' else "üë©" if gender_profile == '–ñ–µ–Ω—Å–∫–∏–π' else 'üë§'
        
        if profile.get('player_level') and profile.get('rating_points'):
            display_name = f"{profile.get('player_level')} ({profile.get('rating_points')} lvl)"
        else:
            display_name = ""

        if search_type == "coaches":
            lesson_price = profile.get('price')

            name = f"{gender_icon} {name} {age} –ª–µ—Ç {lesson_price} —Ä—É–±."
        else:
            name = f"{gender_icon} {name} {age} –ª–µ—Ç {display_name}"
            
        builder.add(InlineKeyboardButton(
            text=name,
            callback_data=f"show_profile_{user_id}"
        ))
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"page_{page-1}"
        ))
    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"page_{page+1}"
        ))
    
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_callback = "back_to_cities"
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data=back_callback
    ))
    
    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä—ã" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–∏"
    sport_text = f", –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport_type}" if sport_type else ""
    price_text = ""
    if search_type == "coaches" and price_min is not None and price_max is not None:
        price_text = f", —Ü–µ–Ω–∞: {price_min}-{price_max} —Ä—É–±."
    
    try:
        await message.edit_text(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} {search_type_text} –≤ –≥–æ—Ä–æ–¥–µ {city} ({country}){sport_text}{price_text}:\n\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )
    except:
        try:
            await message.delete()
        except:
            pass
        await message.answer(
            f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} {search_type_text} –≤ –≥–æ—Ä–æ–¥–µ {city} ({country}){sport_text}{price_text}:\n\n"
            f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=builder.as_markup()
        )
    
    await state.update_data(current_page=page)
    await state.set_state(SearchStates.SEARCH_RESULTS)

@router.callback_query(SearchStates.SEARCH_RESULTS, F.data.startswith("page_"))
async def handle_page_change(callback: types.CallbackQuery, state: FSMContext):
    page = int(callback.data.split("_")[1])
    await show_search_results_list(callback.message, state, page)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_RESULTS, F.data.startswith("show_profile_"))
async def handle_show_profile(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    profile = await storage.get_user(user_id)
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile(callback.message, profile)

    await state.clear()
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_RESULTS, F.data == "back_to_results")
async def handle_back_to_results(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    await show_search_results_list(callback.message, state, current_page)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_NO_RESULTS, F.data == "back_to_cities")
@router.callback_query(SearchStates.SEARCH_RESULTS, F.data == "back_to_cities")
async def handle_back_to_cities(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data.get('search_country')
    search_type = data.get('search_type')
    
    cities = cities_data.get(country, [])
    buttons = []
    for city in cities:
        count = await count_users_by_location(search_type, country, city)
        buttons.append([InlineKeyboardButton(
            text=f"{city} ({count})", 
            callback_data=f"search_city_{city}"
        )])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö
    other_cities = await get_top_cities(search_type=search_type, country=country, exclude_cities=cities)
    other_cities_count = sum(count for city, count in other_cities)
    
    if other_cities_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üèô –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ ({other_cities_count})", 
            callback_data="search_other_city"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", 
        callback_data="back_to_countries"
    )])
    
    search_type_text = "—Ç—Ä–µ–Ω–µ—Ä–æ–≤" if search_type == "coaches" else "–∏–≥—Ä–æ–∫–æ–≤"
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ {search_type_text} –≤ {country}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchStates.SEARCH_CITY)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_COUNTRY, F.data == "back_to_price_range")
async def handle_back_to_price_range(callback: types.CallbackQuery, state: FSMContext):
    await show_price_ranges(callback.message, state)
    await callback.answer()

@router.callback_query(SearchStates.SEARCH_RESULTS, F.data == "back_to_sport")
async def handle_back_to_sport(callback: types.CallbackQuery, state: FSMContext):
    await show_sport_types(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "profile")
async def handle_my_profile(callback: types.CallbackQuery):
    user_id = callback.message.chat.id
    if not await storage.is_user_registered(user_id):
        await callback.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    profile = await storage.get_user(user_id)
    await show_profile(callback.message, profile)
    await callback.answer()

@router.callback_query(F.data == "tours_main_menu")
async def handle_tours_main_menu(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –¢—É—Ä—ã –∏–∑ –º–µ–Ω—é –ï—â–µ"""
    from handlers.tours import browse_tours_start_callback
    await browse_tours_start_callback(callback, state)
