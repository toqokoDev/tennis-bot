from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import copy
import os
import glob
from typing import List, Optional, Union
from datetime import datetime

from config.config import SUBSCRIPTION_PRICE, BOT_USERNAME
from config.paths import GAMES_PHOTOS_DIR
from models.states import AddScoreState
from services.channels import send_game_notification_to_channel
from services.storage import storage
from utils.tournament_manager import tournament_manager
from utils.admin import is_admin
from utils.media import save_media_file
from utils.utils import calculate_age, calculate_new_ratings, create_user_profile_link, search_users
from handlers.profile import calculate_level_from_points

def format_rating(rating: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π"""
    if rating == int(rating):
        return str(int(rating))
    return f"{rating:.1f}".rstrip('0').rstrip('.')

router = Router()
# --- Helpers to prevent duplicate tournament matches ---
def _have_same_tournament_game(g: dict, tournament_id: str, user_a: str, user_b: str) -> bool:
    try:
        if g.get('tournament_id') != tournament_id:
            return False
        t1 = [str(x) for x in g.get('players', {}).get('team1', [])]
        t2 = [str(x) for x in g.get('players', {}).get('team2', [])]
        ua = str(user_a)
        ub = str(user_b)
        # Single players are recorded as one per team for tournament mode
        return ((ua in t1 and ub in t2) or (ua in t2 and ub in t1))
    except Exception:
        return False

async def _already_played_in_tournament(tournament_id: str, user_a: str, user_b: str) -> bool:
    """Checks if there is already a recorded game between user_a and user_b for the given tournament."""
    try:
        games = await storage.load_games()
        for g in games:
            if _have_same_tournament_game(g, tournament_id, user_a, user_b):
                return True
        return False
    except Exception:
        return False


# ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
last_message_ids = {}

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def create_users_inline_keyboard(users_list: List[tuple], action: str, page: int = 0, has_more: bool = False) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    users_per_page = 8
    
    start_idx = page * users_per_page
    end_idx = min(start_idx + users_per_page, len(users_list))
    
    for user_id, user_data in users_list[start_idx:end_idx]:
        name = f"{user_data.get('first_name', '')[0]}. {user_data.get('last_name', '')}".strip()
        
        age = await calculate_age(user_data.get('birth_date', '05.05.2000'))
        gender_profile = user_data.get('gender', '')
        gender_icon = "üë®" if gender_profile == '–ú—É–∂—Å–∫–æ–π' else "üë©" if gender_profile == '–ñ–µ–Ω—Å–∫–∏–π' else 'üë§'
        
        if user_data.get('player_level') and user_data.get('rating_points'):
            display_name = f"{user_data.get('player_level')} ({user_data.get('rating_points')} lvl)"
        else:
            display_name = ""

        btn_text = f"{gender_icon} {name} {age} –ª–µ—Ç {display_name}"

        builder.button(text=btn_text, callback_data=f"{action}:{user_id}")
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"nav:{action}:{page-1}"))
    if has_more and end_idx < len(users_list):
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"nav:{action}:{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏–≥—Ä—ã
def create_game_type_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üéØ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞", callback_data="game_type:single")
    builder.button(text="üë• –ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞", callback_data="game_type:double")
    builder.button(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞", callback_data="game_type:tournament")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ —Å–µ—Ç–∞
def create_set_score_keyboard(set_number: int = 1) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ø–æ–±–µ–¥–∞ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    left_scores = ["6:0", "6:1", "6:2", "6:3", "6:4", "7:5", "7:6"]
    
    # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –ø–æ–±–µ–¥–∞ –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    right_scores = ["0:6", "1:6", "2:6", "3:6", "4:6", "5:7", "6:7"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–µ –∫–æ–ª–æ–Ω–∫–∏
    for left_score, right_score in zip(left_scores, right_scores):
        builder.row(
            InlineKeyboardButton(text=left_score, callback_data=f"set_score:{set_number}_{left_score}"),
            InlineKeyboardButton(text=right_score, callback_data=f"set_score:{set_number}_{right_score}")
        )
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if set_number > 1:
        builder.row(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å–µ—Ç", callback_data=f"prev_set:{set_number-1}"),
            InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Å–µ—Ç", callback_data=f"next_set:{set_number+1}")
        )
    else:
        builder.row(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Å–µ—Ç", callback_data=f"next_set:{set_number+1}"))
    
    builder.row(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ —Å—á–µ—Ç–∞", callback_data="finish_score"))
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back"))
    
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ—â–µ –æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞
def create_add_another_set_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–µ—Ç", callback_data="add_another_set:yes")
    builder.button(text="‚ùå –ù–µ—Ç, –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥", callback_data="add_another_set:no")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –º–µ–¥–∏–∞
def create_media_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üì∑ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data="media:photo")
    builder.button(text="üé• –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–∏–¥–µ–æ", callback_data="media:video")
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="media:skip")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
async def create_tournament_keyboard(current_user_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –≤–Ω–æ—Å–∏—Ç—å —Å—á–µ—Ç.
    –î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Ç—É—Ä–Ω–∏—Ä—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'started'."""
    tournaments = await storage.load_tournaments()
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ—Å—Ç—É–ø–Ω—ã —Ç—É—Ä–Ω–∏—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Ç—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω
    user_tournaments = {}
    for tournament_id, tournament_data in tournaments.items():
        if tournament_data.get('status') not in ['started']:
            continue
        participants = tournament_data.get('participants', {})
        if current_user_id in participants and len(participants) >= 2:
            user_tournaments[tournament_id] = tournament_data
    
    if not user_tournaments:
        builder.button(text="‚ùå –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞", callback_data="no_tournaments")
    else:
        for tournament_id, tournament_data in user_tournaments.items():
            name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
            participants_count = len(tournament_data.get('participants', {}))
            builder.button(text=f"üèÜ {name} ({city}) - {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
                          callback_data=f"select_tournament:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç—É—Ä–Ω–∏—Ä–µ
async def create_tournament_opponents_keyboard(tournament_id: str, current_user_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤ —Ç—É—Ä–Ω–∏—Ä–µ"""

    builder = InlineKeyboardBuilder()
    
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –≤—ã–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω
    tournaments = await storage.load_tournaments()
    t = tournaments.get(tournament_id, {})
    if t.get('status') != 'started':
        builder.button(text="‚è≥ –¢—É—Ä–Ω–∏—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–æ–º", callback_data="no_participants")
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
        builder.adjust(1)
        return builder.as_markup()

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤
    available_opponents = await tournament_manager.get_available_opponents(tournament_id, current_user_id)

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ —É–∂–µ —Å—ã–≥—Ä–∞–Ω–∞ –∏–≥—Ä–∞ –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    filtered: list[dict] = []
    for opp in available_opponents:
        opp_id = str(opp.get('user_id'))
        if not await _already_played_in_tournament(tournament_id, current_user_id, opp_id):
            filtered.append(opp)
    available_opponents = filtered
    
    if not available_opponents:
        builder.button(text="‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤", callback_data="no_participants")
    else:
        for i, opponent in enumerate(available_opponents):
            name = opponent.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            match_number = opponent.get('match_number', 0)
            builder.button(text=f"üë§ {name} (–ú–∞—Ç—á {match_number + 1})", 
                         callback_data=f"select_tournament_opponent:{tournament_id}:{i}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
def create_confirmation_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm:yes")
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç", callback_data="confirm:edit_score")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm:no")
    builder.adjust(1)
    return builder.as_markup()

# –°–æ–∑–¥–∞–Ω–∏–µ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä
def create_history_navigation_keyboard(game_index: int, total_games: int, target_user_id: str, current_user_id: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if game_index > 0:
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"history_nav:{target_user_id}:{game_index-1}")
    
    if game_index < total_games - 1:
        builder.button(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"history_nav:{target_user_id}:{game_index+1}")
    
    builder.adjust(2)
    
    builder.row(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{current_user_id}")
    )
    
    return builder.as_markup()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
def save_message_id(user_id: int, message_id: int):
    last_message_ids[user_id] = message_id

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è
def get_message_id(user_id: int) -> Optional[int]:
    return last_message_ids.get(user_id)

# –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ
async def delete_and_send_new_message(message: types.Message, text: str, keyboard: InlineKeyboardMarkup = None, parse_mode: str = None):
    try:
        await message.delete()
    except:
        pass
    
    new_msg = await message.answer(text, reply_markup=keyboard, parse_mode=parse_mode)
    save_message_id(message.chat.id, new_msg.message_id)
    return new_msg

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞
async def edit_media_message(callback: types.CallbackQuery, text: str, keyboard: InlineKeyboardMarkup, media_data: dict = None):
    try:
        if media_data:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            try:
                await callback.message.delete()
            except:
                pass
            
            if 'photo_id' in media_data:
                new_msg = await callback.message.answer_photo(
                    media_data['photo_id'],
                    caption=text,
                    reply_markup=keyboard, 
                    parse_mode="Markdown"
                )
            elif 'video_id' in media_data:
                new_msg = await callback.message.answer_video(
                    media_data['video_id'],
                    caption=text,
                    reply_markup=keyboard, 
                    parse_mode="Markdown"
                )
            else:
                new_msg = await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
            new_msg = callback.message
    except Exception as e:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        new_msg = await callback.message.answer(text, reply_markup=keyboard, parse_mode="Markdown")
    
    save_message_id(callback.message.chat.id, new_msg.message_id)
    return new_msg

@router.message(F.text == "üìù –í–Ω–µ—Å—Ç–∏ —Å—á–µ—Ç")
async def handle_add_score(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    user_id = message.chat.id
    users = await storage.load_users()
    
    # @TODO 
    # if not await is_admin(user_id):
    #     if not users[str(user_id)].get('subscription', {}).get('active', False):
    #         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    #         referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{message.from_user.id}"
    #         text = (
    #             "üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n"
    #             "–§—É–Ω–∫—Ü–∏—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ Tennis-Play PRO.\n\n"
    #             f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü</b>\n"
    #             "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü–ª–∞—Ç–µ–∂–∏' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
    #             "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 5 –¥—Ä—É–∑–µ–π.\n"
    #             "–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞¬ª.\n\n"
    #             f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
    #             f"<code>{referral_link}</code>\n\n"
    #         )
            
    #         await message.answer(
    #             text,
    #             parse_mode="HTML"
    #         )
    #         return
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await state.set_state(AddScoreState.selecting_game_type)
    
    keyboard = create_game_type_keyboard()
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=keyboard)
    save_message_id(message.chat.id, msg.message_id)

@router.callback_query(F.data.startswith("game_type:"))
async def handle_game_type_selection(callback: types.CallbackQuery, state: FSMContext):
    game_type = callback.data.split(":")[1]
    
    await state.update_data(game_type=game_type)
    
    if game_type == "single":
        await state.set_state(AddScoreState.searching_opponent)
        await callback.message.edit_text(
            "–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        
    elif game_type == "double":
        await state.set_state(AddScoreState.selecting_partner)
        await callback.message.edit_text(
            "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ –ø–∞—Ä–µ\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
    
    elif game_type == "tournament":
        await state.set_state(AddScoreState.selecting_tournament)
        current_user_id = str(callback.message.chat.id)
        keyboard = await create_tournament_keyboard(current_user_id)
        await callback.message.edit_text(
            "üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞:",
            reply_markup=keyboard
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("select_tournament:"))
async def handle_tournament_selection(callback: types.CallbackQuery, state: FSMContext):
    tournament_id = callback.data.split(":")[1]
    await state.update_data(tournament_id=tournament_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–∞
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments.get(tournament_id, {})
    participants = tournament_data.get('participants', {})
    current_user_id = str(callback.message.chat.id)
    
    if current_user_id not in participants:
        await callback.message.edit_text(
            "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞.\n\n"
            "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Ç—É—Ä–Ω–∏—Ä–∞")
        return
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º –≤–Ω–æ—Å–∏—Ç—å —Å—á–µ—Ç –¥–æ —Å—Ç–∞—Ä—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∏ (>=2) –∏ –µ—Å—Ç—å —Å –∫–µ–º –∏–≥—Ä–∞—Ç—å
    tournament_status = tournament_data.get('status', 'active')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–≥—Ä
    from config.tournament_config import MIN_PARTICIPANTS
    tournament_type = tournament_data.get('type', '–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞')
    min_participants = MIN_PARTICIPANTS.get(tournament_type, 4)
    current_participants = len(participants)
    
    if current_participants < 2:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–≥—Ä!\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üë• –¢–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_participants}\n"
            f"üìä –¢—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º: 2", 
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer()
        return
    
    await state.set_state(AddScoreState.selecting_tournament_opponent)
    keyboard = await create_tournament_opponents_keyboard(tournament_id, current_user_id)
    await callback.message.edit_text(
        "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:",
        reply_markup=keyboard
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("select_tournament_opponent:"))
async def handle_tournament_opponent_selection(callback: types.CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    opponent_index = int(parts[2]) if len(parts) > 2 else 0
    tournament_id = parts[1]
    current_user_id = str(callback.message.chat.id)
    print(f"opponent_index: {opponent_index}")
    print(f"tournament_id: {tournament_id}")
    print(f"current_user_id: {current_user_id}")
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
    available_opponents = await tournament_manager.get_available_opponents(tournament_id, current_user_id)
    print(f"DEBUG: available_opponents count={len(available_opponents)}")
    print(f"DEBUG: available_opponents={available_opponents}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if opponent_index >= len(available_opponents):
        await callback.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent_data = available_opponents[opponent_index]
    match_id = selected_opponent_data.get('match_id')
    opponent_id = selected_opponent_data.get('user_id')
    
    users = await storage.load_users()
    
    if opponent_id not in users:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent = users[opponent_id]
    selected_opponent['telegram_id'] = opponent_id
    
    # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∏–≥—Ä—É –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    if await _already_played_in_tournament(tournament_id, current_user_id, opponent_id):
        await callback.answer("–≠—Ç–æ—Ç –º–∞—Ç—á —É–∂–µ —Å—ã–≥—Ä–∞–Ω –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ", show_alert=True)
        # –û–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
        keyboard = await create_tournament_opponents_keyboard(tournament_id, current_user_id)
        await callback.message.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=keyboard
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
    await state.update_data(opponent1=selected_opponent, tournament_match_id=match_id)
    await state.set_state(AddScoreState.selecting_set_score)
    
    keyboard = create_set_score_keyboard(1)
    
    username = selected_opponent.get('username', '')
    username_text = f"@{username}" if username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    await callback.message.edit_text( 
        f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞\n\n"
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\n"
        f"üë§ {await create_user_profile_link(selected_opponent, opponent_id, additional=False)}\n"
        f"üì± Username: {username_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç 1-–≥–æ —Å–µ—Ç–∞:",
        reply_markup=keyboard, 
        parse_mode="Markdown"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data == "no_tournaments")
async def handle_no_tournaments(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –∞–∫—Ç–∏–≤–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ 'üèÜ –¢—É—Ä–Ω–∏—Ä—ã'.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –∏–≥—Ä—ã.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
    )
    await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
@router.callback_query(F.data == "no_participants")
async def handle_no_participants(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç—É—Ä–Ω–∏—Ä.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
    )
    await callback.answer("–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ —Ç—É—Ä–Ω–∏—Ä–µ")

@router.message(AddScoreState.searching_opponent)
async def handle_opponent_search(message: types.Message, state: FSMContext):
    search_query = message.text
    current_user_id = str(message.chat.id)
    
    matching_users = await search_users(search_query, exclude_ids=[current_user_id])
    
    if not matching_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
        msg = await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=keyboard
        )
        save_message_id(message.chat.id, msg.message_id)
        return
    
    await state.update_data(opponent_search=search_query)
    await state.set_state(AddScoreState.selecting_opponent)
    
    keyboard = await create_users_inline_keyboard(matching_users, "select_opponent")
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    save_message_id(message.chat.id, msg.message_id)

@router.message(AddScoreState.selecting_partner)
async def handle_partner_search(message: types.Message, state: FSMContext):
    search_query = message.text
    current_user_id = str(message.chat.id)
    
    matching_users = await search_users(search_query, exclude_ids=[current_user_id])
    
    if not matching_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
        msg = await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=keyboard
        )
        save_message_id(message.chat.id, msg.message_id)
        return
    
    await state.update_data(partner_search=search_query)
    await state.set_state(AddScoreState.searching_partner)
    
    keyboard = await create_users_inline_keyboard(matching_users, "select_partner")
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    save_message_id(message.chat.id, msg.message_id)

@router.callback_query(F.data.startswith("select_partner:"))
async def handle_partner_selection(callback: types.CallbackQuery, state: FSMContext):
    partner_id = callback.data.split(":")[1]
    users = await storage.load_users()
    
    if partner_id not in users:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_partner = users[partner_id]
    selected_partner['telegram_id'] = partner_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
    current_user = users.get(str(callback.message.chat.id))
    current_user_sport = current_user.get('sport', '')
    partner_sport = selected_partner.get('sport', '')
    
    if current_user_sport != partner_sport:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –∏–≥—Ä–æ–∫–∞–º–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞!\n\n"
            f"–í–∞—à –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {current_user_sport}\n"
            f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞: {partner_sport}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å —Ç–µ–º –∂–µ –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer("–í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return
    
    await state.update_data(partner=selected_partner)
    await state.set_state(AddScoreState.searching_opponent1)
    
    await callback.message.edit_text(
        "–ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
    )
    await callback.answer()

@router.message(AddScoreState.searching_opponent1)
async def handle_opponent1_search(message: types.Message, state: FSMContext):
    search_query = message.text
    current_user_id = str(message.chat.id)
    data = await state.get_data()
    partner_id = data.get('partner', {}).get('telegram_id')
    
    matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id])
    
    if not matching_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
        msg = await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=keyboard
        )
        save_message_id(message.chat.id, msg.message_id)
        return
    
    await state.update_data(opponent1_search=search_query)
    await state.set_state(AddScoreState.selecting_opponent1)
    
    keyboard = await create_users_inline_keyboard(matching_users, "select_opponent1")
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    save_message_id(message.chat.id, msg.message_id)

@router.callback_query(F.data.startswith("select_opponent1:"))
async def handle_opponent1_selection(callback: types.CallbackQuery, state: FSMContext):
    opponent_id = callback.data.split(":")[1]
    users = await storage.load_users()
    
    if opponent_id not in users:
        await callback.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent = users[opponent_id]
    selected_opponent['telegram_id'] = opponent_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
    current_user = users.get(str(callback.message.chat.id))
    current_user_sport = current_user.get('sport', '')
    opponent_sport = selected_opponent.get('sport', '')
    
    if current_user_sport != opponent_sport:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –∏–≥—Ä–æ–∫–∞–º–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞!\n\n"
            f"–í–∞—à –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {current_user_sport}\n"
            f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {opponent_sport}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å —Ç–µ–º –∂–µ –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer("–í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return
    
    await state.update_data(opponent1=selected_opponent)
    await state.set_state(AddScoreState.searching_opponent2)
    
    await callback.message.edit_text(
        "–ü–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
    )
    await callback.answer()

@router.message(AddScoreState.searching_opponent2)
async def handle_opponent2_search(message: types.Message, state: FSMContext):
    search_query = message.text
    current_user_id = str(message.chat.id)
    data = await state.get_data()
    partner_id = data.get('partner', {}).get('telegram_id')
    opponent1_id = data.get('opponent1', {}).get('telegram_id')
    
    matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id, opponent1_id])
    
    if not matching_users:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
        )
        msg = await message.answer(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=keyboard
        )
        save_message_id(message.chat.id, msg.message_id)
        return
    
    await state.update_data(opponent2_search=search_query)
    await state.set_state(AddScoreState.selecting_opponent2)
    
    keyboard = await create_users_inline_keyboard(matching_users, "select_opponent2")
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    save_message_id(message.chat.id, msg.message_id)

@router.callback_query(F.data.startswith("select_opponent2:"))
async def handle_opponent2_selection(callback: types.CallbackQuery, state: FSMContext):
    opponent_id = callback.data.split(":")[1]
    users = await storage.load_users()
    
    if opponent_id not in users:
        await callback.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent = users[opponent_id]
    selected_opponent['telegram_id'] = opponent_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
    current_user = users.get(str(callback.message.chat.id))
    current_user_sport = current_user.get('sport', '')
    opponent_sport = selected_opponent.get('sport', '')
    
    if current_user_sport != opponent_sport:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –∏–≥—Ä–æ–∫–∞–º–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞!\n\n"
            f"–í–∞—à –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {current_user_sport}\n"
            f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {opponent_sport}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å —Ç–µ–º –∂–µ –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer("–í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return
    
    await state.update_data(opponent2=selected_opponent)
    await state.set_state(AddScoreState.selecting_set_score)
    
    data = await state.get_data()
    partner = data.get('partner')
    opponent1 = data.get('opponent1')
    opponent2 = selected_opponent
    
    team1_avg = (current_user.get('rating_points', 0) + partner.get('rating_points', 0)) / 2
    team2_avg = (opponent1.get('rating_points', 0) + opponent2.get('rating_points', 0)) / 2
    
    keyboard = create_set_score_keyboard(1)
    
    await callback.message.edit_text(
        f"–ü–∞—Ä—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã:\n\n"
        f"–ü–∞—Ä–∞ 1 (–≤–∞—à–∞):\n"
        f"‚Ä¢ {await create_user_profile_link(current_user, current_user.get('telegram_id'), additional=False)}\n" 
        f"‚Ä¢ {await create_user_profile_link(partner, partner.get('telegram_id'), additional=False)}\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {team1_avg:.0f}\n\n"
        f"–ü–∞—Ä–∞ 2:\n"
        f"‚Ä¢ {await create_user_profile_link(opponent1, opponent1.get('telegram_id'), additional=False)}\n"
        f"‚Ä¢ {await create_user_profile_link(opponent2, opponent2.get('telegram_id'), additional=False)}\n"
        f"–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: {team2_avg:.0f}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç 1-–≥–æ —Å–µ—Ç–∞:",
        reply_markup=keyboard, 
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("select_opponent:"))
async def handle_single_opponent_selection(callback: types.CallbackQuery, state: FSMContext):
    opponent_id = callback.data.split(":")[1]
    users = await storage.load_users()
    
    if opponent_id not in users:
        await callback.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    selected_opponent = users[opponent_id]
    selected_opponent['telegram_id'] = opponent_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞
    current_user = users.get(str(callback.message.chat.id))
    current_user_sport = current_user.get('sport', '')
    opponent_sport = selected_opponent.get('sport', '')
    
    if current_user_sport != opponent_sport:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–ª—å–∑—è –∏–≥—Ä–∞—Ç—å —Å –∏–≥—Ä–æ–∫–∞–º–∏ –¥—Ä—É–≥–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞!\n\n"
            f"–í–∞—à –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {current_user_sport}\n"
            f"–í–∏–¥ —Å–ø–æ—Ä—Ç–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {opponent_sport}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ —Å —Ç–µ–º –∂–µ –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        await callback.answer("–í–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return
    
    await state.update_data(opponent1=selected_opponent)
    await state.set_state(AddScoreState.selecting_set_score)
    
    opponent = selected_opponent
    
    keyboard = create_set_score_keyboard(1)
    
    await callback.message.edit_text( 
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:\n"
        f"üë§ {await create_user_profile_link(opponent, opponent.get('telegram_id', ''), additional=False)}\n\n"
        f"–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: {current_user.get('rating_points', 0)}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç 1-–≥–æ —Å–µ—Ç–∞:",
        reply_markup=keyboard, 
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("set_score:"))
async def handle_set_score_selection(callback: types.CallbackQuery, state: FSMContext):
    set_number_str, score = callback.data.replace("set_score:", "").split("_")
    set_number = int(set_number_str)
    data = await state.get_data()
    sets = data.get('sets', [])
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç —Å–µ—Ç–∞
    if len(sets) >= set_number:
        sets[set_number - 1] = score
    else:
        sets.append(score)
    
    await state.update_data(sets=sets)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
    team1_wins = sum(1 for s in sets if int(s.split(':')[0]) > int(s.split(':')[1]))
    team2_wins = sum(1 for s in sets if int(s.split(':')[0]) < int(s.split(':')[1]))
    
    if team1_wins >= 2 or team2_wins >= 2:
        # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await process_completed_game(callback, state)
    else:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —Å–µ—Ç
        await state.set_state(AddScoreState.adding_another_set)
        keyboard = create_add_another_set_keyboard()
        
        sets_text = "\n".join([f"–°–µ—Ç {i+1}: {s}" for i, s in enumerate(sets)])
        
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç:\n{sets_text}\n\n"
            f"–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Å–µ—Ç?",
            reply_markup=keyboard
        )
    
    await callback.answer()

@router.callback_query(F.data.startswith("add_another_set:"))
async def handle_add_another_set(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    
    if action == "yes":
        data = await state.get_data()
        sets = data.get('sets', [])
        next_set_number = len(sets) + 1
        
        await state.set_state(AddScoreState.selecting_set_score)
        keyboard = create_set_score_keyboard(next_set_number)
        
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç {next_set_number}-–≥–æ —Å–µ—Ç–∞:",
            reply_markup=keyboard
        )
    else:
        await process_completed_game(callback, state)
    
    await callback.answer()

@router.callback_query(F.data.startswith(("prev_set:", "next_set:")))
async def handle_navigate_sets(callback: types.CallbackQuery, state: FSMContext):
    action, set_number_str = callback.data.split(":")
    set_number = int(set_number_str)
    
    await state.set_state(AddScoreState.selecting_set_score)
    keyboard = create_set_score_keyboard(set_number)
    
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç {set_number}-–≥–æ —Å–µ—Ç–∞:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.callback_query(F.data == "finish_score")
async def handle_finish_score(callback: types.CallbackQuery, state: FSMContext):
    await process_completed_game(callback, state)
    await callback.answer()

async def process_completed_game(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sets = data.get('sets', [])
    
    if not sets:
        await callback.answer("–°—á–µ—Ç –Ω–µ –≤–≤–µ–¥–µ–Ω")
        return
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Ä–∞–∑–Ω–∏—Ü—É –≥–µ–π–º–æ–≤
    total_game_diff = 0
    for set_score in sets:
        games1, games2 = map(int, set_score.split(':'))
        total_game_diff += abs(games1 - games2)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    team1_wins = sum(1 for s in sets if int(s.split(':')[0]) > int(s.split(':')[1]))
    team2_wins = sum(1 for s in sets if int(s.split(':')[0]) < int(s.split(':')[1]))
    
    if team1_wins > team2_wins:
        winner_side = "team1"
    else:
        winner_side = "team2"
    
    score_text = ", ".join(sets)
    
    await state.update_data(
        score=score_text,
        sets=sets,
        game_difference=total_game_diff,
        winner_side=winner_side
    )
    
    await state.set_state(AddScoreState.adding_media)
    
    keyboard = create_media_keyboard()
    await callback.message.edit_text(
        "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É?",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("media:"))
async def handle_media_selection(callback: types.CallbackQuery, state: FSMContext):
    media_type = callback.data.split(":")[1]
    
    if media_type == "skip":
        await confirm_score(callback, state)
    elif media_type == "photo":
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
    elif media_type == "video":
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
@router.message(AddScoreState.adding_media, F.photo)
async def handle_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id, media_type='photo')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    try:
        await message.delete()
        msg = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ...")
        await state.update_data(media_message_id=msg.message_id)
    except:
        pass
    
    await confirm_score(message, state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
@router.message(AddScoreState.adding_media, F.video)
async def handle_video(message: types.Message, state: FSMContext):
    video_id = message.video.file_id
    await state.update_data(video_id=video_id, media_type='video')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ
    try:
        await message.delete()
        msg = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
        await state.update_data(media_message_id=msg.message_id)
    except:
        pass
    
    await confirm_score(message, state)

async def confirm_score(message_or_callback: Union[types.Message, types.CallbackQuery], state: FSMContext):
    # –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º message/callback
    if isinstance(message_or_callback, types.CallbackQuery):
        message = message_or_callback.message
        callback = message_or_callback
        bot = callback.bot
    else:
        message = message_or_callback
        callback = None
        bot = message.bot

    # –î–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    media_message_id = data.get('media_message_id')
    
    game_type: str = data.get('game_type')            # 'single' | 'double'
    score = data.get('score')
    sets = data.get('sets')
    game_diff = data.get('game_difference')
    winner_side = data.get('winner_side')             # 'team1' | 'team2'

    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ç–µ–∫—É—â–µ–≥–æ
    users = await storage.load_users()
    current_id = str(message.chat.id)
    current_user = copy.deepcopy(users.get(current_id, {}))

    if not current_user:
        if callback:
            await callback.message.edit_text("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        else:
            await message.answer("–û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–≥—Ä—ã
    game_id = datetime.now().strftime("%Y%m%d_%H%M%S")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
    media_filename = None
    try:
        if 'photo_id' in data and bot:
            media_filename = await save_media_file(bot, data['photo_id'], 'photo', game_id)
        elif 'video_id' in data and bot:
            media_filename = await save_media_file(bot, data['video_id'], 'video', game_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {e}")

    # –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è ID –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    def pid(player_dict: dict | None) -> str | None:
        if not player_dict:
            return None
        return str(player_dict.get('telegram_id'))

    def rating_of(player_dict: dict | None) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –∏–∑ users (–µ—Å–ª–∏ –µ—Å—Ç—å), –∏–Ω–∞—á–µ –∏–∑ —Å–∞–º–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞."""
        if not player_dict:
            return 0.0
        _id = pid(player_dict)
        if _id and _id in users:
            return float(users[_id].get('rating_points', 0))
        return float(player_dict.get('rating_points', 0))

    # –§–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –î–û –∏–∑–º–µ–Ω–µ–Ω–∏–π
    old_ratings: dict[str, float] = {}
    old_ratings[current_id] = float(current_user.get('rating_points', 0))

    partner = data.get('partner') if game_type == 'double' else None
    opponent1 = data.get('opponent1')
    opponent2 = data.get('opponent2') if game_type == 'double' else None

    if partner:
        pid_partner = pid(partner)
        if pid_partner:
            old_ratings[pid_partner] = rating_of(partner)
    if opponent1:
        pid_op1 = pid(opponent1)
        if pid_op1:
            old_ratings[pid_op1] = rating_of(opponent1)
    if opponent2:
        pid_op2 = pid(opponent2)
        if pid_op2:
            old_ratings[pid_op2] = rating_of(opponent2)

    # –ì–æ—Ç–æ–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_text = ""
    rating_changes_for_game: dict[str, float] = {}

    # ---- –¢–£–†–ù–ò–†–ù–ê–Ø –ò–ì–†–ê ----
    if game_type == 'tournament':
        opponent = opponent1
        op_id = pid(opponent)
        tournament_id = data.get('tournament_id')
        
        if not opponent or not op_id or not tournament_id:
            err = "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä—ã –Ω–µ–ø–æ–ª–Ω—ã–µ"
            if callback:
                await callback.message.edit_text(err)
            else:
                await message.answer(err)
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        tournaments = await storage.load_tournaments()
        tournament_data = tournaments.get(tournament_id, {})
        tournament_name = tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if winner_side == "team1":  # team1 = —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            winner_user = current_user
            loser_user = opponent
        else:  # –ø–æ–±–µ–¥–∏–ª —Å–æ–ø–µ—Ä–Ω–∏–∫
            winner_user = opponent
            loser_user = current_user

        # –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä—ã (–±–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞)
        winner_name_link = await create_user_profile_link(winner_user, pid(winner_user) or "", additional=False)
        loser_name_link = await create_user_profile_link(loser_user, pid(loser_user) or "", additional=False)

        result_text = (
            f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_name}\n\n"
            f"üë§ {winner_name_link}\n"
            f"üÜö\n"
            f"üë§ {loser_name_link}\n\n"
            f"üìä –°—á—ë—Ç: {score}\n\n"
            f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_user.get('first_name', '')} {winner_user.get('last_name', '')}"
        )

        # –î–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä—ã –Ω–µ –∏–∑–º–µ–Ω—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        rating_changes_for_game = {}

    # ---- –û–î–ò–ù–û–ß–ù–ê–Ø –ò–ì–†–ê ----
    elif game_type == 'single':
        opponent = opponent1
        op_id = pid(opponent)
        if not opponent or not op_id:
            # –ë–µ–∑ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ –º–æ–∂–µ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
            err = "–û—à–∏–±–∫–∞: —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –≤—ã–±—Ä–∞–Ω"
            if callback:
                await callback.message.edit_text(err)
            else:
                await message.answer(err)
            await state.clear()
            return

        # –°—Ç–∞—Ä—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        curr_old = old_ratings[current_id]
        opp_old = old_ratings[op_id]

        # –ö—Ç–æ –ø–æ–±–µ–¥–∏–ª
        if winner_side == "team1":  # team1 = —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            winner_user = current_user
            loser_user = opponent
            winner_old = curr_old
            loser_old = opp_old
        else:  # –ø–æ–±–µ–¥–∏–ª —Å–æ–ø–µ—Ä–Ω–∏–∫
            winner_user = opponent
            loser_user = current_user
            winner_old = opp_old
            loser_old = curr_old

        # –ü–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        new_winner_points, new_loser_points = await calculate_new_ratings(
            winner_old, loser_old, game_diff
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º users –ø–æ —Ñ–∞–∫—Ç—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è/–ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        if winner_side == "team1":
            # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            users[current_id]['rating_points'] = new_winner_points
            users[current_id]['player_level'] = calculate_level_from_points(
                int(new_winner_points), 
                users[current_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            )
            if op_id in users:
                users[op_id]['rating_points'] = new_loser_points
                users[op_id]['player_level'] = calculate_level_from_points(
                    int(new_loser_points), 
                    users[op_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                )

            # –î–µ–ª—å—Ç—ã –¥–ª—è game_data
            rating_changes_for_game[current_id] = float(new_winner_points - curr_old)
            rating_changes_for_game[op_id] = float(new_loser_points - opp_old)

            # –î–ª—è state (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–∞–ª—å—à–µ)
            await state.update_data(
                rating_change=rating_changes_for_game[current_id],
                opponent_rating_change=rating_changes_for_game[op_id],
                rating_changes=rating_changes_for_game,
                old_ratings=old_ratings
            )
        else:
            # –°–æ–ø–µ—Ä–Ω–∏–∫ ‚Äî –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            users[current_id]['rating_points'] = new_loser_points
            users[current_id]['player_level'] = calculate_level_from_points(
                int(new_loser_points), 
                users[current_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            )
            if op_id in users:
                users[op_id]['rating_points'] = new_winner_points
                users[op_id]['player_level'] = calculate_level_from_points(
                    int(new_winner_points), 
                    users[op_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                )

            rating_changes_for_game[current_id] = float(new_loser_points - curr_old)
            rating_changes_for_game[op_id] = float(new_winner_points - opp_old)

            await state.update_data(
                rating_change=rating_changes_for_game[current_id],
                opponent_rating_change=rating_changes_for_game[op_id],
                rating_changes=rating_changes_for_game,
                old_ratings=old_ratings
            )

        # –¢–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–µ—Ä—Ö—É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_name_link = await create_user_profile_link(winner_user, pid(winner_user) or "", additional=False)
        loser_name_link = await create_user_profile_link(loser_user, pid(loser_user) or "", additional=False)

        result_text = (
            f"üéØ –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞\n\n"
            f"üë§ {winner_name_link}\n"
            f"üÜö\n"
            f"üë§ {loser_name_link}\n\n"
            f"üìä –°—á—ë—Ç: {score}\n\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:\n"
            f"‚Ä¢ {winner_user.get('first_name', '')}: {format_rating(winner_old)} ‚Üí "
            f"{format_rating(winner_old + (new_winner_points - winner_old))} "
            f"({'+' if (new_winner_points - winner_old) > 0 else ''}{format_rating(new_winner_points - winner_old)})\n"
            f"‚Ä¢ {loser_user.get('first_name', '')}: {format_rating(loser_old)} ‚Üí "
            f"{format_rating(loser_old + (new_loser_points - loser_old))} "
            f"({'+' if (new_loser_points - loser_old) > 0 else ''}{format_rating(new_loser_points - loser_old)})"
        )

    # ---- –ü–ê–†–ù–ê–Ø –ò–ì–†–ê ----
    else:
        # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        pid_partner = pid(partner)
        pid_op1 = pid(opponent1)
        pid_op2 = pid(opponent2)
        if not (pid_partner and pid_op1 and pid_op2):
            err = "–û—à–∏–±–∫–∞: –¥–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω(—ã) –ø–∞—Ä—Ç–Ω—ë—Ä –∏ –æ–±–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞"
            if callback:
                await callback.message.edit_text(err)
            else:
                await message.answer(err)
            await state.clear()
            return

        # –°—Ä–µ–¥–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∫–æ–º–∞–Ω–¥ (—Å—Ç–∞—Ä—ã–µ)
        team1_old_avg = (old_ratings[current_id] + old_ratings[pid_partner]) / 2
        team2_old_avg = (old_ratings[pid_op1] + old_ratings[pid_op2]) / 2

        if winner_side == "team1":
            winner_team = [current_user, partner]
            loser_team = [opponent1, opponent2]
            winner_old_avg = team1_old_avg
            loser_old_avg = team2_old_avg
        else:
            winner_team = [opponent1, opponent2]
            loser_team = [current_user, partner]
            winner_old_avg = team2_old_avg
            loser_old_avg = team1_old_avg

        # –ü–µ—Ä–µ—Å—á—ë—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        new_winner_avg, new_loser_avg = await calculate_new_ratings(
            winner_old_avg, loser_old_avg, game_diff
        )

        # –î–µ–ª—å—Ç—ã (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä–æ–≤–Ω—É –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã ‚Äî –∫–∞–∫ –∏ —É –≤–∞—Å —Ä–∞–Ω–µ–µ)
        delta_winner_each = new_winner_avg - winner_old_avg
        delta_loser_each = new_loser_avg - loser_old_avg

        # –û–±–Ω–æ–≤–ª—è–µ–º users, –¥–æ–±–∞–≤–ª—è—è –¥–µ–ª—å—Ç—É –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–∞–Ω–¥—ã
        for p in winner_team:
            _id = pid(p)
            if _id and _id in users:
                new_points = float(users[_id].get('rating_points', 0)) + float(delta_winner_each)
                users[_id]['rating_points'] = new_points
                users[_id]['player_level'] = calculate_level_from_points(
                    int(new_points), 
                    users[_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                )

        for p in loser_team:
            _id = pid(p)
            if _id and _id in users:
                new_points = float(users[_id].get('rating_points', 0)) + float(delta_loser_each)
                users[_id]['rating_points'] = new_points
                users[_id]['player_level'] = calculate_level_from_points(
                    int(new_points), 
                    users[_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                )

        # –°—á–∏—Ç–∞–µ–º rating_changes_for_game –Ω–∞ –æ—Å–Ω–æ–≤–µ old_ratings
        for p in (winner_team + loser_team):
            _id = pid(p)
            if not _id:
                continue
            old_val = old_ratings.get(_id, float(p.get('rating_points', 0)))
            # –ó–Ω–∞—è, –∫ –∫–∞–∫–æ–π –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç p, –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–∂–Ω—É—é –¥–µ–ª—å—Ç—É
            d = delta_winner_each if p in winner_team else delta_loser_each
            rating_changes_for_game[_id] = float(d)

        # –ì–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        async def line_player(player_dict: dict) -> str:
            _id = pid(player_dict) or ""
            name_link = await create_user_profile_link(player_dict, _id, additional=False)
            old_val = old_ratings.get(_id, rating_of(player_dict))
            delta = rating_changes_for_game.get(_id, 0.0)
            new_val = old_val + delta
            sign = '+' if delta > 0 else ''
            return f"‚Ä¢ {name_link}: {format_rating(old_val)} ‚Üí {format_rating(new_val)} ({sign}{format_rating(delta)})"

        result_text = (
            f"üë• –ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞\n\n"
            f"–ü–∞—Ä–∞ 1:\n"
            f"‚Ä¢ {await create_user_profile_link(current_user, current_id, additional=False)}\n"
            f"‚Ä¢ {await create_user_profile_link(partner, pid_partner, additional=False)}\n\n"
            f"–ü–∞—Ä–∞ 2:\n"
            f"‚Ä¢ {await create_user_profile_link(opponent1, pid_op1, additional=False)}\n"
            f"‚Ä¢ {await create_user_profile_link(opponent2, pid_op2, additional=False)}\n\n"
            f"üìä –°—á—ë—Ç: {score}\n\n"
            f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞:\n"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏, –ø–æ—Ç–æ–º –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ)
        for p in (winner_team + loser_team):
            result_text += await line_player(p) + "\n"

        # –î–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π (–µ—Å–ª–∏ —É –≤–∞—Å –≥–¥–µ-—Ç–æ –µ—Å—Ç—å –æ—Ç–∫–∞—Ç) —Å–æ—Ö—Ä–∞–Ω—é old_ratings –≤ state
        await state.update_data(old_ratings=old_ratings, rating_changes=rating_changes_for_game)

    # ---- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ –∏—Å—Ç–æ—Ä–∏—é ----
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    players_block = {
        'team1': [current_id] + ([pid_partner] if game_type == 'double' and pid_partner else []),
        'team2': [pid_op1] + ([pid_op2] if game_type == 'double' and pid_op2 else [])
    }

    # game_data.rating_changes ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –ø–æ—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–µ–ª—å—Ç—ã (–Ω–æ–≤—ã–π - —Å—Ç–∞—Ä—ã–π)
    # –û–ø—Ä–µ–¥–µ–ª–∏–º winner_id –¥–ª—è –∑–∞–ø–∏—Å–∏ (–≤–∞–∂–Ω–æ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü)
    winner_id_for_record = None
    if game_type == 'tournament':
        # –í —Ç—É—Ä–Ω–∏—Ä–µ team1 = —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, team2 = —Å–æ–ø–µ—Ä–Ω–∏–∫1
        opponent = data.get('opponent1')
        op_id_local = pid(opponent) if opponent else None
        if winner_side == 'team1':
            winner_id_for_record = current_id
        elif winner_side == 'team2':
            winner_id_for_record = op_id_local
    elif game_type == 'single':
        opponent = data.get('opponent1')
        op_id_local = pid(opponent) if opponent else None
        if winner_side == 'team1':
            winner_id_for_record = current_id
        elif winner_side == 'team2':
            winner_id_for_record = op_id_local
    else:
        # double
        partner = data.get('partner')
        opponent1 = data.get('opponent1')
        opponent2 = data.get('opponent2')
        # –î–ª—è –ø–∞—Ä ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ–±–µ–¥—É –∑–∞ —Å—Ç–æ—Ä–æ–Ω–æ–π (team1/team2); –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ winner_id –∑–¥–µ—Å—å –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
        if winner_side == 'team1':
            winner_id_for_record = current_id
        elif winner_side == 'team2':
            winner_id_for_record = pid(opponent1)
    game_data = {
        'id': game_id,
        'date': datetime.now().isoformat(),
        'type': game_type,
        'score': score,
        'sets': sets,
        'media_filename': media_filename,
        'players': players_block,
        'rating_changes': rating_changes_for_game,
        'tournament_id': data.get('tournament_id'),  # –î–æ–±–∞–≤–ª—è–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω—ã—Ö –∏–≥—Ä
        'status': 'completed',
        'winner_id': winner_id_for_record
    }

    games = await storage.load_games()
    games.append(game_data)

    # –ï—Å–ª–∏ —ç—Ç–æ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞ ‚Äî –¥–æ–±–∞–≤–∏–º/–æ–±–Ω–æ–≤–∏–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞ –≤ —Å–∞–º–æ–º —Ç—É—Ä–Ω–∏—Ä–µ
    try:
        if game_type == 'tournament' and data.get('tournament_id'):
            tournaments = await storage.load_tournaments()
            tid = data.get('tournament_id')
            t = tournaments.get(tid, {})
            t_matches = t.get('matches') or []
            # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Ç—á–∞: –ø–æ —Å–æ—Å—Ç–∞–≤—É –ø–∞—Ä (–±–µ–∑ —É—á–µ—Ç–∞ –ø–æ—Ä—è–¥–∫–∞)
            def key_of(p1: str | None, p2: str | None):
                if not p1 or not p2:
                    return None
                a, b = sorted([str(p1), str(p2)])
                return f"{a}__{b}"
            new_key = key_of(current_id, pid(opponent1))
            updated = False
            seen_keys = set()
            for m in t_matches:
                mk = key_of(str(m.get('player1_id')), str(m.get('player2_id')))
                if mk:
                    seen_keys.add(mk)
                if new_key and mk == new_key:
                    # –æ–±–Ω–æ–≤–∏–º —Å—á–µ—Ç –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    m['score'] = score
                    m['winner_id'] = winner_id_for_record
                    updated = True
                    break
            if not updated and new_key:
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ç—á –≤ —Å–ø–∏—Å–æ–∫
                t_matches.append({
                    'round': data.get('tournament_round', 0),
                    'match_number': data.get('tournament_match_number', 0),
                    'player1_id': current_id,
                    'player2_id': pid(opponent1),
                    'score': score,
                    'winner_id': winner_id_for_record
                })
            t['matches'] = t_matches
            tournaments[tid] = t
            await storage.save_tournaments(tournaments)
    except Exception as e:
        print(f"[TOURNAMENT][MATCHES] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç—á–∏ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    await storage.save_games(games)
    await storage.save_users(users)

    # –û–±–Ω–æ–≤–ª—è–µ–º state ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(result_text=result_text, game_id=game_id)
    await state.set_state(AddScoreState.confirming_score)

    keyboard = create_confirmation_keyboard()

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–µ–¥–∏–∞
    media_data = {}
    if 'photo_id' in data:
        media_data['photo_id'] = data['photo_id']
    elif 'video_id' in data:
        media_data['video_id'] = data['video_id']

    # –û—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if callback:
        await edit_media_message(callback, result_text, keyboard, media_data)
    else:
        try:
            await message.delete()
        except:
            pass
        if 'photo_id' in data:
            await message.answer_photo(
                data['photo_id'],
                caption=result_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        elif 'video_id' in data:
            await message.answer_video(
                data['video_id'],
                caption=result_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await message.answer(result_text, reply_markup=keyboard, parse_mode="Markdown")

    try:
        await bot.delete_message(message.chat.id, media_message_id)
    except:
        pass

@router.callback_query(F.data.startswith("confirm:"))
async def handle_score_confirmation(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split(":")[1]
    
    current_user_id = str(callback.message.chat.id)
    await state.update_data(current_user_id=current_user_id)
    
    if action == "yes":
        data = await state.get_data()
        result_text = data.get('result_text', '')
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        users = await storage.load_users()
        game_type = data.get('game_type')
        winner_side = data.get('winner_side')
        
        # –î–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π –∏–≥—Ä—ã
        if game_type == 'tournament':
            opponent_id = data.get('opponent1', {}).get('telegram_id')
            tournament_id = data.get('tournament_id')
            match_id = data.get('tournament_match_id')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º games_played –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            users[current_user_id]['games_played'] = users[current_user_id].get('games_played', 0) + 1
            if opponent_id in users:
                users[opponent_id]['games_played'] = users[opponent_id].get('games_played', 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º games_wins –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            winner_id = current_user_id if winner_side == "team1" else opponent_id
            if winner_side == "team1":  # –ü–æ–±–µ–¥–∏–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                users[current_user_id]['games_wins'] = users[current_user_id].get('games_wins', 0) + 1
            else:  # –ü–æ–±–µ–¥–∏–ª —Å–æ–ø–µ—Ä–Ω–∏–∫
                if opponent_id in users:
                    users[opponent_id]['games_wins'] = users[opponent_id].get('games_wins', 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
            if match_id:
                from utils.tournament_manager import tournament_manager
                await tournament_manager.update_match_result(match_id, winner_id, data.get('score'))
                # –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–æ–≤—ã—Ö –º–∞—Ç—á–∞—Ö
                try:
                    from utils.tournament_notifications import TournamentNotifications
                    from main import bot
                    notifications = TournamentNotifications(bot)
                    # –£–≤–µ–¥–æ–º–∏–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ (–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –Ω–æ–≤—ã—Ö –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è—Ö)
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤—ã—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä—ã
                    # –û—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç
                    await callback.bot.send_message(current_user_id, "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ.")
                    if opponent_id:
                        await callback.bot.send_message(opponent_id, "‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–º.")
                except Exception:
                    pass
        
        # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã
        elif game_type == 'single':
            opponent_id = data.get('opponent1', {}).get('telegram_id')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º games_played –¥–ª—è –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
            users[current_user_id]['games_played'] = users[current_user_id].get('games_played', 0) + 1
            if opponent_id in users:
                users[opponent_id]['games_played'] = users[opponent_id].get('games_played', 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º games_wins –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if winner_side == "team1":  # –ü–æ–±–µ–¥–∏–ª —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                users[current_user_id]['games_wins'] = users[current_user_id].get('games_wins', 0) + 1
            else:  # –ü–æ–±–µ–¥–∏–ª —Å–æ–ø–µ—Ä–Ω–∏–∫
                if opponent_id in users:
                    users[opponent_id]['games_wins'] = users[opponent_id].get('games_wins', 0) + 1
        
        # –î–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã
        else:
            players = [
                current_user_id,
                data.get('partner', {}).get('telegram_id'),
                data.get('opponent1', {}).get('telegram_id'),
                data.get('opponent2', {}).get('telegram_id')
            ]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º games_played –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            for player_id in players:
                if player_id in users:
                    users[player_id]['games_played'] = users[player_id].get('games_played', 0) + 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º games_wins –¥–ª—è –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã
            if winner_side == "team1":  # –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                team1_players = [current_user_id, data.get('partner', {}).get('telegram_id')]
                for player_id in team1_players:
                    if player_id in users:
                        users[player_id]['games_wins'] = users[player_id].get('games_wins', 0) + 1
            else:  # –ü–æ–±–µ–¥–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤
                team2_players = [
                    data.get('opponent1', {}).get('telegram_id'),
                    data.get('opponent2', {}).get('telegram_id')
                ]
                for player_id in team2_players:
                    if player_id in users:
                        users[player_id]['games_wins'] = users[player_id].get('games_wins', 0) + 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await storage.save_users(users)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
        if game_type == 'tournament':
            opponent_id = data.get('opponent1', {}).get('telegram_id')
            tournament_id = data.get('tournament_id')
            
            if opponent_id in users:
                try:
                    opponent_user = users[opponent_id]
                    current_user = users[current_user_id]
                    tournaments = await storage.load_tournaments()
                    tournament_data = tournaments.get(tournament_id, {})
                    tournament_name = tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')
                    
                    opponent_link = await create_user_profile_link(current_user, current_user_id, additional=False)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                    if winner_side == "team1":
                        # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏–ª, —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
                        result_msg = (
                            f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_name}\n\n"
                            f"üì¢ –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ –ø—Ä–æ—Ç–∏–≤ {opponent_link}\n"
                            f"–°—á–µ—Ç: {data.get('score')}"
                        )
                    else:
                        # –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–±–µ–¥–∏–ª
                        result_msg = (
                            f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_name}\n\n"
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π –≤ –∏–≥—Ä–µ –ø—Ä–æ—Ç–∏–≤ {opponent_link}!\n"
                            f"–°—á–µ—Ç: {data.get('score')}"
                        )
                    
                    await callback.bot.send_message(
                        opponent_id,
                        result_msg,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫—É: {e}")
        
        elif game_type == 'single':
            opponent_id = data.get('opponent1', {}).get('telegram_id')
            if opponent_id in users:
                try:
                    opponent_user = users[opponent_id]
                    current_user = users[current_user_id]
                    
                    opponent_link = await create_user_profile_link(current_user, current_user_id, additional=False)
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                    if winner_side == "team1":
                        # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏–ª, —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø—Ä–æ–∏–≥—Ä–∞–ª
                        result_msg = (
                            f"üì¢ –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–≥—Ä–µ –ø—Ä–æ—Ç–∏–≤ {opponent_link}\n"
                            f"–°—á–µ—Ç: {data.get('score')}\n"
                            f"–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {format_rating(users[opponent_id]['rating_points'])}"
                        )
                    else:
                        # –°–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–±–µ–¥–∏–ª
                        result_msg = (
                            f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π –≤ –∏–≥—Ä–µ –ø—Ä–æ—Ç–∏–≤ {opponent_link}!\n"
                            f"–°—á–µ—Ç: {data.get('score')}\n"
                            f"–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {format_rating(users[opponent_id]['rating_points'])}"
                        )
                    
                    await callback.bot.send_message(
                        opponent_id,
                        result_msg,
                        parse_mode='Markdown'
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫—É: {e}")
        
        else:  # –ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞
            players_to_notify = [
                (data.get('partner', {}).get('telegram_id'), "–ø–∞—Ä—Ç–Ω–µ—Ä"),
                (data.get('opponent1', {}).get('telegram_id'), "—Å–æ–ø–µ—Ä–Ω–∏–∫"),
                (data.get('opponent2', {}).get('telegram_id'), "—Å–æ–ø–µ—Ä–Ω–∏–∫")
            ]
            
            current_user = users[current_user_id]
            
            for player_id, role in players_to_notify:
                if player_id in users:
                    try:
                        player_user = users[player_id]
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
                        all_players = []
                        for p_id in [current_user_id, 
                                    data.get('partner', {}).get('telegram_id'),
                                    data.get('opponent1', {}).get('telegram_id'),
                                    data.get('opponent2', {}).get('telegram_id')]:
                            if p_id in users:
                                p_user = users[p_id]
                                all_players.append(await create_user_profile_link(p_user, p_id, additional=False))
                        
                        players_list = "\n".join(all_players)
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∏–≥—Ä–æ–∫–∞
                        if winner_side == "team1":
                            # –ö–æ–º–∞–Ω–¥–∞ 1 (—Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å + –ø–∞—Ä—Ç–Ω–µ—Ä) –ø–æ–±–µ–¥–∏–ª–∞
                            if role == "–ø–∞—Ä—Ç–Ω–µ—Ä":
                                result_msg = (
                                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π –≤ –ø–∞—Ä–Ω–æ–π –∏–≥—Ä–µ!\n\n"
                                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}\n\n"
                                    f"–°—á–µ—Ç: {data.get('score')}\n"
                                    f"–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {format_rating(users[player_id]['rating_points'])}"
                                )
                            else:
                                result_msg = (
                                    f"üì¢ –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞—Ä–Ω–æ–π –∏–≥—Ä–µ\n\n"
                                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}\n\n"
                                    f"–°—á–µ—Ç: {data.get('score')}\n"
                                    f"–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {format_rating(users[player_id]['rating_points'])}"
                                )
                        else:
                            # –ö–æ–º–∞–Ω–¥–∞ 2 (—Å–æ–ø–µ—Ä–Ω–∏–∫–∏) –ø–æ–±–µ–¥–∏–ª–∞
                            if role == "—Å–æ–ø–µ—Ä–Ω–∏–∫":
                                result_msg = (
                                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π –≤ –ø–∞—Ä–Ω–æ–π –∏–≥—Ä–µ!\n\n"
                                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}\n\n"
                                    f"–°—á–µ—Ç: {data.get('score')}\n"
                                    f"–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {format_rating(users[player_id]['rating_points'])}"
                                )
                            else:
                                result_msg = (
                                    f"üì¢ –í–∞–º –∑–∞—Å—á–∏—Ç–∞–Ω–æ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø–∞—Ä–Ω–æ–π –∏–≥—Ä–µ\n\n"
                                    f"–£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{players_list}\n\n"
                                    f"–°—á–µ—Ç: {data.get('score')}\n"
                                    f"–í–∞—à –Ω–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {format_rating(users[player_id]['rating_points'])}"
                                )
                        
                        await callback.bot.send_message(
                            player_id,
                            result_msg,
                            parse_mode='Markdown'
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
            data['rating_changes'] = data.get('rating_changes', {})
            data['old_ratings'] = data.get('old_ratings', {})
            await send_game_notification_to_channel(callback.bot, data, users, current_user_id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
        
        try:
            await callback.message.delete()
        except:
            pass
        
        # –í–º–µ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
        await callback.message.answer(
            result_text,
            reply_markup=None,
            parse_mode="Markdown"
        )
        await state.clear()
        
    elif action == "edit_score":
        await state.set_state(AddScoreState.selecting_set_score)
        keyboard = create_set_score_keyboard(1)
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        new_msg = await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç 1-–≥–æ —Å–µ—Ç–∞:",
            reply_markup=keyboard
        )
        save_message_id(callback.message.chat.id, new_msg.message_id)
        
    elif action == "no":
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        users = await storage.load_users()
        data = await state.get_data()
        game_type = data.get('game_type')
        winner_side = data.get('winner_side')
        
        if game_type == 'tournament':
            current_user_id = str(callback.message.chat.id)
            opponent_id = data.get('opponent1', {}).get('telegram_id')
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
            users[current_user_id]['games_played'] = max(0, users[current_user_id].get('games_played', 0) - 1)
            if opponent_id in users:
                users[opponent_id]['games_played'] = max(0, users[opponent_id].get('games_played', 0) - 1)
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—ã
            if winner_side == "team1":  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–±–µ–¥—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                users[current_user_id]['games_wins'] = max(0, users[current_user_id].get('games_wins', 0) - 1)
            else:  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–±–µ–¥—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                if opponent_id in users:
                    users[opponent_id]['games_wins'] = max(0, users[opponent_id].get('games_wins', 0) - 1)
        
        elif game_type == 'single':
            current_user_id = str(callback.message.chat.id)
            opponent_id = data.get('opponent1', {}).get('telegram_id')
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥
            old_rating = data.get('old_rating', 0)
            users[current_user_id]['rating_points'] = old_rating
            users[current_user_id]['player_level'] = calculate_level_from_points(
                int(old_rating), 
                users[current_user_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            )
            if opponent_id in users:
                opponent_old_rating = data.get('opponent_old_rating', 0)
                users[opponent_id]['rating_points'] = opponent_old_rating
                users[opponent_id]['player_level'] = calculate_level_from_points(
                    int(opponent_old_rating), 
                    users[opponent_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                )
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä
            users[current_user_id]['games_played'] = max(0, users[current_user_id].get('games_played', 0) - 1)
            if opponent_id in users:
                users[opponent_id]['games_played'] = max(0, users[opponent_id].get('games_played', 0) - 1)
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—ã
            if winner_side == "team1":  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–±–µ–¥—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                users[current_user_id]['games_wins'] = max(0, users[current_user_id].get('games_wins', 0) - 1)
            else:  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–±–µ–¥—É —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                if opponent_id in users:
                    users[opponent_id]['games_wins'] = max(0, users[opponent_id].get('games_wins', 0) - 1)
        
        else:  # double
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
            old_ratings = data.get('old_ratings', {})
            for user_id, old_rating in old_ratings.items():
                if user_id in users:
                    users[user_id]['rating_points'] = old_rating
                    users[user_id]['player_level'] = calculate_level_from_points(
                        int(old_rating), 
                        users[user_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                    )
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            players = [
                str(callback.message.chat.id),
                data.get('partner', {}).get('telegram_id'),
                data.get('opponent1', {}).get('telegram_id'),
                data.get('opponent2', {}).get('telegram_id')
            ]
            
            for player_id in players:
                if player_id in users:
                    users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥—ã –¥–ª—è –ø–æ–±–µ–¥–∏–≤—à–µ–π –∫–æ–º–∞–Ω–¥—ã
            if winner_side == "team1":  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã 1
                team1_players = [
                    str(callback.message.chat.id),
                    data.get('partner', {}).get('telegram_id')
                ]
                for player_id in team1_players:
                    if player_id in users:
                        users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
            else:  # –û—Ç–º–µ–Ω—è–µ–º –ø–æ–±–µ–¥—É –∫–æ–º–∞–Ω–¥—ã 2
                team2_players = [
                    data.get('opponent1', {}).get('telegram_id'),
                    data.get('opponent2', {}).get('telegram_id')
                ]
                for player_id in team2_players:
                    if player_id in users:
                        users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
        
        await storage.save_users(users)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
        game_id = data.get('game_id')
        if game_id:
            try:
                photo_path = f"data/games_photo/{game_id}_photo.*"
                video_path = f"data/games_photo/{game_id}_video.*"
                
                for file_path in [photo_path, video_path]:
                    for f in glob.glob(file_path):
                        os.remove(f)
            except:
                pass
        
        try:
            await callback.message.delete()
        except:
            pass

        await callback.message.answer(
            "‚ùå –í–Ω–µ—Å–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.",
            reply_markup=None
        )
        await state.clear()
    
    await callback.answer()

@router.callback_query(F.data == "back")
async def handle_back(callback: types.CallbackQuery, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == AddScoreState.selecting_game_type.state:
        await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        
    elif current_state == AddScoreState.selecting_tournament.state:
        await state.set_state(AddScoreState.selecting_game_type)
        keyboard = create_game_type_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=keyboard)
        
    elif current_state == AddScoreState.selecting_tournament_opponent.state:
        await state.set_state(AddScoreState.selecting_tournament)
        current_user_id = str(callback.message.chat.id)
        keyboard = await create_tournament_keyboard(current_user_id)
        await callback.message.edit_text("üèÜ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Å—á–µ—Ç–∞:", reply_markup=keyboard)
        
    elif current_state == AddScoreState.searching_opponent.state:
        await state.set_state(AddScoreState.selecting_game_type)
        keyboard = create_game_type_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=keyboard)
        
    elif current_state == AddScoreState.selecting_opponent.state:
        await state.set_state(AddScoreState.searching_opponent)
        await callback.message.edit_text(
            "–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        
    elif current_state == AddScoreState.selecting_partner.state:
        await state.set_state(AddScoreState.selecting_game_type)
        keyboard = create_game_type_keyboard()
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–≥—Ä—ã:", reply_markup=keyboard)
        
    elif current_state == AddScoreState.searching_partner.state:
        await state.set_state(AddScoreState.selecting_partner)
        await callback.message.edit_text(
            "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ –ø–∞—Ä–µ\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        
    elif current_state == AddScoreState.searching_opponent1.state:
        await state.set_state(AddScoreState.searching_partner)
        data = await state.get_data()
        search_query = data.get('partner_search', '')
        current_user_id = str(callback.message.chat.id)
        
        matching_users = await search_users(search_query, exclude_ids=[current_user_id])
        
        if matching_users:
            keyboard = await create_users_inline_keyboard(matching_users, "select_partner")
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "–í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ –ø–∞—Ä–µ\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
                )
            )
        
    elif current_state == AddScoreState.selecting_opponent1.state:
        await state.set_state(AddScoreState.searching_opponent1)
        await callback.message.edit_text(
            "–ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        
    elif current_state == AddScoreState.searching_opponent2.state:
        await state.set_state(AddScoreState.selecting_opponent1)
        data = await state.get_data()
        search_query = data.get('opponent1_search', '')
        current_user_id = str(callback.message.chat.id)
        partner_id = data.get('partner', {}).get('telegram_id')
        
        matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id])
        
        if matching_users:
            keyboard = await create_users_inline_keyboard(matching_users, "select_opponent1")
            await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
        else:
            await callback.message.edit_text(
                "–ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
                )
            )
        
    elif current_state == AddScoreState.selecting_opponent2.state:
        await state.set_state(AddScoreState.searching_opponent2)
        await callback.message.edit_text(
            "–ü–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
            )
        )
        
    elif current_state == AddScoreState.selecting_set_score.state:
        data = await state.get_data()
        game_type = data.get('game_type')
        
        if game_type == 'single':
            await state.set_state(AddScoreState.selecting_opponent)
            data = await state.get_data()
            search_query = data.get('opponent_search', '')
            current_user_id = str(callback.message.chat.id)
            
            matching_users = await search_users(search_query, exclude_ids=[current_user_id])
            
            if matching_users:
                keyboard = await create_users_inline_keyboard(matching_users, "select_opponent")
                await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
            else:
                await callback.message.edit_text(
                    "–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
                    reply_markup=InlineKeyboardMarkup(
                        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
                    )
                )
                
        else:
            data = await state.get_data()
            
            if 'opponent2' in data:
                await state.update_data(opponent2=None)
                await state.set_state(AddScoreState.selecting_opponent2)
                data = await state.get_data()
                search_query = data.get('opponent2_search', '')
                current_user_id = str(callback.message.chat.id)
                partner_id = data.get('partner', {}).get('telegram_id')
                opponent1_id = data.get('opponent1', {}).get('telegram_id')
                
                matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id, opponent1_id])
                
                if matching_users:
                    keyboard = await create_users_inline_keyboard(matching_users, "select_opponent2")
                    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
                else:
                    await callback.message.edit_text(
                        "–ü–æ–∏—Å–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
                        )
                    )
                
            else:
                await state.update_data(opponent1=None)
                await state.set_state(AddScoreState.selecting_opponent1)
                data = await state.get_data()
                search_query = data.get('opponent1_search', '')
                current_user_id = str(callback.message.chat.id)
                partner_id = data.get('partner', {}).get('telegram_id')
                
                matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id])
                
                if matching_users:
                    keyboard = await create_users_inline_keyboard(matching_users, "select_opponent1")
                    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
                else:
                    await callback.message.edit_text(
                        "–ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞\n–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø–µ—Ä–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:",
                        reply_markup=InlineKeyboardMarkup(
                            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]]
                        )
                    )
        
    elif current_state == AddScoreState.adding_another_set.state:
        await state.set_state(AddScoreState.selecting_set_score)
        data = await state.get_data()
        sets = data.get('sets', [])
        current_set = len(sets)
        keyboard = create_set_score_keyboard(current_set)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç {current_set}-–≥–æ —Å–µ—Ç–∞:", reply_markup=keyboard)
    
    elif current_state == AddScoreState.adding_media.state:
        await state.set_state(AddScoreState.selecting_set_score)
        data = await state.get_data()
        sets = data.get('sets', [])
        current_set = len(sets)
        keyboard = create_set_score_keyboard(current_set)
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç {current_set}-–≥–æ —Å–µ—Ç–∞:", reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data.startswith("nav:"))
async def handle_navigation(callback: types.CallbackQuery, state: FSMContext):
    _, action, page_str = callback.data.split(":")
    page = int(page_str)
    
    users = await storage.load_users()
    current_user_id = str(callback.message.chat.id)
    
    if action == "select_opponent":
        data = await state.get_data()
        search_query = data.get('opponent_search', '')
        matching_users = await search_users(search_query, exclude_ids=[current_user_id])
        
        has_more = len(matching_users) > (page + 1) * 8
        keyboard = await create_users_inline_keyboard(matching_users, action, page, has_more)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    elif action == "select_partner":
        data = await state.get_data()
        search_query = data.get('partner_search', '')
        matching_users = await search_users(search_query, exclude_ids=[current_user_id])
        
        has_more = len(matching_users) > (page + 1) * 8
        keyboard = await create_users_inline_keyboard(matching_users, action, page, has_more)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    elif action == "select_opponent1":
        data = await state.get_data()
        search_query = data.get('opponent1_search', '')
        partner_id = data.get('partner', {}).get('telegram_id')
        matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id])
        
        has_more = len(matching_users) > (page + 1) * 8
        keyboard = await create_users_inline_keyboard(matching_users, action, page, has_more)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    elif action == "select_opponent2":
        data = await state.get_data()
        search_query = data.get('opponent2_search', '')
        partner_id = data.get('partner', {}).get('telegram_id')
        opponent1_id = data.get('opponent1', {}).get('telegram_id')
        matching_users = await search_users(search_query, exclude_ids=[current_user_id, partner_id, opponent1_id])
        
        has_more = len(matching_users) > (page + 1) * 8
        keyboard = await create_users_inline_keyboard(matching_users, action, page, has_more)
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    
    await callback.answer()

@router.callback_query(F.data.startswith("game_history:"))
async def handle_history_request(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—å—é –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º
        target_user_id = callback.data.split(":")[1]
        current_user_id = str(callback.message.chat.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á—É–∂–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        if not await is_admin(callback.message.chat.id):
            if current_user_id != target_user_id:
                users = await storage.load_users()
                if not users.get(current_user_id, {}).get('subscription', {}).get('active', False):
                    referral_link = f"https://t.me/{BOT_USERNAME}?start=ref_{callback.from_user.id}"
                    text = (
                        "üîí <b>–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                        "–§—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä –∏–≥—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π Tennis-Play PRO.\n\n"
                        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{SUBSCRIPTION_PRICE} —Ä—É–±./–º–µ—Å—è—Ü</b>\n"
                        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü–ª–∞—Ç–µ–∂–∏' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø—Ä–∏–≥–ª–∞—Å–∏–≤ 5 –¥—Ä—É–∑–µ–π.\n\n"
                        f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π <code>{referral_link}</code>\n\n"
                        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üîó –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞¬ª.\n\n"
                    )
                    
                    await callback.message.answer(
                        text,
                        parse_mode="HTML"
                    )
                    return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏–≥—Ä—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        await show_single_game_history(callback, target_user_id, 0)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏")

@router.callback_query(F.data.startswith("history_nav:"))
async def handle_history_navigation(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä"""
    try:
        _, target_user_id, game_index_str = callback.data.split(":")
        game_index = int(game_index_str)
        
        await show_single_game_history(callback, target_user_id, game_index)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")

async def show_single_game_history(callback: types.CallbackQuery, target_user_id: str, game_index: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∏–≥—Ä—É –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    target_user = users.get(target_user_id)
    if not target_user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_games = []
    for game in games:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–∞–Ω–¥–∞—Ö
        players_team1 = game['players']['team1']
        players_team2 = game['players']['team2']
        
        if target_user_id in players_team1 or target_user_id in players_team2:
            user_games.append(game)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    user_games.sort(key=lambda x: x['date'], reverse=True)
    
    if not user_games:
        await callback.message.answer(
            f"üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.get('first_name', '')} {target_user.get('last_name', '')}\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_profile:{callback.message.chat.id}")]]
            )
        )
        await callback.answer()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞
    if game_index < 0:
        game_index = 0
    elif game_index >= len(user_games):
        game_index = len(user_games) - 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É
    game = user_games[game_index]
    game_id = game['id']
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    game_date = datetime.fromisoformat(game['date'])
    formatted_date = game_date.strftime("%d.%m.%Y %H:%M")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_in_team1 = target_user_id in game['players']['team1']
    team1_wins = sum(1 for set_score in game['sets'] 
                   if int(set_score.split(':')[0]) > int(set_score.split(':')[1]))
    team2_wins = sum(1 for set_score in game['sets'] 
                   if int(set_score.split(':')[0]) < int(set_score.split(':')[1]))
    
    if (user_in_team1 and team1_wins > team2_wins) or (not user_in_team1 and team2_wins > team1_wins):
        result = "‚úÖ –ü–æ–±–µ–¥–∞"
    else:
        result = "‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–µ"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    rating_change = game['rating_changes'].get(target_user_id, 0)
    rating_change_str = f"+{format_rating(rating_change)}" if rating_change > 0 else f"{format_rating(rating_change)}"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    history_text = f"üìä –ò–≥—Ä–∞ #{game_index + 1} –∏–∑ {len(user_games)}\n\n"
    history_text += f"üìÖ {formatted_date}\n"
    history_text += f"üéØ {result}\n\n"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö
    if game['type'] == 'single':
        # –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –∏–≥—Ä—ã
        opponent_id = game['players']['team2'][0] if user_in_team1 else game['players']['team1'][0]
        opponent = users.get(opponent_id, {})

        history_text += f"üë§ –ò–≥—Ä–æ–∫:\n"
        history_text += f"‚Ä¢ {target_user.get('first_name', '')} {target_user.get('last_name', '')}\n\n" 
        history_text += f"üë§ –°–æ–ø–µ—Ä–Ω–∏–∫:\n"
        history_text += f"‚Ä¢ {await create_user_profile_link(opponent, opponent.get('telegram_id'), additional=False)}\n\n"
        
    else:
        # –î–ª—è –ø–∞—Ä–Ω–æ–π –∏–≥—Ä—ã
        if user_in_team1:
            teammate_id = next(pid for pid in game['players']['team1'] if pid != target_user_id)
            opponents = game['players']['team2']
        else:
            teammate_id = next(pid for pid in game['players']['team2'] if pid != target_user_id)
            opponents = game['players']['team1']
        
        teammate = users.get(teammate_id, {})
        opponent1 = users.get(opponents[0], {})
        opponent2 = users.get(opponents[1], {})
        
        teammate_name = await create_user_profile_link(teammate, teammate_id, additional=False)
        opponent1_name = await create_user_profile_link(opponent1, opponents[0], additional=False)
        opponent2_name = await create_user_profile_link(opponent2, opponents[1], additional=False)
        
        history_text += f"üë• –ü–∞—Ä–∞ 1:\n"
        history_text += f"‚Ä¢ {await create_user_profile_link(target_user, target_user.get('telegram_id', ''), additional=False)}\n"
        history_text += f"‚Ä¢ {teammate_name}\n\n"
        history_text += f"üë• –ü–∞—Ä–∞ 2:\n"
        history_text += f"‚Ä¢ {opponent1_name}\n"
        history_text += f"‚Ä¢ {opponent2_name}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—á–µ—Ç
    history_text += f"üìä –°—á–µ—Ç: {game['score']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    history_text += f"üìà –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞: {rating_change_str}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –∏–≥—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    if await is_admin(callback.message.chat.id):
        history_text += f"\nüÜî ID –∏–≥—Ä—ã: `{game_id}`"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if game_index > 0:
        nav_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"game_history:{target_user_id}:{game_index - 1}"
        ))
    if game_index < len(user_games) - 1:
        nav_buttons.append(InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
            callback_data=f"game_history:{target_user_id}:{game_index + 1}"
        ))
    
    if nav_buttons:
        keyboard_buttons.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üîô –ö –ø—Ä–æ—Ñ–∏–ª—é", 
            callback_data=f"back_to_profile:{target_user_id}"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω —Å–º–æ—Ç—Ä–∏—Ç —á—É–∂—É—é –∏–≥—Ä—É)
    if (await is_admin(callback.message.chat.id)):
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", 
                callback_data=f"admin_select_game:{game_id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª
    if game.get('media_filename'):
        media_path = f"{GAMES_PHOTOS_DIR}/{game['media_filename']}"
        if os.path.exists(media_path):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
            if game['media_filename'].endswith(('.jpg', '.jpeg', '.png')):
                with open(media_path, 'rb') as photo:
                    await callback.message.delete()
                    await callback.message.answer_photo(
                        photo,
                        caption=history_text,
                        reply_markup=keyboard,
                        parse_mode='Markdown',
                    )
            elif game['media_filename'].endswith(('.mp4', '.mov')):
                with open(media_path, 'rb') as video:
                    await callback.message.delete()
                    await callback.message.answer_video(
                        video,
                        caption=history_text,
                        reply_markup=keyboard,
                        parse_mode='Markdown',
                    )
            else:
                try:
                    await callback.message.edit_text(history_text, reply_markup=keyboard, parse_mode='Markdown')
                except:
                    await callback.message.delete()
                    await callback.message.answer(history_text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            try:
                await callback.message.edit_text(history_text, reply_markup=keyboard, parse_mode='Markdown')
            except:
                await callback.message.delete()
                await callback.message.answer(history_text, reply_markup=keyboard, parse_mode='Markdown')
    else:
        try:
            await callback.message.edit_text(history_text, reply_markup=keyboard, parse_mode='Markdown')
        except:
            await callback.message.delete()
            await callback.message.answer(history_text, reply_markup=keyboard, parse_mode='Markdown')
    
    await callback.answer()
