from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
import os
import logging

from services.storage import storage
from utils.admin import get_confirmation_keyboard, is_admin
from handlers.profile import calculate_level_from_points
from models.states import AdminEditGameStates

admin_router = Router()
logger = logging.getLogger(__name__)

# –ü–∞–≥–∏–Ω–∞—Ü–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
GAMES_PER_PAGE = 10

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None, parse_mode: str = "HTML"):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            await callback.message.delete()
        except:
            pass
        try:
            await callback.message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
            return True
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
            return False

async def safe_send_message(message: Message, text: str, reply_markup=None, parse_mode: str = "HTML"):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.answer(text, reply_markup=reply_markup, parse_mode=parse_mode)
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return False

# –ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
@admin_router.callback_query(F.data == "admin_view_applications")
async def view_applications_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await safe_edit_message(callback, "üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await callback.answer()

# –ú–µ–Ω—é –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data == "admin_accept_application_menu")
async def accept_application_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await safe_edit_message(callback, "üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data.startswith("admin_accept_application:"))
async def accept_application_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await safe_edit_message(callback, "üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await callback.answer()

# –ú–µ–Ω—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data == "admin_reject_application_menu")
async def reject_application_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await safe_edit_message(callback, "üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data.startswith("admin_reject_application:"))
async def reject_application_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    await safe_edit_message(callback, "üìã –°–∏—Å—Ç–µ–º–∞ –∑–∞—è–≤–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
    await callback.answer()

# –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data == "admin_delete_tournament_menu")
async def delete_tournament_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await show_delete_tournaments_page(callback, page=0)

async def show_delete_tournaments_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await callback.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")
        return
    
    import re
    TOURNAMENTS_PER_PAGE = 5
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tournament_items = list(tournaments.items())
    total_tournaments = len(tournament_items)
    total_pages = (total_tournaments + TOURNAMENTS_PER_PAGE - 1) // TOURNAMENTS_PER_PAGE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * TOURNAMENTS_PER_PAGE
    end_idx = min(start_idx + TOURNAMENTS_PER_PAGE, total_tournaments)
    page_tournaments = tournament_items[start_idx:end_idx]
    
    builder = InlineKeyboardBuilder()
    
    for tournament_id, tournament_data in page_tournaments:
        level = tournament_data.get('level', '?')
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        district = tournament_data.get('district', '')
        country = tournament_data.get('country', '')
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        if city == "–ú–æ—Å–∫–≤–∞" and district:
            location = f"{city}, {district}"
        elif city and country:
            location = f"{city}, {country}"
        else:
            location = city or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        number_match = re.search(r'‚Ññ(\d+)', name)
        tournament_number = number_match.group(1) if number_match else '?'
        
        text = f"üóëÔ∏è ‚Ññ{tournament_number} | {level} | {location}"
        builder.button(text=text, callback_data=f"admin_delete_tournament:{tournament_id}")
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_delete_tournaments_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_delete_tournaments_page:{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_tournaments"))
    
    text = f"üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages} (–≤—Å–µ–≥–æ: {total_tournaments})"
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤
@admin_router.callback_query(F.data.startswith("admin_delete_tournaments_page:"))
async def admin_delete_tournaments_page_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    page = int(callback.data.split(":", 1)[1])
    await show_delete_tournaments_page(callback, page=page)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data.startswith("admin_delete_tournament:"))
async def delete_tournament_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
    import re
    city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    district = tournament_data.get('district', '')
    country = tournament_data.get('country', '')
    name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    level = tournament_data.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    number_match = re.search(r'‚Ññ(\d+)', name)
    tournament_number = number_match.group(1) if number_match else '?'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if city == "–ú–æ—Å–∫–≤–∞" and district:
        location = f"{city} ({district})"
    else:
        location = f"{city}, {country}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = await get_confirmation_keyboard("delete_tournament", tournament_id)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?\n\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üî¢ –ù–æ–º–µ—Ä: {tournament_number}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"üìç –ú–µ—Å—Ç–æ: {location}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ!",
        keyboard
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data.startswith("admin_confirm_delete_tournament:"))
async def confirm_delete_tournament(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ
    import re
    city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
    district = tournament_data.get('district', '')
    country = tournament_data.get('country', '')
    name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
    level = tournament_data.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
    number_match = re.search(r'‚Ññ(\d+)', name)
    tournament_number = number_match.group(1) if number_match else '?'
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
    if city == "–ú–æ—Å–∫–≤–∞" and district:
        location = f"{city} ({district})"
    else:
        location = f"{city}, {country}"
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    del tournaments[tournament_id]
    await storage.save_tournaments(tournaments)
    
    await safe_edit_message(
        callback,
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω!\n\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
        f"üî¢ –ù–æ–º–µ—Ä: {tournament_number}\n"
        f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        f"üìç –ú–µ—Å—Ç–æ: {location}\n\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
@admin_router.callback_query(F.data == "admin_back_to_tournaments")
async def back_to_tournaments(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await safe_edit_message(callback, "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    import re
    text = "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for tournament_id, tournament_data in tournaments.items():
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        district = tournament_data.get('district', '')
        country = tournament_data.get('country', '')
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        level = tournament_data.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        number_match = re.search(r'‚Ññ(\d+)', name)
        tournament_number = number_match.group(1) if number_match else '?'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        if city == "–ú–æ—Å–∫–≤–∞" and district:
            location = f"{city} ({district})"
        else:
            location = f"{city}, {country}"
        
        text += f"üéØ {name}\n"
        text += f"üî¢ –ù–æ–º–µ—Ä: {tournament_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        text += f"üìç –ú–µ—Å—Ç–æ: {location}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n"
        text += f"üÜî ID: {tournament_id}\n"
        text += "‚îÄ" * 20 + "\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_delete_tournament_menu")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()
    
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_router.message(Command("banned_users"))
async def banned_users_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await safe_send_message(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, ban_data in banned_users.items():
        text += f"üë§ {ban_data.get('first_name', '')} {ban_data.get('last_name', '')}\n"
        text += f"üìû {ban_data.get('phone', '')}\n"
        text += f"üÜî ID: {user_id}\n"
        text += f"‚è∞ –ó–∞–±–∞–Ω–µ–Ω: {ban_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += "‚îÄ" * 20 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban_menu")
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤", callback_data="admin_clear_all_bans")
    builder.adjust(1)
    
    await safe_send_message(message, text, builder.as_markup())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(Command("unban_user"))
async def unban_user_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await show_unban_menu(message)

async def show_unban_menu(message: Message):
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await safe_send_message(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, ban_data in banned_users.items():
        name = f"{ban_data.get('first_name', '')} {ban_data.get('last_name', '')}"
        builder.button(text=f"üîì {name}", callback_data=f"admin_unban_user:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_send_message(
        message,
        "üîì –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        builder.as_markup()
    )

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: CallbackQuery):
    await safe_edit_message(callback, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_banned_list")
    builder.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")
    builder.button(text="‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏", callback_data="admin_edit_tournaments")
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@admin_router.callback_query(F.data == "admin_create_tournament")
async def admin_create_tournament_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ tournament.py
    from handlers.tournament import create_tournament_callback
    await create_tournament_callback(callback, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@admin_router.callback_query(F.data == "admin_tournaments")
async def tournaments_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await safe_edit_message(callback, "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    import re
    text = "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for tournament_id, tournament_data in tournaments.items():
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        district = tournament_data.get('district', '')
        country = tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        level = tournament_data.get('level', '–ù–µ —É–∫–∞–∑–∞–Ω')
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
        number_match = re.search(r'‚Ññ(\d+)', name)
        tournament_number = number_match.group(1) if number_match else '?'
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        if city == "–ú–æ—Å–∫–≤–∞" and district:
            location = f"{city} ({district})"
        else:
            location = f"{city}, {country}"
        
        text += f"üèÜ {name}\n"
        text += f"üî¢ –ù–æ–º–µ—Ä: {tournament_number}\n"
        text += f"üìä –£—Ä–æ–≤–µ–Ω—å: {level}\n"
        text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"üåç –ú–µ—Å—Ç–æ: {location}\n"
        text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"üë• –ü–æ–ª: {tournament_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}/{tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üìã –í —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {'–î–∞' if tournament_data.get('show_in_list', False) else '–ù–µ—Ç'}\n"
        text += f"üîí –°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É: {'–î–∞' if tournament_data.get('hide_bracket', False) else '–ù–µ—Ç'}\n"
        if tournament_data.get('comment'):
            text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}\n"
        text += f"üÜî ID: {tournament_id}\n"
        text += "‚îÄ" * 30 + "\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_delete_tournament_menu")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await safe_send_message(
        message,
        "üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
@admin_router.callback_query(F.data == "admin_banned_list")
async def banned_list_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await callback.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, ban_data in banned_users.items():
        text += f"üë§ {ban_data.get('first_name', '')} {ban_data.get('last_name', '')}\n"
        text += f"üìû {ban_data.get('phone', '')}\n"
        text += f"üÜî ID: {user_id}\n"
        text += f"‚è∞ –ó–∞–±–∞–Ω–µ–Ω: {ban_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += "‚îÄ" * 20 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban_menu")
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤", callback_data="admin_clear_all_bans")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_unban_menu")
async def unban_menu_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await callback.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, ban_data in banned_users.items():
        name = f"{ban_data.get('first_name', '')} {ban_data.get('last_name', '')}"
        builder.button(text=f"üîì {name}", callback_data=f"admin_unban_user:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_banned_list")
    builder.adjust(1)
    
    await safe_edit_message(
        callback,
        "üîì –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@admin_router.callback_query(F.data == "admin_edit_tournaments")
async def edit_tournaments_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await show_tournaments_page(callback, page=0)

async def show_tournaments_page(callback: CallbackQuery, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await safe_edit_message(callback, "üìã –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤")
        return
    
    import re
    TOURNAMENTS_PER_PAGE = 5
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tournament_items = list(tournaments.items())
    total_tournaments = len(tournament_items)
    total_pages = (total_tournaments + TOURNAMENTS_PER_PAGE - 1) // TOURNAMENTS_PER_PAGE
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * TOURNAMENTS_PER_PAGE
    end_idx = min(start_idx + TOURNAMENTS_PER_PAGE, total_tournaments)
    page_tournaments = tournament_items[start_idx:end_idx]
    
    builder = InlineKeyboardBuilder()
    
    for tournament_id, tournament_data in page_tournaments:
        level = tournament_data.get('level', '?')
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        district = tournament_data.get('district', '')
        country = tournament_data.get('country', '')
        name = tournament_data.get('name', '')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è
        if city == "–ú–æ—Å–∫–≤–∞" and district:
            location = f"{city}, {district}"
        elif city and country:
            location = f"{city}, {country}"
        else:
            location = city or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        number_match = re.search(r'‚Ññ(\d+)', name)
        tournament_number = number_match.group(1) if number_match else '?'
        
        button_text = f"‚Ññ{tournament_number} | {level} | {location}"
        builder.button(text=button_text, callback_data=f"edit_tournament:{tournament_id}")
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"admin_tournaments_page:{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"admin_tournaments_page:{page+1}"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(InlineKeyboardButton(text="üîô –ö –º–µ–Ω—é", callback_data="admin_back_to_main"))
    
    text = f"üèÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä:\n\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages} (–≤—Å–µ–≥–æ: {total_tournaments})"
    
    await safe_edit_message(
        callback,
        text,
        builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@admin_router.callback_query(F.data.startswith("admin_tournaments_page:"))
async def admin_tournaments_page_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    page = int(callback.data.split(":", 1)[1])
    await show_tournaments_page(callback, page=page)

@admin_router.callback_query(F.data == "admin_clear_all_bans")
async def clear_all_bans_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = await get_confirmation_keyboard("clear_all_bans")
    await safe_edit_message(
        callback,
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑–±–∞–Ω–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤.\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_confirm_clear_all_bans")
async def confirm_clear_all_bans(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤
    await storage.save_banned_users({})
    
    await safe_edit_message(callback, "‚úÖ –í—Å–µ –±–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_unban_user:"))
async def unban_user_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(':')[1]
    banned_users = await storage.load_banned_users()
    
    if user_id not in banned_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤")
        return
    
    user_data = banned_users[user_id]
    keyboard = await get_confirmation_keyboard("unban_user", user_id)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üÜî ID: {user_id}\n"
        f"‚è∞ –ó–∞–±–∞–Ω–µ–Ω: {user_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_unban_user:"))
async def confirm_unban_user(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(':')[1]
    banned_users = await storage.load_banned_users()
    
    if user_id not in banned_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤
    user_data = banned_users.pop(user_id)
    await storage.save_banned_users(banned_users)
    
    await safe_edit_message(
        callback,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.get('first_name', '')} {user_data.get('last_name', '')} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!\n"
        f"üÜî ID: {user_id}\n\n"
        "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ."
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_user_menu")
async def delete_user_menu(callback: CallbackQuery):
    users = await storage.load_users()
    
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, user_data in users.items():
        name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}"
        builder.button(text=f"üóëÔ∏è {name}", callback_data=f"admin_select_user:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_game_menu")
async def delete_game_menu(callback: CallbackQuery):
    games = await storage.load_games()
    
    if not games:
        await callback.answer("‚ùå –ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for game in games[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∏–≥—Ä
        game_id = game.get('id', '')
        date = game.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        builder.button(text=f"üéæ {date}", callback_data=f"admin_select_game:{game_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üéæ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_offer_menu")
async def delete_offer_menu(callback: CallbackQuery):
    users = await storage.load_users()
    offers_list = []
    
    for user_id, user_data in users.items():
        if 'games' in user_data and user_data['games']:
            for game_offer in user_data['games']:
                if game_offer.get('active', True):
                    offers_list.append({
                        'user_id': user_id,
                        'offer_id': game_offer.get('id'),
                        'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
                        'date': game_offer.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    })
    
    if not offers_list:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä")
        return
    
    builder = InlineKeyboardBuilder()
    for offer in offers_list[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        text = f"üìã {offer['user_name']} - {offer['date']}"
        callback_data = f"admin_select_offer:{offer['user_id']}:{offer['offer_id']}"
        builder.button(text=text, callback_data=callback_data)
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_vacation_menu")
async def delete_vacation_menu(callback: CallbackQuery):
    users = await storage.load_users()
    vacation_users = []
    
    for user_id, user_data in users.items():
        if user_data.get('vacation_tennis'):
            vacation_users.append({
                'user_id': user_id,
                'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
                'start': user_data.get('vacation_start', ''),
                'end': user_data.get('vacation_end', '')
            })
    
    if not vacation_users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–ø—É—Å–∫–µ")
        return
    
    builder = InlineKeyboardBuilder()
    for user in vacation_users:
        text = f"üèñÔ∏è {user['user_name']} ({user['start']} - {user['end']})"
        builder.button(text=text, callback_data=f"admin_select_vacation:{user['user_id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üèñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_subscription_menu")
async def delete_subscription_menu(callback: CallbackQuery):
    users = await storage.load_users()
    sub_users = []
    
    for user_id, user_data in users.items():
        if user_data.get('subscription', {}).get('active'):
            sub_users.append({
                'user_id': user_id,
                'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
                'until': user_data['subscription'].get('until', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            })
    
    if not sub_users:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        return
    
    builder = InlineKeyboardBuilder()
    for user in sub_users:
        text = f"üîî {user['user_name']} (–¥–æ {user['until']})"
        builder.button(text=text, callback_data=f"admin_select_subscription:{user['user_id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üîî –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("admin_select_user:"))
async def select_user(callback: CallbackQuery):
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –±–∞–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_user:{user_id}")
    builder.button(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"admin_ban_user:{user_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    builder.adjust(2)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {user_data.get('rating_points', 0)}\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.get('games_played', 0)}\n"
        f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(user_data.get('games', []))}\n\n"
        "üö´ –ó–∞–±–∞–Ω - —É–¥–∞–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–∏—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        builder.as_markup()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_game:"))
async def select_game(callback: CallbackQuery):
    game_id = callback.data.split(':')[1]
    games = await storage.load_games()
    users = await storage.load_users()
    
    game_to_delete = None
    for game in games:
        if game.get('id') == game_id:
            game_to_delete = game
            break
    
    if not game_to_delete:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    player_names = []
    for team in ['team1', 'team2']:
        for player_id in game_to_delete.get('players', {}).get(team, []):
            if player_id in users:
                user = users[player_id]
                player_names.append(f"{user.get('first_name', '')} {user.get('last_name', '')}")
    
    keyboard = await get_confirmation_keyboard("delete_game", game_id)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É?\n\n"
        f"üÜî ID: {game_id}\n"
        f"üìÖ –î–∞—Ç–∞: {game_to_delete.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üéØ –¢–∏–ø: {game_to_delete.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üìä –°—á–µ—Ç: {game_to_delete.get('score', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üë• –ò–≥—Ä–æ–∫–∏: {', '.join(player_names)}\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –æ—Ç–∫–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_vacation:"))
async def select_vacation(callback: CallbackQuery):
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    keyboard = await get_confirmation_keyboard("delete_vacation", user_id)
    
    vacation_info = "‚ùå –û—Ç–ø—É—Å–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if user_data.get('vacation_tennis'):
        vacation_info = f"‚úÖ –í –æ—Ç–ø—É—Å–∫–µ\nüìÖ {user_data.get('vacation_start', '')} - {user_data.get('vacation_end', '')}"
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üèñÔ∏è –°—Ç–∞—Ç—É—Å: {vacation_info}",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_subscription:"))
async def select_subscription(callback: CallbackQuery):
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    keyboard = await get_confirmation_keyboard("delete_subscription", user_id)
    
    sub_info = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if user_data.get('subscription', {}).get('active'):
        sub_info = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user_data['subscription'].get('until', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üîî –ü–æ–¥–ø–∏—Å–∫–∞: {sub_info}",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_offer:"))
async def select_offer(callback: CallbackQuery):
    try:
        parts = callback.data.split(':')
        user_id = parts[1]
        offer_id = parts[2]
    except IndexError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID")
        return
    
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    offer_to_delete = None
    
    for game_offer in user_data.get('games', []):
        if str(game_offer.get('id')) == offer_id:
            offer_to_delete = game_offer
            break
    
    if not offer_to_delete:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    keyboard = await get_confirmation_keyboard("delete_offer", f"{user_id}:{offer_id}")
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã?\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üÜî ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {offer_id}\n"
        f"üéØ –°–ø–æ—Ä—Ç: {offer_to_delete.get('sport', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å')}\n"
        f"üìÖ –î–∞—Ç–∞: {offer_to_delete.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {offer_to_delete.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {offer_to_delete.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        keyboard
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@admin_router.callback_query(F.data == "admin_back_to_main")
async def back_to_main(callback: CallbackQuery):
    await safe_edit_message(
        callback,
        "üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        get_admin_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@admin_router.callback_query(F.data.startswith("admin_confirm_delete_user:"))
async def confirm_delete_user(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    games = await storage.load_games()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–≥—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    new_games = []
    for game in games:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
        user_in_game = False
        for team in ['team1', 'team2']:
            if user_id in game.get('players', {}).get(team, []):
                user_in_game = True
                break
        
        if user_in_game:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã
            for player_id, rating_change in game.get('rating_changes', {}).items():
                if player_id in users:
                    users[player_id]['rating_points'] -= rating_change
                    users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
                    # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –≤—ã–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ
                    if (user_id in game.get('players', {}).get('team1', []) and 
                        game.get('score', '').startswith('6')):
                        users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
        else:
            new_games.append(game)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if user_data.get('photo_path'):
        try:
            os.remove(user_data['photo_path'])
        except:
            pass
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del users[user_id]
    
    await storage.save_users(users)
    await storage.save_games(new_games)
    
    await safe_edit_message(callback, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_game:"))
async def confirm_delete_game(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_id = callback.data.split(':')[1]
    users = await storage.load_users()
    games = await storage.load_games()
    
    game_to_delete = None
    new_games = []
    for game in games:
        if game.get('id') == game_id:
            game_to_delete = game
        else:
            new_games.append(game)
    
    if not game_to_delete:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –û—Ç–∫–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for player_id, rating_change in game_to_delete.get('rating_changes', {}).items():
        if player_id in users:
            new_rating = users[player_id]['rating_points'] - rating_change
            users[player_id]['rating_points'] = new_rating
            users[player_id]['player_level'] = calculate_level_from_points(
                int(new_rating), 
                users[player_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            )
            users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –≤—ã–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ
            if (player_id in game_to_delete.get('players', {}).get('team1', []) and 
                game_to_delete.get('score', '').startswith('6')):
                users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
    await storage.save_games(new_games)
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –ò–≥—Ä–∞ {game_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–∫–∞—á–µ–Ω—ã.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_vacation:"))
async def confirm_delete_vacation(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—É—Å–∫–µ
    users[user_id]['vacation_tennis'] = False
    users[user_id].pop('vacation_start', None)
    users[user_id].pop('vacation_end', None)
    users[user_id].pop('vacation_comment', None)
    
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –û—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_subscription:"))
async def confirm_delete_subscription(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    users[user_id].pop('subscription', None)
    
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_offer:"))
async def confirm_delete_offer(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        user_id, offer_id = callback.data.split(':')[1], callback.data.split(':')[2]
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID")
        return
    
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_games = users[user_id].get('games', [])
    new_games = [game for game in user_games if str(game.get('id')) != offer_id]
    users[user_id]['games'] = new_games
    
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {offer_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_ban_user:"))
async def ban_user_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    banned_users = await storage.load_banned_users()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω –ª–∏—Å—Ç
    banned_users[str(user_id)] = {
        'first_name': user_data.get('first_name', ''),
        'last_name': user_data.get('last_name', ''),
        'username': user_data.get('username', ''),
        'phone': user_data.get('phone', ''),
        'banned_by': callback.message.chat.id,
        'banned_at': datetime.now().isoformat()
    }
    await storage.save_banned_users(banned_users)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏)
    games = await storage.load_games()
    new_games = []
    for game in games:
        user_in_game = False
        for team in ['team1', 'team2']:
            if user_id in game.get('players', {}).get(team, []):
                user_in_game = True
                break
        
        if user_in_game:
            for player_id, rating_change in game.get('rating_changes', {}).items():
                if player_id in users:
                    new_rating = users[player_id]['rating_points'] - rating_change
                    users[player_id]['rating_points'] = new_rating
                    users[player_id]['player_level'] = calculate_level_from_points(
                        int(new_rating), 
                        users[player_id].get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
                    )
                    users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
                    if (user_id in game.get('players', {}).get('team1', []) and 
                        game.get('score', '').startswith('6')):
                        users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
        else:
            new_games.append(game)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if user_data.get('photo_path'):
        try:
            os.remove(user_data['photo_path'])
        except:
            pass
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del users[user_id]
    
    await storage.save_users(users)
    await storage.save_games(new_games)
    
    await safe_edit_message(callback, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!")
    await callback.answer()


# ==================== –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ì–†–ê–ú–ò ====================

@admin_router.callback_query(F.data.startswith("admin_tournament_games:"))
async def admin_tournament_games_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(":", 1)[1]
    await state.update_data(viewing_tournament_id=tournament_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
    games = await storage.load_games()
    tournament_games = [g for g in games if g.get('tournament_id') == tournament_id]
    
    if not tournament_games:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
        await safe_edit_message(callback, "üìã –í —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä.", builder.as_markup())
        await callback.answer()
        return
    
    await show_games_page(callback.message, page=0, callback=callback, tournament_id=tournament_id, state=state)
    await callback.answer()


async def show_games_page(message: Message, page: int = 0, callback: CallbackQuery = None, tournament_id: str = None, state: FSMContext = None):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–≥—Ä"""
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ —Ç—É—Ä–Ω–∏—Ä—É, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω tournament_id
    if tournament_id:
        games = [g for g in games if g.get('tournament_id') == tournament_id]
    
    if not games:
        text = "üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä –ø—É—Å—Ç."
        if callback:
            await safe_edit_message(callback, text)
        else:
            await safe_send_message(message, text)
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ –ø–µ—Ä–≤—ã–µ)
    games_sorted = sorted(games, key=lambda x: x.get('date', ''), reverse=True)
    
    total_games = len(games_sorted)
    total_pages = (total_games + GAMES_PER_PAGE - 1) // GAMES_PER_PAGE
    
    if page < 0:
        page = 0
    if page >= total_pages:
        page = total_pages - 1
    
    start_idx = page * GAMES_PER_PAGE
    end_idx = min(start_idx + GAMES_PER_PAGE, total_games)
    
    games_on_page = games_sorted[start_idx:end_idx]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if tournament_id:
        tournaments = await storage.load_tournaments()
        tournament_name = tournaments.get(tournament_id, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')
        text = f"üèÜ <b>–ò–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_name}</b>\n\n"
    else:
        text = f"üéæ <b>–°–ø–∏—Å–æ–∫ –∏–≥—Ä</b>\n\n"
    
    text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages} (–≤—Å–µ–≥–æ –∏–≥—Ä: {total_games})\n\n"
    
    builder = InlineKeyboardBuilder()
    
    for idx, game in enumerate(games_on_page, start=start_idx + 1):
        game_id = game.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        game_type = game.get('type', 'single')
        score = game.get('score', '–ù–µ—Ç —Å—á–µ—Ç–∞')
        date = game.get('date', '')
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            dt = datetime.fromisoformat(date)
            date_str = dt.strftime("%d.%m.%Y %H:%M")
        except:
            date_str = date[:16] if date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        team1 = game.get('players', {}).get('team1', [])
        team2 = game.get('players', {}).get('team2', [])
        
        def get_player_name(player_id):
            user = users.get(player_id, {})
            return f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or player_id
        
        if game_type == 'single':
            type_icon = "üë§"
            player1 = get_player_name(team1[0]) if team1 else "?"
            player2 = get_player_name(team2[0]) if team2 else "?"
            players_str = f"{player1} vs {player2}"
        elif game_type == 'double':
            type_icon = "üë•"
            players_str = "–ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞"
        else:
            type_icon = "üèÜ"
            player1 = get_player_name(team1[0]) if team1 else "?"
            player2 = get_player_name(team2[0]) if team2 else "?"
            players_str = f"{player1} vs {player2}"
        
        button_text = f"{type_icon} {date_str} | {score}"
        builder.button(text=button_text, callback_data=f"admin_view_game:{game_id}")
    
    builder.adjust(1)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        callback_data_prev = f"admin_tournament_games_page:{tournament_id}:{page-1}" if tournament_id else f"admin_games_page:{page-1}"
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=callback_data_prev))
    if page < total_pages - 1:
        callback_data_next = f"admin_tournament_games_page:{tournament_id}:{page+1}" if tournament_id else f"admin_games_page:{page+1}"
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=callback_data_next))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    if tournament_id:
        builder.row(InlineKeyboardButton(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}"))
    else:
        builder.row(InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ç—É—Ä–Ω–∏—Ä–∞–º–∏", callback_data="admin_edit_tournaments"))
    
    if callback:
        await safe_edit_message(callback, text, reply_markup=builder.as_markup())
    else:
        await safe_send_message(message, text, reply_markup=builder.as_markup())


@admin_router.callback_query(F.data.startswith("admin_tournament_games_page:"))
async def admin_tournament_games_page_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    parts = callback.data.split(":")
    tournament_id = parts[1]
    page = int(parts[2])
    
    await show_games_page(callback.message, page=page, callback=callback, tournament_id=tournament_id, state=state)
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_games_page:"))
async def admin_games_page_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    page = int(callback.data.split(":", 1)[1])
    await show_games_page(callback.message, page=page, callback=callback)
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_view_game:"))
async def admin_view_game_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–≥—Ä–µ"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g.get('id') == game_id:
            game = g
            break
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game_type = game.get('type', 'single')
    score = game.get('score', '–ù–µ—Ç —Å—á–µ—Ç–∞')
    date = game.get('date', '')
    winner_id = game.get('winner_id')
    tournament_id = game.get('tournament_id')
    media = game.get('media_filename')
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    try:
        dt = datetime.fromisoformat(date)
        date_str = dt.strftime("%d.%m.%Y –≤ %H:%M")
    except:
        date_str = date[:16] if date else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    team1 = game.get('players', {}).get('team1', [])
    team2 = game.get('players', {}).get('team2', [])
    
    def get_player_info(player_id):
        user = users.get(player_id, {})
        name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or player_id
        level = user.get('player_level', '?')
        rating = user.get('rating_points', '?')
        return f"{name} ({level}, {rating} pts)"
    
    text = f"<b>üéæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–µ</b>\n\n"
    text += f"üÜî ID: <code>{game_id}</code>\n"
    text += f"üìÖ –î–∞—Ç–∞: <b>{date_str}</b>\n"
    
    if game_type == 'single':
        text += f"üéÆ –¢–∏–ø: <b>–û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞</b>\n\n"
        if team1 and team2:
            text += f"üë§ <b>–ò–≥—Ä–æ–∫ 1:</b> {get_player_info(team1[0])}\n"
            text += f"üë§ <b>–ò–≥—Ä–æ–∫ 2:</b> {get_player_info(team2[0])}\n\n"
    elif game_type == 'double':
        text += f"üéÆ –¢–∏–ø: <b>–ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞</b>\n\n"
        text += f"üë• <b>–ö–æ–º–∞–Ω–¥–∞ 1:</b>\n"
        for pid in team1:
            text += f"  ‚Ä¢ {get_player_info(pid)}\n"
        text += f"\nüë• <b>–ö–æ–º–∞–Ω–¥–∞ 2:</b>\n"
        for pid in team2:
            text += f"  ‚Ä¢ {get_player_info(pid)}\n\n"
    else:
        text += f"üéÆ –¢–∏–ø: <b>–¢—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞</b>\n"
        if tournament_id:
            text += f"üèÜ –¢—É—Ä–Ω–∏—Ä ID: <code>{tournament_id}</code>\n\n"
        if team1 and team2:
            text += f"üë§ <b>–ò–≥—Ä–æ–∫ 1:</b> {get_player_info(team1[0])}\n"
            text += f"üë§ <b>–ò–≥—Ä–æ–∫ 2:</b> {get_player_info(team2[0])}\n\n"
    
    text += f"üìä –°—á–µ—Ç: <b>{score}</b>\n"
    
    if winner_id:
        winner = users.get(winner_id, {})
        winner_name = f"{winner.get('first_name', '')} {winner.get('last_name', '')}".strip() or winner_id
        text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_name}</b>\n"
    else:
        text += f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <i>–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω</i>\n"
    
    if media:
        text += f"üì∑ –ú–µ–¥–∏–∞: <b>–ï—Å—Ç—å</b>\n"
    else:
        text += f"üì∑ –ú–µ–¥–∏–∞: <i>–ù–µ—Ç</i>\n"
    
    # –ö–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç", callback_data=f"admin_edit_score:{game_id}")
    builder.button(text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"admin_edit_media:{game_id}")
    builder.button(text="üèÜ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", callback_data=f"admin_edit_winner:{game_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", callback_data=f"admin_delete_game:{game_id}")
    builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="admin_back_to_games")
    
    # –ï—Å–ª–∏ —ç—Ç–æ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ç—É—Ä–Ω–∏—Ä—É
    if tournament_id:
        builder.button(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
    
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@admin_router.callback_query(F.data == "admin_back_to_games")
async def admin_back_to_games_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∏–≥—Ä"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–º–æ—Ç—Ä–∏–º –ª–∏ –º—ã –∏–≥—Ä—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    data = await state.get_data()
    tournament_id = data.get('viewing_tournament_id')
    
    if tournament_id:
        await show_games_page(callback.message, page=0, callback=callback, tournament_id=tournament_id, state=state)
    else:
        await show_games_page(callback.message, page=0, callback=callback)
    await callback.answer()


# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –°–ß–ï–¢–ê ====================

@admin_router.callback_query(F.data.startswith("admin_edit_score:"))
async def admin_edit_score_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    await state.update_data(editing_game_id=game_id)
    await state.set_state(AdminEditGameStates.EDIT_SCORE)
    
    games = await storage.load_games()
    game = None
    for g in games:
        if g.get('id') == game_id:
            game = g
            break
    
    current_score = game.get('score', '–ù–µ —É–∫–∞–∑–∞–Ω') if game else '–ù–µ —É–∫–∞–∑–∞–Ω'
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä—ã</b>\n\n"
        f"üÜî ID: <code>{game_id}</code>\n"
        f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: <b>{current_score}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>6:4, 6:2</code> (–¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç–æ–≤)\n"
        f"–∏–ª–∏\n"
        f"<code>6:4</code> (–¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞)\n\n"
        f"–ü—Ä–∏–º–µ—Ä—ã:\n"
        f"‚Ä¢ <code>6:4, 6:2</code>\n"
        f"‚Ä¢ <code>7:5, 6:4, 6:2</code>\n"
        f"‚Ä¢ <code>6:0</code>"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_view_game:{game_id}")
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

@admin_router.message(AdminEditGameStates.EDIT_SCORE, F.text)
async def admin_edit_score_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode="HTML")
        await state.clear()
        return
    
    new_score = message.text.strip()
    data = await state.get_data()
    game_id = data.get('editing_game_id')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    game_index = None
    for idx, g in enumerate(games):
        if g.get('id') == game_id:
            game = g
            game_index = idx
            break
    
    if not game:
        await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="HTML")
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Å—á–µ—Ç
    try:
        sets = [s.strip() for s in new_score.split(',')]
        for s in sets:
            parts = s.split(':')
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞")
            int(parts[0])
            int(parts[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
        games[game_index]['score'] = new_score
        games[game_index]['sets'] = sets
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–≤–æ–º—É —Å—á–µ—Ç—É
        team1_wins = 0
        team2_wins = 0
        
        for s in sets:
            parts = s.split(':')
            score1 = int(parts[0])
            score2 = int(parts[1])
            
            if score1 > score2:
                team1_wins += 1
            elif score2 > score1:
                team2_wins += 1
        
        team1_players = game.get('players', {}).get('team1', [])
        team2_players = game.get('players', {}).get('team2', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_id = None
        winner_name = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
        
        if team1_wins > team2_wins and team1_players:
            winner_id = team1_players[0]
            games[game_index]['winner_id'] = winner_id
            if winner_id in users:
                winner_name = f"{users[winner_id].get('first_name', '')} {users[winner_id].get('last_name', '')}".strip()
        elif team2_wins > team1_wins and team2_players:
            winner_id = team2_players[0]
            games[game_index]['winner_id'] = winner_id
            if winner_id in users:
                winner_name = f"{users[winner_id].get('first_name', '')} {users[winner_id].get('last_name', '')}".strip()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ games.json
        await storage.save_games(games)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ tournaments.json
        tournament_id = game.get('tournament_id')
        if tournament_id:
            tournaments = await storage.load_tournaments()
            if tournament_id in tournaments:
                tournament = tournaments[tournament_id]
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                if 'matches' in tournament:
                    for match in tournament['matches']:
                        # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ ID –∏–ª–∏ –ø–æ –∏–≥—Ä–æ–∫–∞–º
                        match_player1 = match.get('player1_id')
                        match_player2 = match.get('player2_id')
                        game_team1 = team1_players[0] if team1_players else None
                        game_team2 = team2_players[0] if team2_players else None
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∏–≥—Ä–æ–∫–∏ (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ)
                        if ((match_player1 == game_team1 and match_player2 == game_team2) or
                            (match_player1 == game_team2 and match_player2 == game_team1)):
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç, –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Ç—á–µ
                            match['score'] = new_score
                            match['winner_id'] = winner_id
                            match['status'] = 'completed'
                            if 'completed_at' not in match:
                                match['completed_at'] = datetime.now().isoformat()
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ç—á {match.get('id')} –≤ —Ç—É—Ä–Ω–∏—Ä–µ {tournament_id}")
                            break
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ tournaments.json
                    await storage.save_tournaments(tournaments)
                    logger.info(f"–¢—É—Ä–Ω–∏—Ä {tournament_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–µ—Ç–∫—É –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º —Ä–∞—É–Ω–¥—ã
                    from utils.tournament_manager import tournament_manager
                    await tournament_manager._rebuild_next_round(tournament_id)
                    await tournament_manager.advance_tournament_round(tournament_id)
        
        logger.info(f"–°—á–µ—Ç –∏–≥—Ä—ã {game_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_score}, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_id} ({winner_name})")
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–≥—Ä—ã", callback_data=f"admin_view_game:{game_id}")
        builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="admin_back_to_games")
        builder.adjust(1)
        
        success_text = (
            f"‚úÖ <b>–°—á–µ—Ç –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"üÜî ID: <code>{game_id}</code>\n"
            f"üìä –ù–æ–≤—ã–π —Å—á–µ—Ç: <b>{new_score}</b>\n"
            f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_name}</b>\n"
            f"üéØ –°—á–µ—Ç –ø–æ —Å–µ—Ç–∞–º: {team1_wins}:{team2_wins}"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è
        if tournament_id:
            success_text += f"\n\nüèÜ <i>–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</i>"
        
        await message.answer(
            success_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        
    except ValueError as e:
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_view_game:{game_id}")
        
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>6:4, 6:2</code>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞: {e}")
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—á–µ—Ç–∞:</b> {str(e)}",
            parse_mode="HTML"
        )
    
    await state.clear()


# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–ï–î–ò–ê ====================

@admin_router.callback_query(F.data.startswith("admin_edit_media:"))
async def admin_edit_media_handler(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    await state.update_data(editing_game_id=game_id)
    await state.set_state(AdminEditGameStates.EDIT_MEDIA)
    
    games = await storage.load_games()
    game = None
    for g in games:
        if g.get('id') == game_id:
            game = g
            break
    
    current_media = game.get('media_filename', '–ù–µ—Ç') if game else '–ù–µ—Ç'
    
    text = (
        f"üì∑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–≥—Ä—ã</b>\n\n"
        f"üÜî ID: <code>{game_id}</code>\n"
        f"üìÅ –¢–µ–∫—É—â–∏–π –º–µ–¥–∏–∞—Ñ–∞–π–ª: <code>{current_media}</code>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏–≥—Ä—ã.\n"
        f"–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç <code>—É–¥–∞–ª–∏—Ç—å</code> —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_view_game:{game_id}")
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@admin_router.message(AdminEditGameStates.EDIT_MEDIA)
async def admin_edit_media_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", parse_mode="HTML")
        await state.clear()
        return
    
    data = await state.get_data()
    game_id = data.get('editing_game_id')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    game_index = None
    for idx, g in enumerate(games):
        if g.get('id') == game_id:
            game = g
            game_index = idx
            break
    
    if not game:
        await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", parse_mode="HTML")
        await state.clear()
        return
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–≥—Ä—ã", callback_data=f"admin_view_game:{game_id}")
    builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="admin_back_to_games")
    builder.adjust(1)
    
    if message.text and message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
        old_media = games[game_index].get('media_filename')
        games[game_index]['media_filename'] = None
        await storage.save_games(games)
        
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        if old_media:
            try:
                from config.paths import GAMES_PHOTOS_DIR
                file_path = os.path.join(GAMES_PHOTOS_DIR, old_media)
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª: {old_media}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª: {e}")
        
        await message.answer(
            f"‚úÖ <b>–ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏–≥—Ä—ã —É–¥–∞–ª–µ–Ω!</b>\n\n"
            f"üÜî ID: <code>{game_id}</code>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    elif message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        from utils.media import save_media_file
        photo = message.photo[-1]
        
        try:
            filename = await save_media_file(message.bot, photo.file_id, 'photo')
            games[game_index]['media_filename'] = filename
            await storage.save_games(games)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–≥—Ä—ã {game_id}: {filename}")
            
            await message.answer_photo(
                photo=photo.file_id,
                caption=f"‚úÖ <b>–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\nüÜî ID: <code>{game_id}</code>",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ: {e}")
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ:</b> {str(e)}",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
    elif message.video:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
        from utils.media import save_media_file
        video = message.video
        
        try:
            filename = await save_media_file(message.bot, video.file_id, 'video')
            games[game_index]['media_filename'] = filename
            await storage.save_games(games)
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∏–≥—Ä—ã {game_id}: {filename}")
            
            await message.answer_video(
                video=video.file_id,
                caption=f"‚úÖ <b>–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∏–≥—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\nüÜî ID: <code>{game_id}</code>",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏–¥–µ–æ: {e}")
            await message.answer(
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–¥–µ–æ:</b> {str(e)}",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
    else:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <code>—É–¥–∞–ª–∏—Ç—å</code>",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    
    await state.clear()


# ==================== –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ë–ï–î–ò–¢–ï–õ–Ø ====================

@admin_router.callback_query(F.data.startswith("admin_edit_winner:"))
async def admin_edit_winner_handler(callback: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g.get('id') == game_id:
            game = g
            break
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    game_type = game.get('type', 'single')
    team1 = game.get('players', {}).get('team1', [])
    team2 = game.get('players', {}).get('team2', [])
    
    def get_team_names(team_ids):
        names = []
        for pid in team_ids:
            user = users.get(pid, {})
            name = f"{user.get('first_name', '')} {user.get('last_name', '')}".strip() or pid
            names.append(name)
        return " + ".join(names) if names else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    team1_name = get_team_names(team1)
    team2_name = get_team_names(team2)
    
    text = (
        f"üèÜ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã</b>\n\n"
        f"üÜî ID: <code>{game_id}</code>\n"
        f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: <b>{game.get('score', '–ù–µ—Ç —Å—á–µ—Ç–∞')}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:"
    )
    
    builder = InlineKeyboardBuilder()
    
    if game_type == 'double':
        builder.button(text=f"ü•á –ö–æ–º–∞–Ω–¥–∞ 1: {team1_name}", callback_data=f"admin_set_winner:{game_id}:team1")
        builder.button(text=f"ü•á –ö–æ–º–∞–Ω–¥–∞ 2: {team2_name}", callback_data=f"admin_set_winner:{game_id}:team2")
    else:
        builder.button(text=f"ü•á {team1_name}", callback_data=f"admin_set_winner:{game_id}:team1")
        builder.button(text=f"ü•á {team2_name}", callback_data=f"admin_set_winner:{game_id}:team2")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_view_game:{game_id}")
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_set_winner:"))
async def admin_set_winner_handler(callback: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    parts = callback.data.split(":")
    game_id = parts[1]
    winner_team = parts[2]  # 'team1' –∏–ª–∏ 'team2'
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    game_index = None
    for idx, g in enumerate(games):
        if g.get('id') == game_id:
            game = g
            game_index = idx
            break
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if winner_team == 'team1':
        winner_id = game.get('players', {}).get('team1', [None])[0]
    else:
        winner_id = game.get('players', {}).get('team2', [None])[0]
    
    if winner_id:
        games[game_index]['winner_id'] = winner_id
        await storage.save_games(games)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        if winner_id in users:
            winner_name = f"{users[winner_id].get('first_name', '')} {users[winner_id].get('last_name', '')}".strip()
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ tournaments.json
        tournament_id = game.get('tournament_id')
        if tournament_id:
            tournaments = await storage.load_tournaments()
            if tournament_id in tournaments:
                tournament = tournaments[tournament_id]
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ
                if 'matches' in tournament:
                    team1_players = game.get('players', {}).get('team1', [])
                    team2_players = game.get('players', {}).get('team2', [])
                    game_team1 = team1_players[0] if team1_players else None
                    game_team2 = team2_players[0] if team2_players else None
                    
                    for match in tournament['matches']:
                        match_player1 = match.get('player1_id')
                        match_player2 = match.get('player2_id')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∏–≥—Ä–æ–∫–∏ (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ)
                        if ((match_player1 == game_team1 and match_player2 == game_team2) or
                            (match_player1 == game_team2 and match_player2 == game_team1)):
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Ç—á–µ
                            match['winner_id'] = winner_id
                            match['status'] = 'completed'
                            if 'completed_at' not in match:
                                match['completed_at'] = datetime.now().isoformat()
                            logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞ {match.get('id')} –≤ —Ç—É—Ä–Ω–∏—Ä–µ {tournament_id}")
                            break
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ tournaments.json
                    await storage.save_tournaments(tournaments)
                    logger.info(f"–¢—É—Ä–Ω–∏—Ä {tournament_id} –æ–±–Ω–æ–≤–ª–µ–Ω")
                    
                    # –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Å–µ—Ç–∫—É –∏ –ø—Ä–æ–¥–≤–∏–≥–∞–µ–º —Ä–∞—É–Ω–¥—ã
                    from utils.tournament_manager import tournament_manager
                    await tournament_manager._rebuild_next_round(tournament_id)
                    await tournament_manager.advance_tournament_round(tournament_id)
        
        logger.info(f"–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä—ã {game_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {winner_id} ({winner_name})")
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–≥—Ä—ã", callback_data=f"admin_view_game:{game_id}")
        builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="admin_back_to_games")
        builder.adjust(1)
        
        success_text = (
            f"‚úÖ <b>–ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"üÜî ID: <code>{game_id}</code>\n"
            f"üèÜ –ù–æ–≤—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: <b>{winner_name}</b> (–ö–æ–º–∞–Ω–¥–∞ {winner_team[-1]})"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è
        if tournament_id:
            success_text += f"\n\nüèÜ <i>–î–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ —Ç–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã</i>"
        
        try:
            await callback.message.edit_text(
                success_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await callback.message.answer(
                success_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
    else:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
    
    await callback.answer()


# ==================== –£–î–ê–õ–ï–ù–ò–ï –ò–ì–†–´ ====================

@admin_router.callback_query(F.data.startswith("admin_delete_game:"))
async def admin_delete_game_handler(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    
    text = (
        f"‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã</b>\n\n"
        f"üÜî ID: <code>{game_id}</code>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É?\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ <b>–Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å</b>!"
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_game:{game_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"admin_view_game:{game_id}")
    builder.adjust(1)
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()


@admin_router.callback_query(F.data.startswith("admin_confirm_delete_game:"))
async def admin_confirm_delete_game_handler(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã"""
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    game_to_delete = None
    new_games = []
    for g in games:
        if g.get('id') == game_id:
            game_to_delete = g
        else:
            new_games.append(g)
    
    if game_to_delete:
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        media_filename = game_to_delete.get('media_filename')
        if media_filename:
            try:
                from config.paths import GAMES_PHOTOS_DIR
                file_path = os.path.join(GAMES_PHOTOS_DIR, media_filename)
                if os.path.exists(file_path):
                    os.remove(file_path)
                    logger.info(f"–£–¥–∞–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª: {media_filename}")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –∏–≥—Ä–∞, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ tournaments.json
        tournament_id = game_to_delete.get('tournament_id')
        if tournament_id:
            tournaments = await storage.load_tournaments()
            if tournament_id in tournaments:
                tournament = tournaments[tournament_id]
                # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
                if 'matches' in tournament:
                    team1_players = game_to_delete.get('players', {}).get('team1', [])
                    team2_players = game_to_delete.get('players', {}).get('team2', [])
                    game_team1 = team1_players[0] if team1_players else None
                    game_team2 = team2_players[0] if team2_players else None
                    
                    for match in tournament['matches']:
                        match_player1 = match.get('player1_id')
                        match_player2 = match.get('player2_id')
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞—é—Ç –ª–∏ –∏–≥—Ä–æ–∫–∏ (–≤ –ª—é–±–æ–º –ø–æ—Ä—è–¥–∫–µ)
                        if ((match_player1 == game_team1 and match_player2 == game_team2) or
                            (match_player1 == game_team2 and match_player2 == game_team1)):
                            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
                            match['winner_id'] = None
                            match['score'] = None
                            match['status'] = 'pending'
                            if 'completed_at' in match:
                                del match['completed_at']
                            logger.info(f"–°–±—Ä–æ—à–µ–Ω –º–∞—Ç—á {match.get('id')} –≤ —Ç—É—Ä–Ω–∏—Ä–µ {tournament_id}")
                            break
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ tournaments.json
                    await storage.save_tournaments(tournaments)
                    logger.info(f"–¢—É—Ä–Ω–∏—Ä {tournament_id} –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await storage.save_games(new_games)
        logger.info(f"–ò–≥—Ä–∞ {game_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data="admin_back_to_games")
        
        success_text = f"‚úÖ <b>–ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!</b>\n\nüÜî ID: <code>{game_id}</code>"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ, –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π
        if tournament_id:
            success_text += f"\n\nüèÜ <i>–ú–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ —Å–±—Ä–æ—à–µ–Ω</i>"
        
        try:
            await callback.message.edit_text(
                success_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await callback.message.answer(
                success_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
    else:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    
    await callback.answer()
