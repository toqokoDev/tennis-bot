from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import os
import logging

from services.storage import storage
from utils.admin import get_confirmation_keyboard, is_admin

admin_router = Router()
logger = logging.getLogger(__name__)

async def safe_edit_message(callback: CallbackQuery, text: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    """
    try:
        await callback.message.edit_text(text, reply_markup=reply_markup)
        return True
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        try:
            await callback.message.delete()
        except:
            pass
        try:
            await callback.message.answer(text, reply_markup=reply_markup)
            return True
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
            return False

async def safe_send_message(message: Message, text: str, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        await message.answer(text, reply_markup=reply_markup)
        return True
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        return False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
@admin_router.message(Command("tournaments"))
async def tournaments_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await safe_send_message(message, "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    text = "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for tournament_id, tournament_data in tournaments.items():
        text += f"üéØ {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        text += f"üìÖ –î–∞—Ç–∞: {tournament_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n"
        text += f"üÜî ID: {tournament_id}\n"
        text += "‚îÄ" * 20 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")
    builder.button(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_view_applications")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_delete_tournament_menu")
    builder.adjust(1)
    
    await safe_send_message(message, text, builder.as_markup())

# –ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data == "admin_create_tournament")
async def create_tournament_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await safe_edit_message(
        callback,
        "üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "/create_tournament –Ω–∞–∑–≤–∞–Ω–∏–µ;–¥–∞—Ç–∞;–º–µ—Å—Ç–æ;–æ–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "/create_tournament –ö—É–±–æ–∫ –û—Å–µ–Ω–∏;2024-10-15;–°–ø–æ—Ä—Ç–∫–æ–º–ø–ª–µ–∫—Å;–û—Å–µ–Ω–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä –ø–æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–º—É —Ç–µ–Ω–Ω–∏—Å—É"
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.message(Command("create_tournament"))
async def create_tournament_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        parts = message.text.split(' ', 1)[1].split(';')
        if len(parts) < 3:
            await safe_send_message(message, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –§–æ—Ä–º–∞—Ç: –Ω–∞–∑–≤–∞–Ω–∏–µ;–¥–∞—Ç–∞;–º–µ—Å—Ç–æ;–æ–ø–∏—Å–∞–Ω–∏–µ")
            return
        
        name = parts[0].strip()
        date = parts[1].strip()
        location = parts[2].strip()
        description = parts[3].strip() if len(parts) > 3 else ""
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
        tournaments = await storage.load_tournaments()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
        tournament_id = f"tournament_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        tournaments[tournament_id] = {
            'name': name,
            'date': date,
            'location': location,
            'description': description,
            'created_at': datetime.now().isoformat(),
            'created_by': message.from_user.id,
            'participants': {},
            'status': 'active'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        await storage.save_tournaments(tournaments)
                
        await safe_send_message(
            message,
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üìÖ –î–∞—Ç–∞: {date}\n"
            f"üìç –ú–µ—Å—Ç–æ: {location}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"üÜî ID: {tournament_id}"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        await safe_send_message(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")

# –ú–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫
@admin_router.callback_query(F.data == "admin_view_applications")
async def view_applications_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await storage.load_tournament_applications()
        
    if not applications:
        await callback.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã")
        return
    
    text = "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for app_id, app_data in applications.items():
        text += f"üë§ {app_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üìû {app_data.get('phone', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üéØ –¢—É—Ä–Ω–∏—Ä: {app_data.get('tournament_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"‚è∞ –ü–æ–¥–∞–Ω–∞: {app_data.get('applied_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += f"üÜî ID –∑–∞—è–≤–∫–∏: {app_id}\n"
        text += "‚îÄ" * 20 + "\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_accept_application_menu")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_reject_application_menu")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_tournaments")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()

# –ú–µ–Ω—é –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data == "admin_accept_application_menu")
async def accept_application_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await storage.load_tournament_applications()
    
    if not applications:
        await callback.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    builder = InlineKeyboardBuilder()
    for app_id, app_data in applications.items():
        text = f"‚úÖ {app_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {app_data.get('tournament_name', '')}"
        builder.button(text=text, callback_data=f"admin_accept_application:{app_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_view_applications")
    builder.adjust(1)
    
    await safe_edit_message(callback, "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:", builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data.startswith("admin_accept_application:"))
async def accept_application_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    app_id = callback.data.split(':')[1]
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    if app_id not in applications:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    app_data = applications[app_id]
    tournament_id = app_data.get('tournament_id')
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    applications[app_id]['status'] = 'accepted'
    applications[app_id]['accepted_at'] = datetime.now().isoformat()
    applications[app_id]['accepted_by'] = callback.message.chat.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä
    user_id = app_data.get('user_id')
    tournaments[tournament_id]['participants'][str(user_id)] = {
        'name': app_data.get('user_name'),
        'phone': app_data.get('phone'),
        'applied_at': app_data.get('applied_at'),
        'accepted_at': datetime.now().isoformat(),
        'accepted_by': callback.message.chat.id
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await storage.save_tournaments(tournaments)
    await storage.save_tournament_applications(applications)
    
    await safe_edit_message(
        callback,
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {app_data.get('user_name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app_data.get('phone')}\n"
        f"üéØ –¢—É—Ä–Ω–∏—Ä: {app_data.get('tournament_name')}\n\n"
        f"–£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä."
    )
    await callback.answer()

# –ú–µ–Ω—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data == "admin_reject_application_menu")
async def reject_application_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await storage.load_tournament_applications()
    
    if not applications:
        await callback.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫")
        return
    
    builder = InlineKeyboardBuilder()
    for app_id, app_data in applications.items():
        text = f"‚ùå {app_data.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} - {app_data.get('tournament_name', '')}"
        builder.button(text=text, callback_data=f"admin_reject_application:{app_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_view_applications")
    builder.adjust(1)
    
    await safe_edit_message(callback, "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@admin_router.callback_query(F.data.startswith("admin_reject_application:"))
async def reject_application_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    app_id = callback.data.split(':')[1]
    applications = await storage.load_tournament_applications()
    
    if app_id not in applications:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    app_data = applications[app_id]
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    del applications[app_id]
    await storage.save_tournament_applications(applications)
    
    await safe_edit_message(
        callback,
        f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n"
        f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫: {app_data.get('user_name')}\n"
        f"üéØ –¢—É—Ä–Ω–∏—Ä: {app_data.get('tournament_name')}\n\n"
        f"–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
    )
    await callback.answer()

# –ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data == "admin_delete_tournament_menu")
async def delete_tournament_menu(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await callback.answer("üìã –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")
        return
    
    builder = InlineKeyboardBuilder()
    for tournament_id, tournament_data in tournaments.items():
        text = f"üóëÔ∏è {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({tournament_data.get('date', '')})"
        builder.button(text=text, callback_data=f"admin_delete_tournament:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_tournaments")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data.startswith("admin_delete_tournament:"))
async def delete_tournament_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = await get_confirmation_keyboard("delete_tournament", tournament_id)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?\n\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üìÖ –î–∞—Ç–∞: {tournament_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('location', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ!",
        keyboard
    )
    await callback.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@admin_router.callback_query(F.data.startswith("admin_confirm_delete_tournament:"))
async def confirm_delete_tournament(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    del tournaments[tournament_id]
    await storage.save_tournaments(tournaments)
    
    await safe_edit_message(
        callback,
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω!\n\n"
        f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üìÖ –î–∞—Ç–∞: {tournament_data.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
@admin_router.callback_query(F.data == "admin_back_to_tournaments")
async def back_to_tournaments(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await safe_edit_message(callback, "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    text = "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for tournament_id, tournament_data in tournaments.items():
        text += f"üéØ {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        text += f"üìÖ –î–∞—Ç–∞: {tournament_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n"
        text += f"üÜî ID: {tournament_id}\n"
        text += "‚îÄ" * 20 + "\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")
    builder.button(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_view_applications")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_delete_tournament_menu")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()
    
# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_router.message(Command("banned_users"))
async def banned_users_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await safe_send_message(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, ban_data in banned_users.items():
        text += f"üë§ {ban_data.get('first_name', '')} {ban_data.get('last_name', '')}\n"
        text += f"üìû {ban_data.get('phone', '')}\n"
        text += f"üÜî ID: {user_id}\n"
        text += f"‚è∞ –ó–∞–±–∞–Ω–µ–Ω: {ban_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += "‚îÄ" * 20 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban_menu")
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤", callback_data="admin_clear_all_bans")
    builder.adjust(1)
    
    await safe_send_message(message, text, builder.as_markup())

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(Command("unban_user"))
async def unban_user_cmd(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await show_unban_menu(message)

async def show_unban_menu(message: Message):
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await safe_send_message(message, "üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, ban_data in banned_users.items():
        name = f"{ban_data.get('first_name', '')} {ban_data.get('last_name', '')}"
        builder.button(text=f"üîì {name}", callback_data=f"admin_unban_user:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_send_message(
        message,
        "üîì –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        builder.as_markup()
    )

# –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
@admin_router.callback_query(F.data == "admin_cancel")
async def cancel_action(callback: CallbackQuery):
    await safe_edit_message(callback, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
def get_admin_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_banned_list")
    builder.button(text="üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="admin_tournaments")
    builder.adjust(1)
    return builder.as_markup()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@admin_router.callback_query(F.data == "admin_tournaments")
async def tournaments_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await safe_edit_message(callback, "üìã –°–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    
    text = "üèÜ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã:\n\n"
    for tournament_id, tournament_data in tournaments.items():
        text += f"üéØ {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        text += f"üìÖ –î–∞—Ç–∞: {tournament_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n"
        text += f"üÜî ID: {tournament_id}\n"
        text += "‚îÄ" * 20 + "\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìù –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_create_tournament")
    builder.button(text="üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏", callback_data="admin_view_applications")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="admin_delete_tournament_menu")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    if not await is_admin(message.from_user.id):
        await safe_send_message(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    await safe_send_message(
        message,
        "üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        get_admin_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ - –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
@admin_router.callback_query(F.data == "admin_banned_list")
async def banned_list_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await callback.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    text = "üö´ –ó–∞–±–∞–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for user_id, ban_data in banned_users.items():
        text += f"üë§ {ban_data.get('first_name', '')} {ban_data.get('last_name', '')}\n"
        text += f"üìû {ban_data.get('phone', '')}\n"
        text += f"üÜî ID: {user_id}\n"
        text += f"‚è∞ –ó–∞–±–∞–Ω–µ–Ω: {ban_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        text += "‚îÄ" * 20 + "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∞–º–∏
    builder = InlineKeyboardBuilder()
    builder.button(text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_unban_menu")
    builder.button(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤", callback_data="admin_clear_all_bans")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, text, builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_unban_menu")
async def unban_menu_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    banned_users = await storage.load_banned_users()
    
    if not banned_users:
        await callback.answer("üìã –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, ban_data in banned_users.items():
        name = f"{ban_data.get('first_name', '')} {ban_data.get('last_name', '')}"
        builder.button(text=f"üîì {name}", callback_data=f"admin_unban_user:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_banned_list")
    builder.adjust(1)
    
    await safe_edit_message(
        callback,
        "üîì –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
        builder.as_markup()
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_clear_all_bans")
async def clear_all_bans_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    keyboard = await get_confirmation_keyboard("clear_all_bans")
    await safe_edit_message(
        callback,
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –í–ï–°–¨ —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑–±–∞–Ω–∏—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—á–∏—Å—Ç–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –±–∞–Ω–æ–≤.\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_confirm_clear_all_bans")
async def confirm_clear_all_bans(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤
    await storage.save_banned_users({})
    
    await safe_edit_message(callback, "‚úÖ –í—Å–µ –±–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_unban_user:"))
async def unban_user_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(':')[1]
    banned_users = await storage.load_banned_users()
    
    if user_id not in banned_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤")
        return
    
    user_data = banned_users[user_id]
    keyboard = await get_confirmation_keyboard("unban_user", user_id)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üÜî ID: {user_id}\n"
        f"‚è∞ –ó–∞–±–∞–Ω–µ–Ω: {user_data.get('banned_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ.",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_unban_user:"))
async def confirm_unban_user(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(':')[1]
    banned_users = await storage.load_banned_users()
    
    if user_id not in banned_users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ –±–∞–Ω–æ–≤")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –±–∞–Ω–æ–≤
    user_data = banned_users.pop(user_id)
    await storage.save_banned_users(banned_users)
    
    await safe_edit_message(
        callback,
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data.get('first_name', '')} {user_data.get('last_name', '')} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω!\n"
        f"üÜî ID: {user_id}\n\n"
        "–¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–æ–≤–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ."
    )
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_user_menu")
async def delete_user_menu(callback: CallbackQuery):
    users = await storage.load_users()
    
    if not users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, user_data in users.items():
        name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}"
        builder.button(text=f"üóëÔ∏è {name}", callback_data=f"admin_select_user:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_game_menu")
async def delete_game_menu(callback: CallbackQuery):
    games = await storage.load_games()
    
    if not games:
        await callback.answer("‚ùå –ù–µ—Ç –∏–≥—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for game in games[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –∏–≥—Ä
        game_id = game.get('id', '')
        date = game.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        builder.button(text=f"üéæ {date}", callback_data=f"admin_select_game:{game_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üéæ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_offer_menu")
async def delete_offer_menu(callback: CallbackQuery):
    users = await storage.load_users()
    offers_list = []
    
    for user_id, user_data in users.items():
        if 'games' in user_data and user_data['games']:
            for game_offer in user_data['games']:
                if game_offer.get('active', True):
                    offers_list.append({
                        'user_id': user_id,
                        'offer_id': game_offer.get('id'),
                        'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
                        'date': game_offer.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    })
    
    if not offers_list:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä")
        return
    
    builder = InlineKeyboardBuilder()
    for offer in offers_list[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        text = f"üìã {offer['user_name']} - {offer['date']}"
        callback_data = f"admin_select_offer:{offer['user_id']}:{offer['offer_id']}"
        builder.button(text=text, callback_data=callback_data)
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_vacation_menu")
async def delete_vacation_menu(callback: CallbackQuery):
    users = await storage.load_users()
    vacation_users = []
    
    for user_id, user_data in users.items():
        if user_data.get('vacation_tennis'):
            vacation_users.append({
                'user_id': user_id,
                'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
                'start': user_data.get('vacation_start', ''),
                'end': user_data.get('vacation_end', '')
            })
    
    if not vacation_users:
        await callback.answer("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ç–ø—É—Å–∫–µ")
        return
    
    builder = InlineKeyboardBuilder()
    for user in vacation_users:
        text = f"üèñÔ∏è {user['user_name']} ({user['start']} - {user['end']})"
        builder.button(text=text, callback_data=f"admin_select_vacation:{user['user_id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üèñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–ø—É—Å–∫–∞:", builder.as_markup())
    await callback.answer()

@admin_router.callback_query(F.data == "admin_delete_subscription_menu")
async def delete_subscription_menu(callback: CallbackQuery):
    users = await storage.load_users()
    sub_users = []
    
    for user_id, user_data in users.items():
        if user_data.get('subscription', {}).get('active'):
            sub_users.append({
                'user_id': user_id,
                'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
                'until': user_data['subscription'].get('until', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            })
    
    if not sub_users:
        await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫")
        return
    
    builder = InlineKeyboardBuilder()
    for user in sub_users:
        text = f"üîî {user['user_name']} (–¥–æ {user['until']})"
        builder.button(text=text, callback_data=f"admin_select_subscription:{user['user_id']}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await safe_edit_message(callback, "üîî –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:", builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
@admin_router.callback_query(F.data.startswith("admin_select_user:"))
async def select_user(callback: CallbackQuery):
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —É–¥–∞–ª–µ–Ω–∏—è –∏ –±–∞–Ω–∞
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –£–¥–∞–ª–∏—Ç—å", callback_data=f"admin_confirm_delete_user:{user_id}")
    builder.button(text="üö´ –ó–∞–±–∞–Ω–∏—Ç—å", callback_data=f"admin_ban_user:{user_id}")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel")
    builder.adjust(2)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üèÜ –†–µ–π—Ç–∏–Ω–≥: {user_data.get('rating_points', 0)}\n"
        f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user_data.get('games_played', 0)}\n"
        f"üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(user_data.get('games', []))}\n\n"
        "üö´ –ó–∞–±–∞–Ω - —É–¥–∞–ª–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–∏—Ç –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        builder.as_markup()
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_game:"))
async def select_game(callback: CallbackQuery):
    game_id = callback.data.split(':')[1]
    games = await storage.load_games()
    users = await storage.load_users()
    
    game_to_delete = None
    for game in games:
        if game.get('id') == game_id:
            game_to_delete = game
            break
    
    if not game_to_delete:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    player_names = []
    for team in ['team1', 'team2']:
        for player_id in game_to_delete.get('players', {}).get(team, []):
            if player_id in users:
                user = users[player_id]
                player_names.append(f"{user.get('first_name', '')} {user.get('last_name', '')}")
    
    keyboard = await get_confirmation_keyboard("delete_game", game_id)
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É?\n\n"
        f"üÜî ID: {game_id}\n"
        f"üìÖ –î–∞—Ç–∞: {game_to_delete.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üéØ –¢–∏–ø: {game_to_delete.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üìä –°—á–µ—Ç: {game_to_delete.get('score', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üë• –ò–≥—Ä–æ–∫–∏: {', '.join(player_names)}\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç –æ—Ç–∫–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_vacation:"))
async def select_vacation(callback: CallbackQuery):
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    keyboard = await get_confirmation_keyboard("delete_vacation", user_id)
    
    vacation_info = "‚ùå –û—Ç–ø—É—Å–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    if user_data.get('vacation_tennis'):
        vacation_info = f"‚úÖ –í –æ—Ç–ø—É—Å–∫–µ\nüìÖ {user_data.get('vacation_start', '')} - {user_data.get('vacation_end', '')}"
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üèñÔ∏è –°—Ç–∞—Ç—É—Å: {vacation_info}",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_subscription:"))
async def select_subscription(callback: CallbackQuery):
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    keyboard = await get_confirmation_keyboard("delete_subscription", user_id)
    
    sub_info = "‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞"
    if user_data.get('subscription', {}).get('active'):
        sub_info = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {user_data['subscription'].get('until', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üìû {user_data.get('phone', '')}\n"
        f"üîî –ü–æ–¥–ø–∏—Å–∫–∞: {sub_info}",
        keyboard
    )
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_select_offer:"))
async def select_offer(callback: CallbackQuery):
    try:
        parts = callback.data.split(':')
        user_id = parts[1]
        offer_id = parts[2]
    except IndexError:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID")
        return
    
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    offer_to_delete = None
    
    for game_offer in user_data.get('games', []):
        if str(game_offer.get('id')) == offer_id:
            offer_to_delete = game_offer
            break
    
    if not offer_to_delete:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    keyboard = await get_confirmation_keyboard("delete_offer", f"{user_id}:{offer_id}")
    
    await safe_edit_message(
        callback,
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã?\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üÜî ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {offer_id}\n"
        f"üéØ –°–ø–æ—Ä—Ç: {offer_to_delete.get('sport', '–ù–∞—Å—Ç–æ–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å')}\n"
        f"üìÖ –î–∞—Ç–∞: {offer_to_delete.get('date', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {offer_to_delete.get('time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {offer_to_delete.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        "–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        keyboard
    )
    await callback.answer()

# –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@admin_router.callback_query(F.data == "admin_back_to_main")
async def back_to_main(callback: CallbackQuery):
    await safe_edit_message(
        callback,
        "üë®‚Äçüíº –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å:\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:",
        get_admin_keyboard()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
@admin_router.callback_query(F.data.startswith("admin_confirm_delete_user:"))
async def confirm_delete_user(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    games = await storage.load_games()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∏–≥—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    new_games = []
    for game in games:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∏–≥—Ä–µ
        user_in_game = False
        for team in ['team1', 'team2']:
            if user_id in game.get('players', {}).get(team, []):
                user_in_game = True
                break
        
        if user_in_game:
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã
            for player_id, rating_change in game.get('rating_changes', {}).items():
                if player_id in users:
                    users[player_id]['rating_points'] -= rating_change
                    users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
                    # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –≤—ã–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ
                    if (user_id in game.get('players', {}).get('team1', []) and 
                        game.get('score', '').startswith('6')):
                        users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
        else:
            new_games.append(game)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if user_data.get('photo_path'):
        try:
            os.remove(user_data['photo_path'])
        except:
            pass
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del users[user_id]
    
    await storage.save_users(users)
    await storage.save_games(new_games)
    
    await safe_edit_message(callback, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω! –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_game:"))
async def confirm_delete_game(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    game_id = callback.data.split(':')[1]
    users = await storage.load_users()
    games = await storage.load_games()
    
    game_to_delete = None
    new_games = []
    for game in games:
        if game.get('id') == game_id:
            game_to_delete = game
        else:
            new_games.append(game)
    
    if not game_to_delete:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –û—Ç–∫–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for player_id, rating_change in game_to_delete.get('rating_changes', {}).items():
        if player_id in users:
            users[player_id]['rating_points'] -= rating_change
            users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
            # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–±–µ–¥ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª –≤ –≤—ã–∏–≥—Ä–∞–≤—à–µ–π –∫–æ–º–∞–Ω–¥–µ
            if (player_id in game_to_delete.get('players', {}).get('team1', []) and 
                game_to_delete.get('score', '').startswith('6')):
                users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
    await storage.save_games(new_games)
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –ò–≥—Ä–∞ {game_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞! –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç–∫–∞—á–µ–Ω—ã.")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_vacation:"))
async def confirm_delete_vacation(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Ç–ø—É—Å–∫–µ
    users[user_id]['vacation_tennis'] = False
    users[user_id].pop('vacation_start', None)
    users[user_id].pop('vacation_end', None)
    users[user_id].pop('vacation_comment', None)
    
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –û—Ç–ø—É—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_subscription:"))
async def confirm_delete_subscription(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    users[user_id].pop('subscription', None)
    
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_confirm_delete_offer:"))
async def confirm_delete_offer(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤")
        return
    
    try:
        user_id, offer_id = callback.data.split(':')[1], callback.data.split(':')[2]
    except:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ID")
        return
    
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_games = users[user_id].get('games', [])
    new_games = [game for game in user_games if str(game.get('id')) != offer_id]
    users[user_id]['games'] = new_games
    
    await storage.save_users(users)
    
    await safe_edit_message(callback, f"‚úÖ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ {offer_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!")
    await callback.answer()

@admin_router.callback_query(F.data.startswith("admin_ban_user:"))
async def ban_user_handler(callback: CallbackQuery):
    if not await is_admin(callback.message.chat.id):
        await callback.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    user_id = callback.data.split(':')[1]
    users = await storage.load_users()
    
    if user_id not in users:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = users[user_id]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    banned_users = await storage.load_banned_users()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–Ω –ª–∏—Å—Ç
    banned_users[str(user_id)] = {
        'first_name': user_data.get('first_name', ''),
        'last_name': user_data.get('last_name', ''),
        'username': user_data.get('username', ''),
        'phone': user_data.get('phone', ''),
        'banned_by': callback.message.chat.id,
        'banned_at': datetime.now().isoformat()
    }
    await storage.save_banned_users(banned_users)
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–∞ –∂–µ –ª–æ–≥–∏–∫–∞ —á—Ç–æ –∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏)
    games = await storage.load_games()
    new_games = []
    for game in games:
        user_in_game = False
        for team in ['team1', 'team2']:
            if user_id in game.get('players', {}).get(team, []):
                user_in_game = True
                break
        
        if user_in_game:
            for player_id, rating_change in game.get('rating_changes', {}).items():
                if player_id in users:
                    users[player_id]['rating_points'] -= rating_change
                    users[player_id]['games_played'] = max(0, users[player_id].get('games_played', 0) - 1)
                    if (user_id in game.get('players', {}).get('team1', []) and 
                        game.get('score', '').startswith('6')):
                        users[player_id]['games_wins'] = max(0, users[player_id].get('games_wins', 0) - 1)
        else:
            new_games.append(game)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è
    if user_data.get('photo_path'):
        try:
            os.remove(user_data['photo_path'])
        except:
            pass
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    del users[user_id]
    
    await storage.save_users(users)
    await storage.save_games(new_games)
    
    await safe_edit_message(callback, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω!")
    await callback.answer()
