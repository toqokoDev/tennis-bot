from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
from datetime import datetime

from services.storage import storage

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
tournament_pages = {}
my_tournaments_pages = {}
my_applications_pages = {}

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
@router.message(Command("tournaments"))
async def tournaments_main(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    text = (
        f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã\n\n"
        f"–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç: {len(active_tournaments)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
        f"–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!\n\n"
        f"üìã –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, "
        f"–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="view_tournaments_list:0")
    builder.button(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications_list:0")
    builder.button(text="üéØ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="my_tournaments_list:0")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π (–ø–æ –æ–¥–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
@router.callback_query(F.data.startswith("view_tournaments_list:"))
async def view_tournaments_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ –æ–¥–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    page = int(callback.data.split(':')[1])
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    if not active_tournaments:
        await callback.message.edit_text("üèÜ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tournament_ids = list(active_tournaments.keys())
    tournament_pages[callback.from_user.id] = tournament_ids
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = len(tournament_ids)
    
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    tournament_id = tournament_ids[page]
    tournament_data = active_tournaments[tournament_id]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    text = f"üèÜ –¢—É—Ä–Ω–∏—Ä {page + 1}/{total_pages}\n\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: 8\n"
    
    if tournament_data.get('description'):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n- –í–∑–Ω–æ—Å –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ - 800 —Ä—É–±.\n"+"- –ò–≥—Ä—ã –ø—Ä–æ—Ö–æ–¥—è—Ç –Ω–∞ –∫–æ—Ä—Ç–∞—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ —Å –æ–ø–ª–∞—Ç–æ–π –∫–æ—Ä—Ç–∞ 50/50%.\n"  +"- –í—Ä–µ–º—è –Ω–∞ –∫–∞–∂–¥—ã–π –∫—Ä—É–≥ —Ç—É—Ä–Ω–∏—Ä–∞ - 1 –Ω–µ–¥–µ–ª—è.\n"+"- –ò–≥—Ä—ã –∏–¥—É—Ç –∑–∞ –∫–∞–∂–¥–æ–µ –º–µ—Å—Ç–æ, –ø–æ—ç—Ç–æ–º—É –≤ —Ç—É—Ä–Ω–∏—Ä–µ - 3 –∏–≥—Ä—ã.\n"+"- –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –≤ —Ç—É—Ä–Ω–∏—Ä–µ –ø–æ–ª—É—á–∞–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ.\n"
    
    if tournament_data.get('rules'):
        text += f"üìã –ü—Ä–∞–≤–∏–ª–∞: {tournament_data.get('rules')}\n"
    
    if tournament_data.get('prize_fund'):
        text += f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament_data.get('prize_fund')}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    
    existing_application = None
    for app_id, app_data in applications.items():
        if (app_data.get('user_id') == user_id and 
            app_data.get('tournament_id') == tournament_id):
            existing_application = app_data
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    is_registered = str(user_id) in tournament_data.get('participants', {})
    
    if existing_application:
        text += f"\nüìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {'‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' if existing_application.get('status') == 'pending' else '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞' if existing_application.get('status') == 'accepted' else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}\n"
    elif is_registered:
        text += "\n‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"view_tournaments_list:{page-1}")
        if page < total_pages - 1:
            builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"view_tournaments_list:{page+1}")
    
    # –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    if not existing_application and not is_registered:
        builder.button(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"apply_tournament:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if total_pages > 1:
        builder.adjust(2)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    if not existing_application and not is_registered:
        builder.adjust(1)  # –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    builder.adjust(1)  # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
@router.callback_query(F.data.startswith("apply_tournament:"))
async def apply_tournament_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä"""
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    existing_application = None
    for app_id, app_data in applications.items():
        if (app_data.get('user_id') == user_id and 
            app_data.get('tournament_id') == tournament_id):
            existing_application = app_data
            break
    
    if existing_application:
        await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    if str(user_id) in tournament_data.get('participants', {}):
        await callback.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_data = users.get(str(user_id), {})
    
    if not user_data:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    application_id = f"app_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{user_id}"
    
    applications[application_id] = {
        'user_id': user_id,
        'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
        'phone': user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'tournament_id': tournament_id,
        'tournament_name': tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
        'applied_at': datetime.now().isoformat(),
        'status': 'pending'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    await storage.save_tournament_applications(applications)
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞!\n\n"
        f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"üìã –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="view_tournaments_list:0")
    builder.button(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications_list:0")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    builder.adjust(1)
    
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("my_applications_list:"))
async def my_applications_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    page = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_applications = []
    for app_id, app_data in applications.items():
        if app_data.get('user_id') == user_id:
            user_applications.append(app_data)
    
    if not user_applications:
        await callback.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã.")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    my_applications_pages[callback.from_user.id] = user_applications
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = len(user_applications)
    
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    application = user_applications[page]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    tournament_data = tournaments.get(application['tournament_id'], {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏
    text = f"üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {page + 1}/{total_pages}\n\n"
    text += f"üéØ –¢—É—Ä–Ω–∏—Ä: {application.get('tournament_name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    
    if tournament_data:
        text += f"üìÖ –î–∞—Ç–∞ —Ç—É—Ä–Ω–∏—Ä–∞: {tournament_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    text += f"üìÖ –ü–æ–¥–∞–Ω–∞: {datetime.fromisoformat(application['applied_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    status_emoji = "‚è≥" if application.get('status') == 'pending' else "‚úÖ" if application.get('status') == 'accepted' else "‚ùå"
    status_text = "–æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è" if application.get('status') == 'pending' else "–ø—Ä–∏–Ω—è—Ç–∞" if application.get('status') == 'accepted' else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
    
    if application.get('status') == 'accepted' and application.get('accepted_at'):
        text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {datetime.fromisoformat(application['accepted_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    if application.get('status') == 'rejected' and application.get('rejected_reason'):
        text += f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {application.get('rejected_reason')}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∑–∞—è–≤–∫–∏
    text += f"\nüë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—è–≤–∫–µ:\n"
    text += f"–ò–º—è: {application.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {application.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"my_applications_list:{page-1}")
        if page < total_pages - 1:
            builder.button(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"my_applications_list:{page+1}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if tournament_data:
        builder.button(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"view_tournament:{application['tournament_id']}")
    
    builder.button(text="üìã –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="view_tournaments_list:0")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if total_pages > 1:
        builder.adjust(2)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    if tournament_data:
        builder.adjust(1)  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    builder.adjust(1)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("view_tournament:"))
async def view_tournament_from_application(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä –∏–∑ –∑–∞—è–≤–∫–∏"""
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    tournament_ids = list(active_tournaments.keys())
    
    if tournament_id not in tournament_ids:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    page = tournament_ids.index(tournament_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞
    await view_tournaments_list(CallbackQuery(
        message=callback.message,
        data=f"view_tournaments_list:{page}",
        from_user=callback.from_user,
        chat_instance=callback.chat_instance,
        id=callback.id
    ))

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("my_tournaments_list:"))
async def my_tournaments_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    tournaments = await storage.load_tournaments()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tournaments = []
    for tournament_id, tournament_data in tournaments.items():
        if str(user_id) in tournament_data.get('participants', {}):
            user_tournaments.append((tournament_id, tournament_data))
    
    if not user_tournaments:
        await callback.message.edit_text("üéæ –í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    my_tournaments_pages[callback.from_user.id] = user_tournaments
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = len(user_tournaments)
    
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    tournament_id, tournament_data = user_tournaments[page]
    participant_data = tournament_data['participants'][str(user_id)]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    text = f"üèÜ –í–∞—à —Ç—É—Ä–Ω–∏—Ä {page + 1}/{total_pages}\n\n"
    text += f"üéØ –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    text += f"üìÖ –î–∞—Ç–∞: {tournament_data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('location', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n"
    
    if tournament_data.get('description'):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament_data.get('description')}\n"
    
    if tournament_data.get('rules'):
        text += f"üìã –ü—Ä–∞–≤–∏–ª–∞: {tournament_data.get('rules')}\n"
    
    if tournament_data.get('prize_fund'):
        text += f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament_data.get('prize_fund')}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if participant_data.get('accepted_at'):
        text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {datetime.fromisoformat(participant_data['accepted_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    if participant_data.get('applied_at'):
        text += f"üìÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞: {datetime.fromisoformat(participant_data['applied_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"my_tournaments_list:{page-1}")
        if page < total_pages - 1:
            builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"my_tournaments_list:{page+1}")
    
    builder.button(text="üìã –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="view_tournaments_list:0")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if total_pages > 1:
        builder.adjust(2)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    builder.adjust(1)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data == "tournaments_main_menu")
async def tournaments_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    text = (
        f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã\n\n"
        f"–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç: {len(active_tournaments)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
        f"–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!\n\n"
        f"üìã –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, "
        f"–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="view_tournaments_list:0")
    builder.button(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications_list:0")
    builder.button(text="üéØ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="my_tournaments_list:0")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()