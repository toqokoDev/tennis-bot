from aiogram import Bot, Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging
from datetime import datetime

from services.storage import storage
from models.states import CreateTournamentStates, EditTournamentStates, ViewTournamentsStates, AdminEditGameStates
from utils.admin import is_admin
from config.profile import sport_type, cities_data, create_sport_keyboard
from config.tournament_config import (
    TOURNAMENT_TYPES, GENDERS, CATEGORIES, AGE_GROUPS, 
    DURATIONS, YES_NO_OPTIONS, DISTRICTS_MOSCOW, MIN_PARTICIPANTS
)
from utils.tournament_brackets import create_tournament_bracket, Player, format_bracket_text
from utils.bracket_image_generator import create_bracket_image
from utils.tournament_manager import tournament_manager
from utils.tournament_notifications import TournamentNotifications
import io

router = Router()
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
tournament_pages = {}
my_tournaments_pages = {}
my_applications_pages = {}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
tournament_data = {}

# –°–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
SPORTS = sport_type
COUNTRIES = list(cities_data.keys())

# –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def get_cities_for_country(country):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã"""
    cities = cities_data.get(country, [])
    return cities + ["–î—Ä—É–≥–æ–µ"] if cities else ["–î—Ä—É–≥–æ–µ"]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.callback_query(F.data == "admin_create_tournament")
async def create_tournament_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è
    global tournament_data
    tournament_data = {}
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    await state.set_state(CreateTournamentStates.SPORT)
    
    await callback.message.edit_text(
        "üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        "üìã –®–∞–≥ 1/13: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞",
        reply_markup=create_sport_keyboard(pref="tournament_sport:")
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
@router.callback_query(F.data.startswith("tournament_sport:"))
async def select_sport(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    sport = callback.data.split(":", 1)[1]
    tournament_data["sport"] = sport
    
    await state.set_state(CreateTournamentStates.COUNTRY)
    
    builder = InlineKeyboardBuilder()
    for country in COUNTRIES:
        builder.button(text=country, callback_data=f"tournament_country:{country}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ 2/13: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã
@router.callback_query(F.data.startswith("tournament_country:"))
async def select_country(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    country = callback.data.split(":", 1)[1]
    tournament_data["country"] = country
    
    if country == "–î—Ä—É–≥–æ–µ":
        await state.set_state(CreateTournamentStates.COUNTRY_INPUT)
        await callback.message.edit_text(
            f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"üìã –®–∞–≥ 2/13: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã\n"
            f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {country}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã:",
            reply_markup=None
        )
    else:
        await state.set_state(CreateTournamentStates.CITY)
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞–Ω—ã
        cities = get_cities_for_country(country)
        
        builder = InlineKeyboardBuilder()
        for city in cities:
            builder.button(text=city, callback_data=f"tournament_city:{city}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"üìã –®–∞–≥ 3/13: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
            f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {country}",
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤—Ä—É—á–Ω—É—é
@router.message(CreateTournamentStates.COUNTRY_INPUT)
async def input_country(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã –≤—Ä—É—á–Ω—É—é"""
    country = message.text.strip()
    tournament_data["country"] = country
    
    await state.set_state(CreateTournamentStates.CITY)
    
    builder = InlineKeyboardBuilder()
    builder.button(text="–í–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="tournament_city_input")
    
    await message.answer(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ 3/13: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {country}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@router.callback_query(F.data == "tournament_city_input")
async def tournament_city_input(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    await state.set_state(CreateTournamentStates.CITY_INPUT)
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ 3/13: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=None
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(F.data.startswith("tournament_city:"))
async def select_city(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city = callback.data.split(":", 1)[1]
    tournament_data["city"] = city
    
    if city == "–î—Ä—É–≥–æ–µ":
        await state.set_state(CreateTournamentStates.CITY_INPUT)
        await callback.message.edit_text(
            f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"üìã –®–∞–≥ 3/13: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞\n"
            f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
            f"‚úÖ –ì–æ—Ä–æ–¥: {city}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
            reply_markup=None
        )
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–∞–π–æ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –ú–æ—Å–∫–≤—ã)
        if city == "–ú–æ—Å–∫–≤–∞":
            await state.set_state(CreateTournamentStates.DISTRICT)
            
            builder = InlineKeyboardBuilder()
            for district in DISTRICTS_MOSCOW:
                builder.button(text=district, callback_data=f"tournament_district:{district}")
            builder.adjust(2)
            
            await callback.message.edit_text(
                f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
                f"üìã –®–∞–≥ 4/13: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å –≥–æ—Ä–æ–¥–∞\n"
                f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
                f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
                f"‚úÖ –ì–æ—Ä–æ–¥: {city}",
                reply_markup=builder.as_markup()
            )
        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
            await state.set_state(CreateTournamentStates.TYPE)
            
            builder = InlineKeyboardBuilder()
            for t_type in TOURNAMENT_TYPES:
                builder.button(text=t_type, callback_data=f"tournament_type:{t_type}")
            builder.adjust(1)
            
            await callback.message.edit_text(
                f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
                f"üìã –®–∞–≥ 4/13: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞\n"
                f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
                f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
                f"‚úÖ –ì–æ—Ä–æ–¥: {city}",
                reply_markup=builder.as_markup()
            )
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é
@router.message(CreateTournamentStates.CITY_INPUT)
async def input_city(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é"""
    city = message.text.strip()
    tournament_data["city"] = city
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–±–∏—Ä–∞—Ç—å —Ä–∞–π–æ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –ú–æ—Å–∫–≤—ã)
    if city == "–ú–æ—Å–∫–≤–∞":
        await state.set_state(CreateTournamentStates.DISTRICT)
        
        builder = InlineKeyboardBuilder()
        for district in DISTRICTS_MOSCOW:
            builder.button(text=district, callback_data=f"tournament_district:{district}")
        builder.adjust(2)
        
        await message.answer(
            f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"üìã –®–∞–≥ 4/13: –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å –≥–æ—Ä–æ–¥–∞\n"
            f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
            f"‚úÖ –ì–æ—Ä–æ–¥: {city}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å –≥–æ—Ä–æ–¥–∞:",
            reply_markup=builder.as_markup()
        )
    else:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
        await state.set_state(CreateTournamentStates.TYPE)
        
        builder = InlineKeyboardBuilder()
        for t_type in TOURNAMENT_TYPES:
            builder.button(text=t_type, callback_data=f"tournament_type:{t_type}")
        builder.adjust(1)
        
        await message.answer(
            f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"üìã –®–∞–≥ 4/13: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞\n"
            f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
            f"‚úÖ –ì–æ—Ä–æ–¥: {city}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞:",
            reply_markup=builder.as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞
@router.callback_query(F.data.startswith("tournament_district:"))
async def select_district(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–∞–π–æ–Ω–∞"""
    district = callback.data.split(":", 1)[1]
    tournament_data["district"] = district
    
    await state.set_state(CreateTournamentStates.TYPE)
    
    builder = InlineKeyboardBuilder()
    for t_type in TOURNAMENT_TYPES:
        builder.button(text=t_type, callback_data=f"tournament_type:{t_type}")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ 5/13: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"‚úÖ –†–∞–π–æ–Ω: {district}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("tournament_type:"))
async def select_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—É—Ä–Ω–∏—Ä–∞"""
    t_type = callback.data.split(":", 1)[1]
    tournament_data["type"] = t_type
    
    await state.set_state(CreateTournamentStates.GENDER)
    
    builder = InlineKeyboardBuilder()
    for gender in GENDERS:
        builder.button(text=gender, callback_data=f"tournament_gender:{gender}")
    builder.adjust(2)
    
    step = "5" if "district" not in tournament_data else "6"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {t_type}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@router.callback_query(F.data.startswith("tournament_gender:"))
async def select_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    gender = callback.data.split(":", 1)[1]
    tournament_data["gender"] = gender
    
    await state.set_state(CreateTournamentStates.CATEGORY)
    
    builder = InlineKeyboardBuilder()
    for category in CATEGORIES:
        builder.button(text=category, callback_data=f"tournament_category:{category}")
    builder.adjust(2)
    
    step = "6" if "district" not in tournament_data else "7"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
        f"‚úÖ –ü–æ–ª: {gender}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(F.data.startswith("tournament_category:"))
async def select_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split(":", 1)[1]
    tournament_data["category"] = category
    
    await state.set_state(CreateTournamentStates.AGE_GROUP)
    
    builder = InlineKeyboardBuilder()
    for age_group in AGE_GROUPS:
        builder.button(text=age_group, callback_data=f"tournament_age_group:{age_group}")
    builder.adjust(2)
    
    step = "7" if "district" not in tournament_data else "8"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –≥—Ä—É–ø–ø—É\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
        f"‚úÖ –ü–æ–ª: {tournament_data['gender']}\n"
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("tournament_age_group:"))
async def select_age_group(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã"""
    age_group = callback.data.split(":", 1)[1]
    tournament_data["age_group"] = age_group
    
    await state.set_state(CreateTournamentStates.DURATION)
    
    builder = InlineKeyboardBuilder()
    for duration in DURATIONS:
        builder.button(text=duration, callback_data=f"tournament_duration:{duration}")
    builder.adjust(1)
    
    step = "8" if "district" not in tournament_data else "9"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
        f"‚úÖ –ü–æ–ª: {tournament_data['gender']}\n"
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age_group}",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
@router.callback_query(F.data.startswith("tournament_duration:"))
async def select_duration(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration = callback.data.split(":", 1)[1]
    tournament_data["duration"] = duration
    
    await state.set_state(CreateTournamentStates.PARTICIPANTS_COUNT)
    
    step = "9" if "district" not in tournament_data else "10"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
        f"‚úÖ –ü–æ–ª: {tournament_data['gender']}\n"
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data['age_group']}\n"
        f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–∏—Å–ª–æ):",
        reply_markup=None
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@router.message(CreateTournamentStates.PARTICIPANTS_COUNT)
async def input_participants_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        count = int(message.text.strip())
        if count <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        tournament_data["participants_count"] = count
        
        await state.set_state(CreateTournamentStates.SHOW_IN_LIST)
        
        builder = InlineKeyboardBuilder()
        for option in YES_NO_OPTIONS:
            builder.button(text=option, callback_data=f"tournament_show_in_list:{option}")
        builder.adjust(2)
        
        step = "10" if "district" not in tournament_data else "11"
        
        await message.answer(
            f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"üìã –®–∞–≥ {step}/13: –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≥–æ—Ä–æ–¥–∞?\n"
            f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
            f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
            f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
            f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
            f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
            f"‚úÖ –ü–æ–ª: {tournament_data['gender']}\n"
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data['age_group']}\n"
            f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data['duration']}\n"
            f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}\n\n"
            f"–û—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –≥–æ—Ä–æ–¥–∞?",
            reply_markup=builder.as_markup()
        )
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ
@router.callback_query(F.data.startswith("tournament_show_in_list:"))
async def select_show_in_list(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ"""
    show_in_list = callback.data.split(":", 1)[1]
    tournament_data["show_in_list"] = show_in_list == "–î–∞"
    
    await state.set_state(CreateTournamentStates.HIDE_BRACKET)
    
    builder = InlineKeyboardBuilder()
    for option in YES_NO_OPTIONS:
        builder.button(text=option, callback_data=f"tournament_hide_bracket:{option}")
    builder.adjust(2)
    
    step = "11" if "district" not in tournament_data else "12"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –°–∫—Ä—ã–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É?\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
        f"‚úÖ –ü–æ–ª: {tournament_data['gender']}\n"
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data['age_group']}\n"
        f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data['duration']}\n"
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament_data['participants_count']}\n"
        f"‚úÖ –í —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {'–î–∞' if tournament_data['show_in_list'] else '–ù–µ—Ç'}\n\n"
        f"–°–∫—Ä—ã–≤–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫—Ä—ã—Ç–∏—è —Å–µ—Ç–∫–∏
@router.callback_query(F.data.startswith("tournament_hide_bracket:"))
async def select_hide_bracket(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–∫—Ä—ã—Ç–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
    hide_bracket = callback.data.split(":", 1)[1]
    tournament_data["hide_bracket"] = hide_bracket == "–î–∞"
    
    await state.set_state(CreateTournamentStates.COMMENT)
    
    step = "12" if "district" not in tournament_data else "13"
    
    await callback.message.edit_text(
        f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        f"üìã –®–∞–≥ {step}/13: –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—É—Ä–Ω–∏—Ä—É\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {tournament_data['country']}\n"
        f"‚úÖ –ì–æ—Ä–æ–¥: {tournament_data['city']}\n"
        f"{f'‚úÖ –†–∞–π–æ–Ω: {tournament_data['district']}\n' if 'district' in tournament_data else ''}"
        f"‚úÖ –¢–∏–ø: {tournament_data['type']}\n"
        f"‚úÖ –ü–æ–ª: {tournament_data['gender']}\n"
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data['age_group']}\n"
        f"‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data['duration']}\n"
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament_data['participants_count']}\n"
        f"‚úÖ –í —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {'–î–∞' if tournament_data['show_in_list'] else '–ù–µ—Ç'}\n"
        f"‚úÖ –°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É: {'–î–∞' if tournament_data['hide_bracket'] else '–ù–µ—Ç'}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—É—Ä–Ω–∏—Ä—É (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):",
        reply_markup=None
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(CreateTournamentStates.COMMENT)
async def input_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = message.text.strip()
    if comment == "-":
        comment = ""
    tournament_data["comment"] = comment
    
    await state.set_state(CreateTournamentStates.CONFIRM)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    location = f"{tournament_data['city']}"
    if "district" in tournament_data:
        location += f" ({tournament_data['district']})"
    location += f", {tournament_data['country']}"
    
    text = f"üèÜ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
    text += f"üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:\n\n"
    text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data['sport']}\n"
    text += f"üåç –ú–µ—Å—Ç–æ: {location}\n"
    text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data['type']}\n"
    text += f"üë• –ü–æ–ª: {tournament_data['gender']}\n"
    text += f"üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
    text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data['age_group']}\n"
    text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data['duration']}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament_data['participants_count']}\n"
    text += f"üìã –í —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {'–î–∞' if tournament_data['show_in_list'] else '–ù–µ—Ç'}\n"
    text += f"üîí –°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É: {'–î–∞' if tournament_data['hide_bracket'] else '–ù–µ—Ç'}\n"
    if tournament_data['comment']:
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –°–æ–∑–¥–∞—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data="tournament_confirm_create")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="tournament_cancel_create")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data == "tournament_confirm_create")
async def confirm_create_tournament(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã
        tournaments = await storage.load_tournaments()
        
        # –°–æ–∑–¥–∞–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_id = f"tournament_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        name = f"{tournament_data['sport']} - {tournament_data['category']}"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
        location = f"{tournament_data['city']}"
        if "district" in tournament_data:
            location += f" ({tournament_data['district']})"
        location += f", {tournament_data['country']}"
        
        description = f"–¢—É—Ä–Ω–∏—Ä –ø–æ {tournament_data['sport'].lower()}\n"
        description += f"–ú–µ—Å—Ç–æ: {location}\n"
        description += f"–¢–∏–ø: {tournament_data['type']}\n"
        description += f"–ü–æ–ª: {tournament_data['gender']}\n"
        description += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data['category']}\n"
        description += f"–í–æ–∑—Ä–∞—Å—Ç: {tournament_data['age_group']}\n"
        description += f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data['duration']}\n"
        description += f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament_data['participants_count']}"
        
        if tournament_data['comment']:
            description += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}"
        
        # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        tournaments[tournament_id] = {
            'name': name,
            'description': description,
            'sport': tournament_data['sport'],
            'country': tournament_data['country'],
            'city': tournament_data['city'],
            'district': tournament_data.get('district', ''),
            'type': tournament_data['type'],
            'gender': tournament_data['gender'],
            'category': tournament_data['category'],
            'age_group': tournament_data['age_group'],
            'duration': tournament_data['duration'],
            'participants_count': tournament_data['participants_count'],
            'show_in_list': tournament_data['show_in_list'],
            'hide_bracket': tournament_data['hide_bracket'],
            'comment': tournament_data['comment'],
            'created_at': datetime.now().isoformat(),
            'created_by': callback.from_user.id,
            'participants': {},
            'status': 'active',
            'rules': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —Ç—É—Ä–Ω–∏—Ä–∞',
            'prize_fund': '–ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–∑–∂–µ'
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—É—Ä–Ω–∏—Ä—ã
        await storage.save_tournaments(tournaments)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        await callback.message.edit_text(
            f"‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
            f"üÜî ID: {tournament_id}\n"
            f"üìç –ú–µ—Å—Ç–æ: {location}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament_data['participants_count']}\n\n"
            f"–¢—É—Ä–Ω–∏—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –∏ –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∑–∞—è–≤–æ–∫."
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data == "tournament_cancel_create")
async def cancel_create_tournament(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create_tournament"
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.message(F.text == "üèÜ –¢—É—Ä–Ω–∏—Ä—ã")
@router.message(Command("tournaments"))
async def tournaments_main(message: Message, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    text = (
        f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã\n\n"
        f"–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç: {len(active_tournaments)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
        f"–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!\n\n"
        f"üìã –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, "
        f"–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="view_tournaments_start")
    builder.button(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications_list:0")
    builder.button(text="üéØ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="my_tournaments_list:0")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ - –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
@router.callback_query(F.data == "view_tournaments_start")
async def view_tournaments_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤ - –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    if not active_tournaments:
        await callback.message.edit_text("üèÜ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    sports_in_tournaments = set()
    for tournament_data in active_tournaments.values():
        sport = tournament_data.get('sport')
        if sport:
            sports_in_tournaments.add(sport)
    
    if not sports_in_tournaments:
        await callback.message.edit_text("üèÜ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤.")
        await callback.answer()
        return
    
    await state.set_state(ViewTournamentsStates.SELECT_SPORT)
    
    builder = InlineKeyboardBuilder()
    for sport in sorted(sports_in_tournaments):
        builder.button(text=sport, callback_data=f"view_tournament_sport:{sport}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üèÜ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        f"üìã –®–∞–≥ 1/3: –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data.startswith("view_tournament_sport:"))
async def select_sport_for_view(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    sport = callback.data.split(":", 1)[1]
    
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞
    sport_tournaments = {k: v for k, v in active_tournaments.items() if v.get('sport') == sport}
    
    if not sport_tournaments:
        await callback.message.edit_text(f"üèÜ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ {sport}")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –∏–∑ —Ç—É—Ä–Ω–∏—Ä–æ–≤ —ç—Ç–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    countries_in_tournaments = set()
    for tournament_data in sport_tournaments.values():
        country = tournament_data.get('country')
        if country:
            countries_in_tournaments.add(country)
    
    await state.set_state(ViewTournamentsStates.SELECT_COUNTRY)
    await state.update_data(selected_sport=sport)
    
    builder = InlineKeyboardBuilder()
    for country in sorted(countries_in_tournaments):
        builder.button(text=country, callback_data=f"view_tournament_country:{country}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üèÜ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        f"üìã –®–∞–≥ 2/3: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data.startswith("view_tournament_country:"))
async def select_country_for_view(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    country = callback.data.split(":", 1)[1]
    
    data = await state.get_data()
    sport = data.get('selected_sport')
    
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω–µ
    filtered_tournaments = {k: v for k, v in active_tournaments.items() 
                          if v.get('sport') == sport and v.get('country') == country}
    
    if not filtered_tournaments:
        await callback.message.edit_text(f"üèÜ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ {sport} –≤ {country}")
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    cities_in_tournaments = set()
    for tournament_data in filtered_tournaments.values():
        city = tournament_data.get('city')
        if city:
            cities_in_tournaments.add(city)
    
    await state.set_state(ViewTournamentsStates.SELECT_CITY)
    await state.update_data(selected_country=country)
    
    builder = InlineKeyboardBuilder()
    for city in sorted(cities_in_tournaments):
        builder.button(text=city, callback_data=f"view_tournament_city:{city}")
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üèÜ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        f"üìã –®–∞–≥ 3/3: –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥\n"
        f"‚úÖ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞: {country}\n\n"
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data.startswith("view_tournament_city:"))
async def select_city_for_view(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    city = callback.data.split(":", 1)[1]
    
    data = await state.get_data()
    sport = data.get('selected_sport')
    country = data.get('selected_country')
    
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞, —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥—É
    filtered_tournaments = {k: v for k, v in active_tournaments.items() 
                          if (v.get('sport') == sport and 
                              v.get('country') == country and 
                              v.get('city') == city)}
    
    if not filtered_tournaments:
        await callback.message.edit_text(f"üèÜ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ {sport} –≤ {city}, {country}")
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤
    await show_tournaments_list(callback, filtered_tournaments, sport, country, city)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
async def show_tournaments_list(callback: CallbackQuery, tournaments: dict, sport: str, country: str, city: str):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    if not tournaments:
        await callback.message.edit_text(f"üèÜ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –ø–æ {sport} –≤ {city}, {country}")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tournament_list = list(tournaments.items())
    total_tournaments = len(tournament_list)
    
    text = f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã –ø–æ {sport}\n"
    text += f"üìç {city}, {country}\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {total_tournaments}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
    tournament_id, tournament_data = tournament_list[0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    location = f"{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    if tournament_data.get('district'):
        location += f" ({tournament_data['district']})"
    location += f", {tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    
    text += f"üèÜ –¢—É—Ä–Ω–∏—Ä 1/{total_tournaments}\n\n"
    text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üåç –ú–µ—Å—Ç–æ: {location}\n"
    text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üë• –ü–æ–ª: {tournament_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}/{tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if tournament_data.get('comment'):
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    
    existing_application = None
    for app_id, app_data in applications.items():
        if (app_data.get('user_id') == user_id and 
            app_data.get('tournament_id') == tournament_id):
            existing_application = app_data
            break
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    is_registered = str(user_id) in tournament_data.get('participants', {})
    
    if existing_application:
        text += f"\nüìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {'‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' if existing_application.get('status') == 'pending' else '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞' if existing_application.get('status') == 'accepted' else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}\n"
    elif is_registered:
        text += "\n‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ)
    if total_tournaments > 1:
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"view_tournament_prev:0")
        builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"view_tournament_next:0")
    
    # –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –ø–æ–¥–∞–ª –∑–∞—è–≤–∫—É –∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω)
    if not existing_application and not is_registered:
        builder.button(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"apply_tournament:{tournament_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data=f"tournament_games_history:{tournament_id}")
    
    # –ö–Ω–æ–ø–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    builder.button(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data=f"tournament_bracket:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data=f"view_tournament_country:{country}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if total_tournaments > 1:
        builder.adjust(2)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    if not existing_application and not is_registered:
        builder.adjust(1)  # –ö–Ω–æ–ø–∫–∞ —É—á–∞—Å—Ç–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    builder.adjust(1)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data.startswith("view_tournament_prev:"))
async def view_tournament_prev(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—ã–¥—É—â–∏–π' –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    page = int(callback.data.split(':')[1])
    
    data = await state.get_data()
    sport = data.get('selected_sport')
    country = data.get('selected_country')
    
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω–µ
    filtered_tournaments = {k: v for k, v in active_tournaments.items() 
                          if v.get('sport') == sport and v.get('country') == country}
    
    if not filtered_tournaments:
        await callback.answer("‚ùå –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    cities_in_tournaments = set()
    for tournament_data in filtered_tournaments.values():
        city = tournament_data.get('city')
        if city:
            cities_in_tournaments.add(city)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_city = None
    for city in cities_in_tournaments:
        if city in callback.message.text:
            current_city = city
            break
    
    if not current_city:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É
    city_tournaments = {k: v for k, v in filtered_tournaments.items() if v.get('city') == current_city}
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    tournament_list = list(city_tournaments.items())
    total_tournaments = len(tournament_list)
    
    if total_tournaments <= 1:
        await callback.answer("‚ùå –≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç—É—Ä–Ω–∏—Ä")
        return
    
    prev_page = (page - 1) % total_tournaments
    if prev_page < 0:
        prev_page = total_tournaments - 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—É—Ä–Ω–∏—Ä
    tournament_id, tournament_data = tournament_list[prev_page]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    location = f"{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    if tournament_data.get('district'):
        location += f" ({tournament_data['district']})"
    location += f", {tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    
    text = f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã –ø–æ {sport}\n"
    text += f"üìç {current_city}, {country}\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {total_tournaments}\n\n"
    text += f"üèÜ –¢—É—Ä–Ω–∏—Ä {prev_page + 1}/{total_tournaments}\n\n"
    text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üåç –ú–µ—Å—Ç–æ: {location}\n"
    text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üë• –ü–æ–ª: {tournament_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}/{tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if tournament_data.get('comment'):
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    
    existing_application = None
    for app_id, app_data in applications.items():
        if (app_data.get('user_id') == user_id and 
            app_data.get('tournament_id') == tournament_id):
            existing_application = app_data
            break
    
    is_registered = str(user_id) in tournament_data.get('participants', {})
    
    if existing_application:
        text += f"\nüìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {'‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' if existing_application.get('status') == 'pending' else '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞' if existing_application.get('status') == 'accepted' else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}\n"
    elif is_registered:
        text += "\n‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    if total_tournaments > 1:
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"view_tournament_prev:{prev_page}")
        builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"view_tournament_next:{prev_page}")
    
    if not existing_application and not is_registered:
        builder.button(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"apply_tournament:{tournament_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data=f"tournament_games_history:{tournament_id}")
    
    # –ö–Ω–æ–ø–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    builder.button(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data=f"tournament_bracket:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data=f"view_tournament_country:{country}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    if total_tournaments > 1:
        builder.adjust(2)
    if not existing_application and not is_registered:
        builder.adjust(1)
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("view_tournament_next:"))
async def view_tournament_next(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–ª–µ–¥—É—é—â–∏–π' –≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    page = int(callback.data.split(':')[1])
    
    data = await state.get_data()
    sport = data.get('selected_sport')
    country = data.get('selected_country')
    
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ –∏ —Å—Ç—Ä–∞–Ω–µ
    filtered_tournaments = {k: v for k, v in active_tournaments.items() 
                          if v.get('sport') == sport and v.get('country') == country}
    
    if not filtered_tournaments:
        await callback.answer("‚ùå –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    cities_in_tournaments = set()
    for tournament_data in filtered_tournaments.values():
        city = tournament_data.get('city')
        if city:
            cities_in_tournaments.add(city)
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_city = None
    for city in cities_in_tournaments:
        if city in callback.message.text:
            current_city = city
            break
    
    if not current_city:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥")
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–æ—Ä–æ–¥—É
    city_tournaments = {k: v for k, v in filtered_tournaments.items() if v.get('city') == current_city}
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    tournament_list = list(city_tournaments.items())
    total_tournaments = len(tournament_list)
    
    if total_tournaments <= 1:
        await callback.answer("‚ùå –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä")
        return
    
    next_page = (page + 1) % total_tournaments
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—É—Ä–Ω–∏—Ä
    tournament_id, tournament_data = tournament_list[next_page]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    location = f"{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    if tournament_data.get('district'):
        location += f" ({tournament_data['district']})"
    location += f", {tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    
    text = f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã –ø–æ {sport}\n"
    text += f"üìç {current_city}, {country}\n\n"
    text += f"–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {total_tournaments}\n\n"
    text += f"üèÜ –¢—É—Ä–Ω–∏—Ä {next_page + 1}/{total_tournaments}\n\n"
    text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üåç –ú–µ—Å—Ç–æ: {location}\n"
    text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üë• –ü–æ–ª: {tournament_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}/{tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    
    if tournament_data.get('comment'):
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    
    existing_application = None
    for app_id, app_data in applications.items():
        if (app_data.get('user_id') == user_id and 
            app_data.get('tournament_id') == tournament_id):
            existing_application = app_data
            break
    
    is_registered = str(user_id) in tournament_data.get('participants', {})
    
    if existing_application:
        text += f"\nüìã –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: {'‚è≥ –û–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è' if existing_application.get('status') == 'pending' else '‚úÖ –ü—Ä–∏–Ω—è—Ç–∞' if existing_application.get('status') == 'accepted' else '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞'}\n"
    elif is_registered:
        text += "\n‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    if total_tournaments > 1:
        builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"view_tournament_prev:{next_page}")
        builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"view_tournament_next:{next_page}")
    
    if not existing_application and not is_registered:
        builder.button(text="‚úÖ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data=f"apply_tournament:{tournament_id}")
    
    # –ö–Ω–æ–ø–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    builder.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä", callback_data=f"tournament_games_history:{tournament_id}")
    
    # –ö–Ω–æ–ø–∫–∞ —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏ (–¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    builder.button(text="üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞", callback_data=f"tournament_bracket:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data=f"view_tournament_country:{country}")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    if total_tournaments > 1:
        builder.adjust(2)
    if not existing_application and not is_registered:
        builder.adjust(1)
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
@router.callback_query(F.data.startswith("apply_tournament:"))
async def apply_tournament_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä"""
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—è–≤–∫—É
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    
    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞—è–≤–∫—É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä
    existing_application = None
    for app_id, app_data in applications.items():
        if (app_data.get('user_id') == user_id and 
            app_data.get('tournament_id') == tournament_id):
            existing_application = app_data
            break
    
    if existing_application:
        await callback.answer("‚ö†Ô∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —ç—Ç–æ—Ç —Ç—É—Ä–Ω–∏—Ä")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Ç—É—Ä–Ω–∏—Ä–µ
    if str(user_id) in tournament_data.get('participants', {}):
        await callback.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_data = users.get(str(user_id), {})
    
    if not user_data:
        await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    application_id = f"app_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{user_id}"
    
    applications[application_id] = {
        'user_id': user_id,
        'user_name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
        'phone': user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'tournament_id': tournament_id,
        'tournament_name': tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
        'applied_at': datetime.now().isoformat(),
        'status': 'pending'
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞—è–≤–∫—É
    await storage.save_tournament_applications(applications)
    
    await callback.message.edit_text(
        f"‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–Ω–∞!\n\n"
        f"üë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"‚è≥ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏."
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="view_tournaments_start")
    builder.button(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications_list:0")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    builder.adjust(1)
    
    await callback.message.edit_reply_markup(reply_markup=builder.as_markup())
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞—è–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("my_applications_list:"))
async def my_applications_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π –ø–æ –æ–¥–Ω–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É"""
    page = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_applications = []
    for app_id, app_data in applications.items():
        if app_data.get('user_id') == user_id:
            user_applications.append(app_data)
    
    if not user_applications:
        await callback.message.edit_text("üìã –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã.")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    my_applications_pages[callback.from_user.id] = user_applications
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = len(user_applications)
    
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    application = user_applications[page]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    tournament_data = tournaments.get(application['tournament_id'], {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–π –∑–∞—è–≤–∫–∏
    text = f"üìã –í–∞—à–∞ –∑–∞—è–≤–∫–∞ {page + 1}/{total_pages}\n\n"
    
    text += f"üìÖ –ü–æ–¥–∞–Ω–∞: {datetime.fromisoformat(application['applied_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    # –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    status_emoji = "‚è≥" if application.get('status') == 'pending' else "‚úÖ" if application.get('status') == 'accepted' else "‚ùå"
    status_text = "–æ–∂–∏–¥–∞–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è" if application.get('status') == 'pending' else "–ø—Ä–∏–Ω—è—Ç–∞" if application.get('status') == 'accepted' else "–æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {status_emoji} {status_text}\n"
    
    if application.get('status') == 'accepted' and application.get('accepted_at'):
        text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞: {datetime.fromisoformat(application['accepted_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    if application.get('status') == 'rejected' and application.get('rejected_reason'):
        text += f"üìù –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {application.get('rejected_reason')}\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –∑–∞—è–≤–∫–∏
    text += f"\nüë§ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞—è–≤–∫–µ:\n"
    text += f"–ò–º—è: {application.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"–¢–µ–ª–µ—Ñ–æ–Ω: {application.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data=f"my_applications_list:{page-1}")
        if page < total_pages - 1:
            builder.button(text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è", callback_data=f"my_applications_list:{page+1}")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ (–µ—Å–ª–∏ —Ç—É—Ä–Ω–∏—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    if tournament_data:
        builder.button(text="üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"view_tournament:{application['tournament_id']}")
    
    builder.button(text="üìã –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="view_tournaments_start")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if total_pages > 1:
        builder.adjust(2)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    if tournament_data:
        builder.adjust(1)  # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞
    builder.adjust(1)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("view_tournament:"))
async def view_tournament_from_application(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä –∏–∑ –∑–∞—è–≤–∫–∏"""
    tournament_id = callback.data.split(':')[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    tournament_ids = list(active_tournaments.keys())
    
    if tournament_id not in tournament_ids:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
        return
    
    page = tournament_ids.index(tournament_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ç—É—Ä–Ω–∏—Ä–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    await callback.answer("‚ùå –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
@router.callback_query(F.data.startswith("my_tournaments_list:"))
async def my_tournaments_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    page = int(callback.data.split(':')[1])
    user_id = callback.from_user.id
    tournaments = await storage.load_tournaments()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tournaments = []
    for tournament_id, tournament_data in tournaments.items():
        if str(user_id) in tournament_data.get('participants', {}):
            user_tournaments.append((tournament_id, tournament_data))
    
    if not user_tournaments:
        await callback.message.edit_text("üéæ –í—ã –ø–æ–∫–∞ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
        await callback.answer()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    my_tournaments_pages[callback.from_user.id] = user_tournaments
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = len(user_tournaments)
    
    if page >= total_pages:
        page = total_pages - 1
    if page < 0:
        page = 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    tournament_id, tournament_data = user_tournaments[page]
    participant_data = tournament_data['participants'][str(user_id)]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞
    text = f"üèÜ –í–∞—à —Ç—É—Ä–Ω–∏—Ä {page + 1}/{total_pages}\n\n"
    text += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n"
    text += f"üìä –°—Ç–∞—Ç—É—Å: {tournament_data.get('status', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
    
    if tournament_data.get('description'):
        text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tournament_data.get('description')}\n\n"
    
    if tournament_data.get('rules'):
        text += f"üìã –ü—Ä–∞–≤–∏–ª–∞: {tournament_data.get('rules')}\n\n"
    
    if tournament_data.get('prize_fund'):
        text += f"üí∞ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: {tournament_data.get('prize_fund')}\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if participant_data.get('accepted_at'):
        text += f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {datetime.fromisoformat(participant_data['accepted_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    if participant_data.get('applied_at'):
        text += f"üìÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞: {datetime.fromisoformat(participant_data['applied_at']).strftime('%d.%m.%Y %H:%M')}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if total_pages > 1:
        if page > 0:
            builder.button(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π", callback_data=f"my_tournaments_list:{page-1}")
        if page < total_pages - 1:
            builder.button(text="–°–ª–µ–¥—É—é—â–∏–π ‚û°Ô∏è", callback_data=f"my_tournaments_list:{page+1}")
    
    builder.button(text="üìã –í—Å–µ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="view_tournaments_start")
    builder.button(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="tournaments_main_menu")
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    if total_pages > 1:
        builder.adjust(2)  # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    builder.adjust(1)  # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ä—è–¥–∞—Ö
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command("view_tournament_applications"))
async def view_tournament_applications_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
    pending_applications = {k: v for k, v in applications.items() if v.get('status') == 'pending'}
    
    if not pending_applications:
        await message.answer("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
        return
    
    text = "üìã –ó–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä—ã (–æ–∂–∏–¥–∞—é—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è)\n\n"
    
    for app_id, app_data in pending_applications.items():
        tournament_id = app_data.get('tournament_id')
        tournament_data = tournaments.get(tournament_id, {})
        
        text += f"üÜî –ó–∞—è–≤–∫–∞: {app_id}\n"
        text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {app_data.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        text += f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')}\n"
        text += f"üìÖ –ü–æ–¥–∞–Ω–∞: {datetime.fromisoformat(app_data['applied_at']).strftime('%d.%m.%Y %H:%M')}\n\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_accept_application_menu")
    builder.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data="admin_reject_application_menu")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await message.answer(text, reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "admin_accept_application_menu")
async def admin_accept_application_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
    pending_applications = {k: v for k, v in applications.items() if v.get('status') == 'pending'}
    
    if not pending_applications:
        await callback.message.edit_text("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for app_id, app_data in pending_applications.items():
        tournament_id = app_data.get('tournament_id')
        tournament_data = tournaments.get(tournament_id, {})
        tournament_name = tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')
        user_name = app_data.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        builder.button(
            text=f"‚úÖ {user_name} - {tournament_name}", 
            callback_data=f"admin_accept_application:{app_id}"
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "‚úÖ –ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("admin_accept_application:"))
async def admin_accept_application(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–∏–Ω—è—Ç–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    app_id = callback.data.split(":", 1)[1]
    
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    if app_id not in applications:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    app_data = applications[app_id]
    tournament_id = app_data.get('tournament_id')
    user_id = app_data.get('user_id')
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if str(user_id) in participants:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users = await storage.load_users()
    user_data = users.get(str(user_id), {})
    
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    applications[app_id]['status'] = 'accepted'
    applications[app_id]['accepted_at'] = datetime.now().isoformat()
    applications[app_id]['accepted_by'] = callback.from_user.id
    await storage.save_tournament_applications(applications)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä
    participants[str(user_id)] = {
        'name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
        'phone': user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
        'added_at': datetime.now().isoformat(),
        'added_by': callback.from_user.id,
        'application_id': app_id
    }
    
    tournament_data['participants'] = participants
    await storage.save_tournaments(tournaments)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ —Ç—É—Ä–Ω–∏—Ä –∫ –∑–∞–ø—É—Å–∫—É
    tournament_ready = await tournament_manager.check_tournament_readiness(tournament_id)
    
    success_message = f"‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
    success_message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {app_data.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    success_message += f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    success_message += f"üìÖ –ü—Ä–∏–Ω—è—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
    
    if tournament_ready and tournament_data.get('status') == 'active':
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
        tournament_started = await tournament_manager.start_tournament(tournament_id)
        
        if tournament_started:
            success_message += f"üéâ *–¢—É—Ä–Ω–∏—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω!*\n\n"
            success_message += f"üèÜ –ù–∞–±—Ä–∞–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            success_message += f"‚öîÔ∏è –ú–∞—Ç—á–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            try:
                from main import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
                notifications = TournamentNotifications(bot)
                await notifications.notify_tournament_started(tournament_id, tournament_data)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
    else:
        tournament_type = tournament_data.get('type', '–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞')
        min_participants = MIN_PARTICIPANTS.get(tournament_type, 4)
        current_count = len(participants)
        success_message += f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_count}/{min_participants}\n"
        success_message += f"‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        from main import bot
        await bot.send_message(
            user_id,
            f"üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üìÖ –ü—Ä–∏–Ω—è—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç—É—Ä–Ω–∏—Ä!"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ö –∑–∞—è–≤–∫–∞–º", callback_data="admin_accept_application_menu")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        success_message,
        reply_markup=builder.as_markup(),
        parse_mode='Markdown'
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data == "admin_reject_application_menu")
async def admin_reject_application_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—è–≤–∫–∏
    pending_applications = {k: v for k, v in applications.items() if v.get('status') == 'pending'}
    
    if not pending_applications:
        await callback.message.edit_text("üìã –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ")
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for app_id, app_data in pending_applications.items():
        tournament_id = app_data.get('tournament_id')
        tournament_data = tournaments.get(tournament_id, {})
        tournament_name = tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')
        user_name = app_data.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        builder.button(
            text=f"‚ùå {user_name} - {tournament_name}", 
            callback_data=f"admin_reject_application:{app_id}"
        )
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
@router.callback_query(F.data.startswith("admin_reject_application:"))
async def admin_reject_application(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç—É—Ä–Ω–∏—Ä"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    app_id = callback.data.split(":", 1)[1]
    
    applications = await storage.load_tournament_applications()
    tournaments = await storage.load_tournaments()
    
    if app_id not in applications:
        await callback.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    app_data = applications[app_id]
    tournament_id = app_data.get('tournament_id')
    user_id = app_data.get('user_id')
    
    tournament_data = tournaments.get(tournament_id, {})
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    applications[app_id]['status'] = 'rejected'
    applications[app_id]['rejected_at'] = datetime.now().isoformat()
    applications[app_id]['rejected_by'] = callback.from_user.id
    applications[app_id]['rejected_reason'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
    await storage.save_tournament_applications(applications)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        from main import bot
        await bot.send_message(
            user_id,
            f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"üìÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"üìù –ü—Ä–∏—á–∏–Ω–∞: –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n\n"
            f"–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥—Ä—É–≥–æ–π —Ç—É—Ä–Ω–∏—Ä."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ö –∑–∞—è–≤–∫–∞–º", callback_data="admin_reject_application_menu")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {app_data.get('user_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üìÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏.",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command("view_tournament_participants"))
async def view_tournament_participants_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await message.answer("üìã –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    builder = InlineKeyboardBuilder()
    for tournament_id, tournament_data in tournaments.items():
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        participants_count = len(tournament_data.get('participants', {}))
        builder.button(text=f"üèÜ {name} ({city}) - {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
                      callback_data=f"admin_view_participants:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await message.answer(
        "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=builder.as_markup()
    )

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@router.message(Command("edit_tournaments"))
async def edit_tournaments_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await message.answer("üìã –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for tournament_id, tournament_data in tournaments.items():
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        builder.button(text=f"üèÜ {name} ({city})", callback_data=f"edit_tournament:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await message.answer(
        "üèÜ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.callback_query(F.data.startswith("admin_view_participants:"))
async def admin_view_tournament_participants(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(":", 1)[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    location = f"{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    if tournament_data.get('district'):
        location += f" ({tournament_data['district']})"
    location += f", {tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    
    text = f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
    text += f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    text += f"üìç –ú–µ—Å—Ç–æ: {location}\n"
    text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    if participants:
        text += "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        for i, (user_id, participant_data) in enumerate(participants.items(), 1):
            name = participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            phone = participant_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
            added_at = participant_data.get('added_at', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            if added_at:
                try:
                    added_date = datetime.fromisoformat(added_at)
                    added_str = added_date.strftime('%d.%m.%Y %H:%M')
                except:
                    added_str = added_at
            else:
                added_str = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            
            text += f"{i}. {name}\n"
            text += f"   üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            text += f"   üÜî ID: {user_id}\n"
            text += f"   üìÖ –î–æ–±–∞–≤–ª–µ–Ω: {added_str}\n\n"
    else:
        text += "üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    builder = InlineKeyboardBuilder()
    
    if participants:
        builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"admin_remove_participant_menu:{tournament_id}")
    
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data=f"admin_add_participant:{tournament_id}")
    builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="admin_back_to_tournament_list")
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("tournament_games_history:"))
async def tournament_games_history(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = callback.data.split(":", 1)[1]
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments.get(tournament_id)
    
    if not tournament_data:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
    tournament_games = []
    for game in games:
        if game.get('tournament_id') == tournament_id:
            tournament_games.append(game)
    
    if not tournament_games:
        await callback.message.edit_text(
            f"üèÜ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')}\"\n\n"
            "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_tournament_city:{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
            .as_markup()
        )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    tournament_games.sort(key=lambda x: x['date'], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–∞—Ö
    history_text = f"üèÜ –ò—Å—Ç–æ—Ä–∏—è –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')}\"\n\n"
    history_text += f"üìä –í—Å–µ–≥–æ –∏–≥—Ä: {len(tournament_games)}\n\n"
    
    for i, game in enumerate(tournament_games[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–≥—Ä
        game_date = datetime.fromisoformat(game['date'])
        formatted_date = game_date.strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        team1_wins = sum(1 for set_score in game['sets'] 
                        if int(set_score.split(':')[0]) > int(set_score.split(':')[1]))
        team2_wins = sum(1 for set_score in game['sets'] 
                        if int(set_score.split(':')[0]) < int(set_score.split(':')[1]))
        
        if team1_wins > team2_wins:
            winner_id = game['players']['team1'][0]
            loser_id = game['players']['team2'][0]
        else:
            winner_id = game['players']['team2'][0]
            loser_id = game['players']['team1'][0]
        
        winner = users.get(winner_id, {})
        loser = users.get(loser_id, {})
        
        winner_name = f"{winner.get('first_name', '')} {winner.get('last_name', '')}".strip()
        loser_name = f"{loser.get('first_name', '')} {loser.get('last_name', '')}".strip()
        
        history_text += f"{i}. üìÖ {formatted_date}\n"
        history_text += f"   ü•á {winner_name} –ø–æ–±–µ–¥–∏–ª {loser_name}\n"
        history_text += f"   üìä –°—á–µ—Ç: {game['score']}\n\n"
    
    if len(tournament_games) > 10:
        history_text += f"... –∏ –µ—â–µ {len(tournament_games) - 10} –∏–≥—Ä\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
    if await is_admin(callback.from_user.id):
        builder.button(text="üîß –ü–æ–¥—Ä–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä (–ê–¥–º–∏–Ω)", callback_data=f"admin_tournament_games:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"view_tournament_city:{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    
    await callback.message.edit_text(history_text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞
@router.callback_query(F.data.startswith("admin_tournament_games:"))
async def admin_tournament_games(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(":", 1)[1]
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments.get(tournament_id)
    
    if not tournament_data:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä—ã —Ç—É—Ä–Ω–∏—Ä–∞
    tournament_games = []
    for game in games:
        if game.get('tournament_id') == tournament_id:
            tournament_games.append(game)
    
    if not tournament_games:
        await callback.message.edit_text(
            f"üèÜ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')}\"\n\n"
            "üìä –ü–æ–∫–∞ –Ω–µ—Ç —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä –≤ —ç—Ç–æ–º —Ç—É—Ä–Ω–∏—Ä–µ.",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"tournament_games_history:{tournament_id}")
            .as_markup()
        )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä—ã –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    tournament_games.sort(key=lambda x: x['date'], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–∞—Ö
    history_text = f"üèÜ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä —Ç—É—Ä–Ω–∏—Ä–∞ \"{tournament_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä')}\"\n\n"
    history_text += f"üìä –í—Å–µ–≥–æ –∏–≥—Ä: {len(tournament_games)}\n\n"
    
    for i, game in enumerate(tournament_games, 1):
        game_date = datetime.fromisoformat(game['date'])
        formatted_date = game_date.strftime("%d.%m.%Y %H:%M")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        team1_wins = sum(1 for set_score in game['sets'] 
                        if int(set_score.split(':')[0]) > int(set_score.split(':')[1]))
        team2_wins = sum(1 for set_score in game['sets'] 
                        if int(set_score.split(':')[0]) < int(set_score.split(':')[1]))
        
        if team1_wins > team2_wins:
            winner_id = game['players']['team1'][0]
            loser_id = game['players']['team2'][0]
        else:
            winner_id = game['players']['team2'][0]
            loser_id = game['players']['team1'][0]
        
        winner = users.get(winner_id, {})
        loser = users.get(loser_id, {})
        
        winner_name = f"{winner.get('first_name', '')} {winner.get('last_name', '')}".strip()
        loser_name = f"{loser.get('first_name', '')} {loser.get('last_name', '')}".strip()
        
        history_text += f"{i}. üìÖ {formatted_date}\n"
        history_text += f"   ü•á {winner_name} –ø–æ–±–µ–¥–∏–ª {loser_name}\n"
        history_text += f"   üìä –°—á–µ—Ç: {game['score']}\n"
        history_text += f"   üÜî ID –∏–≥—Ä—ã: {game['id']}\n"
        
        if game.get('media_filename'):
            history_text += f"   üì∑ –ï—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª\n"
        
        history_text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ)
    for i, game in enumerate(tournament_games[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∏–≥—Ä
        builder.button(text=f"‚úèÔ∏è –ò–≥—Ä–∞ {i}", callback_data=f"admin_edit_game:{game['id']}")
    
    if len(tournament_games) > 5:
        builder.button(text="üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data=f"admin_tournament_games_more:{tournament_id}:5")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"tournament_games_history:{tournament_id}")
    
    await callback.message.edit_text(history_text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –∞–¥–º–∏–Ω–æ–º
@router.callback_query(F.data.startswith("admin_edit_game:"))
async def admin_edit_game(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–≥—Ä—ã –∞–¥–º–∏–Ω–æ–º"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g['id'] == game_id:
            game = g
            break
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    player1_id = game['players']['team1'][0]
    player2_id = game['players']['team2'][0]
    
    player1 = users.get(player1_id, {})
    player2 = users.get(player2_id, {})
    
    player1_name = f"{player1.get('first_name', '')} {player1.get('last_name', '')}".strip()
    player2_name = f"{player2.get('first_name', '')} {player2.get('last_name', '')}".strip()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    team1_wins = sum(1 for set_score in game['sets'] 
                    if int(set_score.split(':')[0]) > int(set_score.split(':')[1]))
    team2_wins = sum(1 for set_score in game['sets'] 
                    if int(set_score.split(':')[0]) < int(set_score.split(':')[1]))
    
    if team1_wins > team2_wins:
        current_winner = player1_name
    else:
        current_winner = player2_name
    
    game_date = datetime.fromisoformat(game['date'])
    formatted_date = game_date.strftime("%d.%m.%Y %H:%M")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ
    game_text = f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (–ê–¥–º–∏–Ω)\n\n"
    game_text += f"üÜî ID –∏–≥—Ä—ã: {game_id}\n"
    game_text += f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
    game_text += f"üë§ –ò–≥—Ä–æ–∫ 1: {player1_name}\n"
    game_text += f"üë§ –ò–≥—Ä–æ–∫ 2: {player2_name}\n"
    game_text += f"üìä –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {game['score']}\n"
    game_text += f"ü•á –¢–µ–∫—É—â–∏–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: {current_winner}\n"
    
    if game.get('media_filename'):
        game_text += f"üì∑ –ú–µ–¥–∏–∞—Ñ–∞–π–ª: {game['media_filename']}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç", callback_data=f"admin_edit_game_score:{game_id}")
    builder.button(text="üì∑ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"admin_edit_game_media:{game_id}")
    builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è", callback_data=f"admin_edit_game_winner:{game_id}")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä—É", callback_data=f"admin_delete_game:{game_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_tournament_games:{game.get('tournament_id', '')}")
    builder.adjust(1)
    
    await callback.message.edit_text(game_text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏–≥—Ä—ã
@router.callback_query(F.data.startswith("admin_edit_game_score:"))
async def admin_edit_game_score(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—á–µ—Ç–∞ –∏–≥—Ä—ã"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    await state.update_data(editing_game_id=game_id)
    await state.set_state(AdminEditGameStates.EDIT_SCORE)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –∏–≥—Ä—ã {game_id}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "6:4, 6:2 (–¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ—Ç–æ–≤)\n"
        "–∏–ª–∏\n"
        "6:4 (–¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–µ—Ç–∞)\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ 6:4, 6:2\n"
        "‚Ä¢ 7:5, 6:4, 6:2\n"
        "‚Ä¢ 6:0",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_edit_game:{game_id}")
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–≥—Ä—ã
@router.callback_query(F.data.startswith("admin_edit_game_media:"))
async def admin_edit_game_media(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–≥—Ä—ã"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    await state.update_data(editing_game_id=game_id)
    await state.set_state(AdminEditGameStates.EDIT_MEDIA)
    
    await callback.message.edit_text(
        f"üì∑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–≥—Ä—ã {game_id}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –¥–ª—è –∏–≥—Ä—ã.\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '—É–¥–∞–ª–∏—Ç—å' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª.",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_edit_game:{game_id}")
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã
@router.callback_query(F.data.startswith("admin_edit_game_winner:"))
async def admin_edit_game_winner(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    games = await storage.load_games()
    users = await storage.load_users()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g['id'] == game_id:
            game = g
            break
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–∞—Ö
    player1_id = game['players']['team1'][0]
    player2_id = game['players']['team2'][0]
    
    player1 = users.get(player1_id, {})
    player2 = users.get(player2_id, {})
    
    player1_name = f"{player1.get('first_name', '')} {player1.get('last_name', '')}".strip()
    player2_name = f"{player2.get('first_name', '')} {player2.get('last_name', '')}".strip()
    
    await state.update_data(editing_game_id=game_id)
    await state.set_state(AdminEditGameStates.EDIT_WINNER)
    
    builder = InlineKeyboardBuilder()
    builder.button(text=f"ü•á {player1_name}", callback_data=f"admin_set_winner:{game_id}:team1")
    builder.button(text=f"ü•á {player2_name}", callback_data=f"admin_set_winner:{game_id}:team2")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_edit_game:{game_id}")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã {game_id}\n\n"
        f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {game['score']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
@router.message(AdminEditGameStates.EDIT_SCORE)
async def admin_edit_score_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞ –∏–≥—Ä—ã"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    new_score = message.text.strip()
    data = await state.get_data()
    game_id = data.get('editing_game_id')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g['id'] == game_id:
            game = g
            break
    
    if not game:
        await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–π —Å—á–µ—Ç
    try:
        sets = [s.strip() for s in new_score.split(',')]
        for s in sets:
            parts = s.split(':')
            if len(parts) != 2:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞")
            int(parts[0])
            int(parts[1])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
        game['score'] = new_score
        game['sets'] = sets
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await storage.save_games(games)
        
        await message.answer(
            f"‚úÖ –°—á–µ—Ç –∏–≥—Ä—ã {game_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_score}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_edit_game:{game_id}")
            .as_markup()
        )
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: 6:4, 6:2",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_edit_game:{game_id}")
            .as_markup()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
@router.message(AdminEditGameStates.EDIT_MEDIA)
async def admin_edit_media_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∏–≥—Ä—ã"""
    if not await is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        await state.clear()
        return
    
    data = await state.get_data()
    game_id = data.get('editing_game_id')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g['id'] == game_id:
            game = g
            break
    
    if not game:
        await message.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    if message.text and message.text.lower() == '—É–¥–∞–ª–∏—Ç—å':
        # –£–¥–∞–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª
        game['media_filename'] = None
        await storage.save_games(games)
        await message.answer(
            f"‚úÖ –ú–µ–¥–∏–∞—Ñ–∞–π–ª –∏–≥—Ä—ã {game_id} —É–¥–∞–ª–µ–Ω",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_edit_game:{game_id}")
            .as_markup()
        )
    elif message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
        photo_id = message.photo[-1].file_id
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫
        await message.answer(
            f"‚úÖ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–≥—Ä—ã {game_id} –ø–æ–ª—É—á–µ–Ω–æ\n"
            f"ID —Ñ–æ—Ç–æ: {photo_id}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_edit_game:{game_id}")
            .as_markup()
        )
    elif message.video:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ
        video_id = message.video.file_id
        await message.answer(
            f"‚úÖ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –∏–≥—Ä—ã {game_id} –ø–æ–ª—É—á–µ–Ω–æ\n"
            f"ID –≤–∏–¥–µ–æ: {video_id}",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_edit_game:{game_id}")
            .as_markup()
        )
    else:
        await message.answer(
            "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '—É–¥–∞–ª–∏—Ç—å'",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_edit_game:{game_id}")
            .as_markup()
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("admin_set_winner:"))
async def admin_set_winner(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    parts = callback.data.split(":")
    game_id = parts[1]
    winner_team = parts[2]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in games:
        if g['id'] == game_id:
            game = g
            break
    
    if not game:
        await callback.answer("‚ùå –ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞–ª–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º
    if winner_team == "team1":
        # –ö–æ–º–∞–Ω–¥–∞ 1 –¥–æ–ª–∂–Ω–∞ –≤—ã–∏–≥—Ä–∞—Ç—å –±–æ–ª—å—à–µ —Å–µ—Ç–æ–≤
        new_sets = ["6:4", "6:2"]  # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
    else:
        # –ö–æ–º–∞–Ω–¥–∞ 2 –¥–æ–ª–∂–Ω–∞ –≤—ã–∏–≥—Ä–∞—Ç—å –±–æ–ª—å—à–µ —Å–µ—Ç–æ–≤
        new_sets = ["4:6", "2:6"]  # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
    
    game['sets'] = new_sets
    game['score'] = ", ".join(new_sets)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await storage.save_games(games)
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –∏–≥—Ä—ã {game_id} –∏–∑–º–µ–Ω–µ–Ω\n"
        f"–ù–æ–≤—ã–π —Å—á–µ—Ç: {game['score']}",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data=f"admin_edit_game:{game_id}")
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã
@router.callback_query(F.data.startswith("admin_delete_game:"))
async def admin_delete_game(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä—ã"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    game_id = callback.data.split(":", 1)[1]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–≥—Ä—ã
    games = await storage.load_games()
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º –∏–≥—Ä—É
    games = [g for g in games if g['id'] != game_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await storage.save_games(games)
    
    await callback.message.edit_text(
        f"‚úÖ –ò–≥—Ä–∞ {game_id} —É–¥–∞–ª–µ–Ω–∞",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ö —Å–ø–∏—Å–∫—É –∏–≥—Ä", callback_data=f"admin_tournament_games:{callback.data.split(':')[1] if ':' in callback.data else ''}")
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_tournament:"))
async def select_tournament_for_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tournament_id = callback.data.split(":", 1)[1]
    tournaments = await storage.load_tournaments()
    
    if tournament_id not in tournaments:
        await callback.answer("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    tournament_data = tournaments[tournament_id]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_tournament_id=tournament_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–µ
    location = f"{tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}"
    if tournament_data.get('district'):
        location += f" ({tournament_data['district']})"
    location += f", {tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}"
    
    text = f"üèÜ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
    text += f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—É—Ä–Ω–∏—Ä–µ:\n\n"
    text += f"üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üåç –ú–µ—Å—Ç–æ: {location}\n"
    text += f"‚öîÔ∏è –¢–∏–ø: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üë• –ü–æ–ª: {tournament_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {tournament_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë∂ –í–æ–∑—Ä–∞—Å—Ç: {tournament_data.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    text += f"‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {tournament_data.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
    text += f"üìã –í —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞: {'–î–∞' if tournament_data.get('show_in_list', False) else '–ù–µ—Ç'}\n"
    text += f"üîí –°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É: {'–î–∞' if tournament_data.get('hide_bracket', False) else '–ù–µ—Ç'}\n"
    if tournament_data.get('comment'):
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {tournament_data['comment']}\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = tournament_data.get('participants', {})
    if participants:
        text += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(participants)}):\n"
        for user_id, participant_data in participants.items():
            text += f"‚Ä¢ {participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {user_id})\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—è", callback_data="edit_tournament_fields")
    builder.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data="manage_tournament_participants")
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä", callback_data=f"delete_tournament_confirm:{tournament_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_tournaments_back")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data == "edit_tournament_fields")
async def edit_tournament_fields(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üèì –í–∏–¥ —Å–ø–æ—Ä—Ç–∞", callback_data="edit_field:sport")
    builder.button(text="üåç –°—Ç—Ä–∞–Ω–∞", callback_data="edit_field:country")
    builder.button(text="üèôÔ∏è –ì–æ—Ä–æ–¥", callback_data="edit_field:city")
    builder.button(text="üìç –†–∞–π–æ–Ω", callback_data="edit_field:district")
    builder.button(text="‚öîÔ∏è –¢–∏–ø", callback_data="edit_field:type")
    builder.button(text="üë• –ü–æ–ª", callback_data="edit_field:gender")
    builder.button(text="üèÜ –ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_field:category")
    builder.button(text="üë∂ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_field:age_group")
    builder.button(text="‚è±Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_field:duration")
    builder.button(text="üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="edit_field:participants_count")
    builder.button(text="üìã –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ", callback_data="edit_field:show_in_list")
    builder.button(text="üîí –°–∫—Ä—ã—Ç—å —Å–µ—Ç–∫—É", callback_data="edit_field:hide_bracket")
    builder.button(text="üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="edit_field:comment")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_tournament_back")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_field:"))
async def select_field_to_edit(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback.data.split(":", 1)[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(editing_field=field)
    
    tournaments = await storage.load_tournaments()
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    tournament_data = tournaments[tournament_id]
    
    if field == "sport":
        builder = InlineKeyboardBuilder()
        for sport in SPORTS:
            selected = "‚úÖ" if sport == tournament_data.get('sport') else ""
            builder.button(text=f"{selected} {sport}", callback_data=f"update_field:{sport}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üèì –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–∏–¥ —Å–ø–æ—Ä—Ç–∞\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('sport', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "country":
        builder = InlineKeyboardBuilder()
        for country in COUNTRIES:
            selected = "‚úÖ" if country == tournament_data.get('country') else ""
            builder.button(text=f"{selected} {country}", callback_data=f"update_field:{country}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üåç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –°—Ç—Ä–∞–Ω–∞\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "city":
        current_country = tournament_data.get('country', 'üá∑üá∫ –†–æ—Å—Å–∏—è')
        cities = get_cities_for_country(current_country)
        
        builder = InlineKeyboardBuilder()
        for city in cities:
            selected = "‚úÖ" if city == tournament_data.get('city') else ""
            builder.button(text=f"{selected} {city}", callback_data=f"update_field:{city}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üèôÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ì–æ—Ä–æ–¥\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "district":
        if tournament_data.get('city') == "–ú–æ—Å–∫–≤–∞":
            builder = InlineKeyboardBuilder()
            for district in DISTRICTS_MOSCOW:
                selected = "‚úÖ" if district == tournament_data.get('district') else ""
                builder.button(text=f"{selected} {district}", callback_data=f"update_field:{district}")
            builder.adjust(2)
            
            await callback.message.edit_text(
                f"üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –†–∞–π–æ–Ω\n\n"
                f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('district', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                reply_markup=builder.as_markup()
            )
        else:
            await callback.message.edit_text(
                f"üìç –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –†–∞–π–æ–Ω\n\n"
                f"–î–ª—è –≥–æ—Ä–æ–¥–∞ {tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')} –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                f"–†–∞–π–æ–Ω –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –ú–æ—Å–∫–≤—ã.",
                reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_tournament_fields").as_markup()
            )
    
    elif field == "type":
        builder = InlineKeyboardBuilder()
        for t_type in TOURNAMENT_TYPES:
            selected = "‚úÖ" if t_type == tournament_data.get('type') else ""
            builder.button(text=f"{selected} {t_type}", callback_data=f"update_field:{t_type}")
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"‚öîÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –¢–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "gender":
        builder = InlineKeyboardBuilder()
        for gender in GENDERS:
            selected = "‚úÖ" if gender == tournament_data.get('gender') else ""
            builder.button(text=f"{selected} {gender}", callback_data=f"update_field:{gender}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üë• –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "category":
        builder = InlineKeyboardBuilder()
        for category in CATEGORIES:
            selected = "‚úÖ" if category == tournament_data.get('category') else ""
            builder.button(text=f"{selected} {category}", callback_data=f"update_field:{category}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üèÜ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "age_group":
        builder = InlineKeyboardBuilder()
        for age_group in AGE_GROUPS:
            selected = "‚úÖ" if age_group == tournament_data.get('age_group') else ""
            builder.button(text=f"{selected} {age_group}", callback_data=f"update_field:{age_group}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üë∂ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('age_group', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "duration":
        builder = InlineKeyboardBuilder()
        for duration in DURATIONS:
            selected = "‚úÖ" if duration == tournament_data.get('duration') else ""
            builder.button(text=f"{selected} {duration}", callback_data=f"update_field:{duration}")
        builder.adjust(1)
        
        await callback.message.edit_text(
            f"‚è±Ô∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('duration', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "participants_count":
        await callback.message.edit_text(
            f"üë• –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_tournament_fields").as_markup()
        )
        await state.set_state(EditTournamentStates.EDIT_PARTICIPANTS_COUNT)
    
    elif field == "show_in_list":
        current_value = tournament_data.get('show_in_list', False)
        builder = InlineKeyboardBuilder()
        for option in YES_NO_OPTIONS:
            selected = "‚úÖ" if (option == "–î–∞" and current_value) or (option == "–ù–µ—Ç" and not current_value) else ""
            builder.button(text=f"{selected} {option}", callback_data=f"update_field:{option}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üìã –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–ø–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {'–î–∞' if current_value else '–ù–µ—Ç'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "hide_bracket":
        current_value = tournament_data.get('hide_bracket', False)
        builder = InlineKeyboardBuilder()
        for option in YES_NO_OPTIONS:
            selected = "‚úÖ" if (option == "–î–∞" and current_value) or (option == "–ù–µ—Ç" and not current_value) else ""
            builder.button(text=f"{selected} {option}", callback_data=f"update_field:{option}")
        builder.adjust(2)
        
        await callback.message.edit_text(
            f"üîí –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –°–∫—Ä—ã—Ç—å —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {'–î–∞' if current_value else '–ù–µ—Ç'}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
            reply_markup=builder.as_markup()
        )
    
    elif field == "comment":
        await callback.message.edit_text(
            f"üí¨ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n\n"
            f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {tournament_data.get('comment', '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è')}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            reply_markup=InlineKeyboardBuilder().button(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_tournament_fields").as_markup()
        )
        await state.set_state(EditTournamentStates.EDIT_COMMENT)
    
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è
@router.callback_query(F.data.startswith("update_field:"))
async def update_tournament_field(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    new_value = callback.data.split(":", 1)[1]
    
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    field = data.get('editing_field')
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ
    if field == "show_in_list":
        tournament_data[field] = new_value == "–î–∞"
    elif field == "hide_bracket":
        tournament_data[field] = new_value == "–î–∞"
    else:
        tournament_data[field] = new_value
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await storage.save_tournaments(tournaments)
    
    await callback.message.edit_text(
        f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {new_value}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_tournament_fields")
        .button(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
        .adjust(1)
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@router.message(EditTournamentStates.EDIT_PARTICIPANTS_COUNT)
async def edit_participants_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
    try:
        count = int(message.text.strip())
        if count <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        data = await state.get_data()
        tournament_id = data.get('editing_tournament_id')
        
        tournaments = await storage.load_tournaments()
        tournament_data = tournaments[tournament_id]
        tournament_data['participants_count'] = count
        
        await storage.save_tournaments(tournaments)
        
        await message.answer(
            f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
            f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {count}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardBuilder()
            .button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_tournament_fields")
            .button(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
            .adjust(1)
            .as_markup()
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(EditTournamentStates.EDIT_COMMENT)
async def edit_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = message.text.strip()
    if comment == "-":
        comment = ""
    
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    tournament_data['comment'] = comment
    
    await storage.save_tournaments(tournaments)
    
    await message.answer(
        f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
        f"–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {comment if comment else '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ", callback_data="edit_tournament_fields")
        .button(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
        .adjust(1)
        .as_markup()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
@router.callback_query(F.data == "manage_tournament_participants")
async def manage_tournament_participants(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    text = f"üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
    text += f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
    text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}/{tournament_data.get('participants_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
    
    if participants:
        text += "üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n"
        for user_id, participant_data in participants.items():
            text += f"‚Ä¢ {participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} (ID: {user_id})\n"
    else:
        text += "üìã –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç\n"
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="add_tournament_participant")
    if participants:
        builder.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞", callback_data="remove_tournament_participant")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_tournament:{tournament_id}")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
@router.callback_query(F.data == "add_tournament_participant")
async def add_tournament_participant(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä"""
    await state.set_state(EditTournamentStates.ADD_PARTICIPANT)
    
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tournament_participants")
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞
@router.message(EditTournamentStates.ADD_PARTICIPANT)
async def input_participant_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ ID —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    try:
        user_id = int(message.text.strip())
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        users = await storage.load_users()
        if str(user_id) not in users:
            data = await state.get_data()
            tournament_id = data.get('editing_tournament_id') or data.get('admin_editing_tournament_id')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π)
            is_admin_mode = 'admin_editing_tournament_id' in data
            
            if is_admin_mode:
                back_callback = f"admin_view_participants:{tournament_id}"
            else:
                back_callback = "manage_tournament_participants"
            
            await message.answer(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':",
                reply_markup=InlineKeyboardBuilder()
                .button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                .as_markup()
            )
            return
        
        data = await state.get_data()
        tournament_id = data.get('editing_tournament_id') or data.get('admin_editing_tournament_id')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π)
        is_admin_mode = 'admin_editing_tournament_id' in data
        
        tournaments = await storage.load_tournaments()
        tournament_data = tournaments[tournament_id]
        participants = tournament_data.get('participants', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if str(user_id) in participants:
            if is_admin_mode:
                back_callback = f"admin_view_participants:{tournament_id}"
            else:
                back_callback = "manage_tournament_participants"
            
            await message.answer(
                "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —Ç—É—Ä–Ω–∏—Ä–µ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':",
                reply_markup=InlineKeyboardBuilder()
                .button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
                .as_markup()
            )
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_data = users[str(user_id)]
        participants[str(user_id)] = {
            'name': f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}",
            'phone': user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω'),
            'added_at': datetime.now().isoformat(),
            'added_by': message.from_user.id
        }
        
        tournament_data['participants'] = participants
        await storage.save_tournaments(tournaments)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤ –ª–∏ —Ç—É—Ä–Ω–∏—Ä –∫ –∑–∞–ø—É—Å–∫—É
        tournament_ready = await tournament_manager.check_tournament_readiness(tournament_id)
        
        success_message = f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç—É—Ä–Ω–∏—Ä!\n\n"
        success_message += f"üë§ –ò–º—è: {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        success_message += f"üÜî ID: {user_id}\n"
        success_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        
        if tournament_ready and tournament_data.get('status') == 'active':
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—É—Ä–Ω–∏—Ä
            tournament_started = await tournament_manager.start_tournament(tournament_id)
            
            if tournament_started:
                success_message += f"üéâ *–¢—É—Ä–Ω–∏—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω!*\n\n"
                success_message += f"üèÜ –ù–∞–±—Ä–∞–Ω–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
                success_message += f"‚öîÔ∏è –ú–∞—Ç—á–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞–º\n\n"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
                try:
                    from main import bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
                    notifications = TournamentNotifications(bot)
                    await notifications.notify_tournament_started(tournament_id, tournament_data)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞: {e}")
            else:
                success_message += f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä\n"
        else:
            tournament_type = tournament_data.get('type', '–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞')
            min_participants = MIN_PARTICIPANTS.get(tournament_type, 4)
            current_count = len(participants)
            success_message += f"üìä –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_count}/{min_participants}\n"
            success_message += f"‚è≥ –î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        builder = InlineKeyboardBuilder()
        if is_admin_mode:
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data=f"admin_add_participant:{tournament_id}")
            builder.button(text="üë• –ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data=f"admin_view_participants:{tournament_id}")
            builder.button(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="admin_back_to_tournament_list")
        else:
            builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_tournament_participant")
            builder.button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data="manage_tournament_participants")
            builder.button(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
        
        builder.adjust(1)
        
        await message.answer(
            success_message,
            reply_markup=builder.as_markup(),
            parse_mode='Markdown'
        )
        
    except ValueError:
        data = await state.get_data()
        tournament_id = data.get('editing_tournament_id') or data.get('admin_editing_tournament_id')
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã (–æ–±—ã—á–Ω—ã–π –∏–ª–∏ –∞–¥–º–∏–Ω—Å–∫–∏–π)
        is_admin_mode = 'admin_editing_tournament_id' in data
        
        if is_admin_mode:
            back_callback = f"admin_view_participants:{tournament_id}"
        else:
            back_callback = "manage_tournament_participants"
        
        await message.answer(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á–∏—Å–ª–æ).\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥':",
            reply_markup=InlineKeyboardBuilder()
            .button(text="üîô –ù–∞–∑–∞–¥", callback_data=back_callback)
            .as_markup()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
@router.callback_query(F.data == "remove_tournament_participant")
async def remove_tournament_participant(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞"""
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    if not participants:
        await callback.answer("‚ùå –í —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, participant_data in participants.items():
        name = participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        builder.button(text=f"‚ûñ {name} (ID: {user_id})", callback_data=f"remove_participant:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="manage_tournament_participants")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("remove_participant:"))
async def confirm_remove_participant(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    user_id = callback.data.split(":", 1)[1]
    
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    if user_id not in participants:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    participant_data = participants[user_id]
    
    # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    del participants[user_id]
    tournament_data['participants'] = participants
    await storage.save_tournaments(tournaments)
    
    await callback.message.edit_text(
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞!\n\n"
        f"üë§ –ò–º—è: {participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üÜî ID: {user_id}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data="remove_tournament_participant")
        .button(text="üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏", callback_data="manage_tournament_participants")
        .button(text="üîô –ö —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"edit_tournament:{tournament_id}")
        .adjust(1)
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("delete_tournament_confirm:"))
async def confirm_delete_tournament(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = callback.data.split(":", 1)[1]
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_tournament_yes:{tournament_id}")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"edit_tournament:{tournament_id}")
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?\n\n"
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(tournament_data.get('participants', {}))}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞
@router.callback_query(F.data.startswith("delete_tournament_yes:"))
async def delete_tournament_yes(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    tournament_id = callback.data.split(":", 1)[1]
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    
    # –£–¥–∞–ª—è–µ–º —Ç—É—Ä–Ω–∏—Ä
    del tournaments[tournament_id]
    await storage.save_tournaments(tournaments)
    
    await state.clear()
    
    await callback.message.edit_text(
        f"‚úÖ –¢—É—Ä–Ω–∏—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
        f"üèÜ –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        f"üìç –ú–µ—Å—Ç–æ: {tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
        f"–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç—É—Ä–Ω–∏—Ä–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.callback_query(F.data.startswith("admin_remove_participant_menu:"))
async def admin_remove_participant_menu(callback: CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(":", 1)[1]
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    if not participants:
        await callback.answer("‚ùå –í —Ç—É—Ä–Ω–∏—Ä–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for user_id, participant_data in participants.items():
        name = participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        builder.button(text=f"üóëÔ∏è {name} (ID: {user_id})", callback_data=f"admin_remove_participant:{tournament_id}:{user_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data=f"admin_view_participants:{tournament_id}")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.callback_query(F.data.startswith("admin_remove_participant:"))
async def admin_remove_participant(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    parts = callback.data.split(":")
    tournament_id = parts[1]
    user_id = parts[2]
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments[tournament_id]
    participants = tournament_data.get('participants', {})
    
    if user_id not in participants:
        await callback.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    participant_data = participants[user_id]
    
    # –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    del participants[user_id]
    tournament_data['participants'] = participants
    await storage.save_tournaments(tournaments)
    
    await callback.message.edit_text(
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Ç—É—Ä–Ω–∏—Ä–∞!\n\n"
        f"üë§ –ò–º—è: {participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üÜî ID: {user_id}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –µ—â–µ", callback_data=f"admin_remove_participant_menu:{tournament_id}")
        .button(text="üë• –ö —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data=f"admin_view_participants:{tournament_id}")
        .button(text="üîô –ö —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤", callback_data="admin_back_to_tournament_list")
        .adjust(1)
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.callback_query(F.data.startswith("admin_add_participant:"))
async def admin_add_participant(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not await is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
    
    tournament_id = callback.data.split(":", 1)[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—É—Ä–Ω–∏—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(admin_editing_tournament_id=tournament_id)
    await state.set_state(EditTournamentStates.ADD_PARTICIPANT)
    
    await callback.message.edit_text(
        "‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ —Ç—É—Ä–Ω–∏—Ä\n\n"
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ç—É—Ä–Ω–∏—Ä:",
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥ –∫ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º", callback_data=f"admin_view_participants:{tournament_id}")
        .as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.callback_query(F.data == "admin_back_to_tournament_list")
async def admin_back_to_tournament_list(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await callback.message.edit_text("üìã –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
        return
    
    builder = InlineKeyboardBuilder()
    for tournament_id, tournament_data in tournaments.items():
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        participants_count = len(tournament_data.get('participants', {}))
        builder.button(text=f"üèÜ {name} ({city}) - {participants_count} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", 
                      callback_data=f"admin_view_participants:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üë• –ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
@router.callback_query(F.data == "edit_tournaments_back")
async def edit_tournaments_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tournaments = await storage.load_tournaments()
    
    if not tournaments:
        await callback.message.edit_text("üìã –ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    builder = InlineKeyboardBuilder()
    for tournament_id, tournament_data in tournaments.items():
        name = tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        city = tournament_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        builder.button(text=f"üèÜ {name} ({city})", callback_data=f"edit_tournament:{tournament_id}")
    
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="admin_back_to_main")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "üèÜ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É—Ä–Ω–∏—Ä –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "edit_tournament_back")
async def edit_tournament_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ç—É—Ä–Ω–∏—Ä—É"""
    data = await state.get_data()
    tournament_id = data.get('editing_tournament_id')
    
    if tournament_id:
        await select_tournament_for_edit(callback, state)
    else:
        await edit_tournaments_back(callback, state)

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤
@router.callback_query(F.data == "tournaments_main_menu")
async def tournaments_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    tournaments = await storage.load_tournaments()
    active_tournaments = {k: v for k, v in tournaments.items() if v.get('status') == 'active'}
    
    text = (
        f"üèÜ –¢—É—Ä–Ω–∏—Ä—ã\n\n"
        f"–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥–∏—Ç: {len(active_tournaments)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤\n"
        f"–£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏!\n\n"
        f"üìã –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤, "
        f"–ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã."
    )
    
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="view_tournaments_start")
    builder.button(text="üìù –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_applications_list:0")
    builder.button(text="üéØ –ú–æ–∏ —Ç—É—Ä–Ω–∏—Ä—ã", callback_data="my_tournaments_list:0")
    builder.adjust(1)
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏
@router.callback_query(F.data.startswith("tournament_bracket:"))
async def tournament_bracket(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏"""
    tournament_id = callback.data.split(":")[1]
    
    tournaments = await storage.load_tournaments()
    tournament_data = tournaments.get(tournament_id, {})
    
    if not tournament_data:
        await callback.message.edit_text("‚ùå –¢—É—Ä–Ω–∏—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    participants = tournament_data.get('participants', {})
    tournament_type = tournament_data.get('type', '–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    min_participants = MIN_PARTICIPANTS.get(tournament_type, 4)
    current_participants = len(participants)
    
    if current_participants < min_participants:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Ç–∫–∏!\n\n"
            f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
            f"‚öîÔ∏è –¢–∏–ø: {tournament_type}\n"
            f"üë• –¢–µ–∫—É—â–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_participants}\n"
            f"üìä –ú–∏–Ω–∏–º—É–º —Ç—Ä–µ–±—É–µ—Ç—Å—è: {min_participants}\n\n"
            f"–î–æ–∂–¥–∏—Ç–µ—Å—å –Ω–∞–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"view_tournament:{tournament_id}")]]
            )
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–µ—Ç–∫–∏
    players = []
    users = await storage.load_users()
    
    for user_id, participant_data in participants.items():
        user_data = users.get(user_id, {})
        player = Player(
            id=user_id,
            name=participant_data.get('name', user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')),
            photo_url=user_data.get('photo_path'),
            initial=None
        )
        players.append(player)
    
    # –°–æ–∑–¥–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—É—é —Å–µ—Ç–∫—É
    try:
        bracket = create_tournament_bracket(players, tournament_type)
        
        # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏
        bracket_image = create_bracket_image(bracket)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∞–π—Ç—ã
        img_byte_arr = io.BytesIO()
        bracket_image.save(img_byte_arr, format='PNG')
        img_byte_arr.seek(0)
        
        # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è aiogram
        photo_file = BufferedInputFile(
            file=img_byte_arr.getvalue(),
            filename="tournament_bracket.png"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await callback.message.answer_photo(
            photo=photo_file,
            caption=f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω–∞—è —Å–µ—Ç–∫–∞\n\n"
                   f"üìã –¢—É—Ä–Ω–∏—Ä: {tournament_data.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                   f"‚öîÔ∏è –¢–∏–ø: {tournament_type}\n"
                   f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {current_participants}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"view_tournament:{tournament_id}")]]
            )
        )
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–π —Å–µ—Ç–∫–∏\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç—É—Ä–Ω–∏—Ä—É", callback_data=f"view_tournament:{tournament_id}")]]
            )
        )
    
    await callback.answer()

