from typing import Union
from aiogram import types
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from models.states import SearchPartnerStates

async def show_age_range_selection(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    builder = InlineKeyboardBuilder()
    
    # –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    age_ranges = [
        ("18-25", "18-25 –ª–µ—Ç"),
        ("26-35", "26-35 –ª–µ—Ç"), 
        ("36-45", "36-45 –ª–µ—Ç"),
        ("46-55", "46-55 –ª–µ—Ç"),
        ("56+", "56+ –ª–µ—Ç"),
        ("any", "–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç")
    ]
    
    for value, label in age_ranges:
        builder.add(InlineKeyboardButton(
            text=label,
            callback_data=f"partner_age_{value}"
        ))
    
    builder.adjust(2, 2)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—É",
        callback_data="partner_back_to_gender"
    ))
    
    await message_obj.edit_text(
        "üéÇ –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_AGE_RANGE)

async def show_dating_goal_selection(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞"""
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    builder = InlineKeyboardBuilder()
    
    # –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    goals = [
        ("any", "–õ—é–±–∞—è —Ü–µ–ª—å"),
        ("relationship", "–û—Ç–Ω–æ—à–µ–Ω–∏—è"),
        ("communication", "–û–±—â–µ–Ω–∏–µ"),
        ("friendship", "–î—Ä—É–∂–±–∞"),
        ("never_know", "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –±—É–¥–µ—Ç")
    ]
    
    for value, label in goals:
        builder.add(InlineKeyboardButton(
            text=label,
            callback_data=f"partner_dating_goal_{value}"
        ))
    
    builder.adjust(1, 2)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–æ–∑—Ä–∞—Å—Ç—É",
        callback_data="partner_back_to_age"
    ))
    
    await message_obj.edit_text(
        "üíï –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_DATING_GOAL)

async def show_distance_selection(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤"""
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    builder = InlineKeyboardBuilder()
    
    # –î–∏–∞–ø–∞–∑–æ–Ω—ã —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    distances = [
        ("5", "5 –∫–º"),
        ("10", "10 –∫–º"),
        ("20", "20 –∫–º"),
        ("50", "50 –∫–º"),
        ("100", "100 –∫–º"),
        ("any", "–õ—é–±–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
    ]
    
    for value, label in distances:
        builder.add(InlineKeyboardButton(
            text=label,
            callback_data=f"partner_distance_{value}"
        ))
    
    builder.adjust(2, 2)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ü–µ–ª–∏",
        callback_data="partner_back_to_dating_goal"
    ))
    
    await message_obj.edit_text(
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_DISTANCE)
