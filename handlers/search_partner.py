from typing import Union
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config.profile import (
    GENDER_TYPES, player_levels, cities_data, countries, sport_type,
    get_sport_config
)
from handlers.dating_filters import show_age_range_selection, show_dating_goal_selection, show_distance_selection
from models.states import SearchPartnerStates
from utils.bot import show_profile
from utils.utils import calculate_age, count_users_by_location, get_users_by_location, get_top_countries, get_top_cities
from services.storage import storage

router = Router()

@router.message(F.text == "üéæ –ü–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
async def handle_search_partner(message: types.Message, state: FSMContext):
    await state.set_state(SearchPartnerStates.SEARCH_TYPE)
    await state.update_data(search_type="partner")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.update_data(first_message_id=message.message_id + 1)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞" –ø–µ—Ä–≤–æ–π
    builder.row(InlineKeyboardButton(
        text="üéæ –õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞",
        callback_data="partner_sport_any"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
    for sport in sport_type:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
        builder.add(InlineKeyboardButton(
            text=sport,
            callback_data=f"partner_sport_{sport}"
        ))
    
    builder.adjust(1, 2)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="partner_back_to_main"
    ))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    sent_message = await message.answer(
        "üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(SearchPartnerStates.SEARCH_SPORT)

@router.callback_query(SearchPartnerStates.SEARCH_SPORT, F.data.startswith("partner_sport_"))
async def process_search_sport_partner(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_sport_any":
        await state.update_data(sport_type=None)
    else:
        sport_type_val = callback.data.split("_", 2)[2]
        await state.update_data(sport_type=sport_type_val)
    
    data = await state.get_data()
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    buttons = []
    for country in countries[:5]:
        count = await count_users_by_location(search_type, country, sport_type=sport_type_val)
        buttons.append([InlineKeyboardButton(
            text=f"{country} ({count})", 
            callback_data=f"partner_search_country_{country}"
        )])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    other_countries = await get_top_countries(search_type=search_type, sport_type=sport_type_val, exclude_countries=countries[:5])
    other_countries_count = sum(count for country, count in other_countries)
    
    if other_countries_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üåé –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ({other_countries_count})", 
            callback_data="partner_search_other_country"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞", 
        callback_data="partner_back_to_sport"
    )])

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    
    await state.set_state(SearchPartnerStates.SEARCH_COUNTRY)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_SPORT, F.data == "partner_back_to_main")
async def partner_back_to_main_from_sport(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_COUNTRY, F.data.startswith("partner_search_country_"))
async def process_search_country_partner(callback: types.CallbackQuery, state: FSMContext):
    country = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(search_country=country)
    
    data = await state.get_data()
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    cities_data_result = await get_users_by_location(
        search_type, 
        country=country, 
        sport_type=sport_type_val, 
        limit=20
    )
    
    buttons = []
    if cities_data_result:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_cities = sorted(cities_data_result.items(), key=lambda x: x[1], reverse=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤
        for city, count in sorted_cities:
            buttons.append([InlineKeyboardButton(
                text=f"{city} ({count})", 
                callback_data=f"partner_search_city_{city}"
            )])
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "–î—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
        other_cities_count = sum(count for city, count in sorted_cities[5:])
        
        if other_cities_count > 0:
            buttons.append([InlineKeyboardButton(
                text=f"üèô –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ ({other_cities_count})", 
                callback_data="partner_search_other_city"
            )])
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        if country == "üá∑üá∫ –†–æ—Å—Å–∏—è":
            main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
            for city in main_russian_cities:
                count = await count_users_by_location(search_type, country, city, sport_type_val, )
                buttons.append([InlineKeyboardButton(
                    text=f"{city} ({count})", 
                    callback_data=f"partner_search_city_{city}"
                )])
        else:
            cities = cities_data.get(country, [])
            for city in cities:
                count = await count_users_by_location(search_type, country, city, sport_type_val, )
                buttons.append([InlineKeyboardButton(
                    text=f"{city} ({count})", 
                    callback_data=f"partner_search_city_{city}"
                )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", 
        callback_data="partner_back_to_countries"
    )])
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ {country}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    
    await state.set_state(SearchPartnerStates.SEARCH_CITY)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_CITY, F.data.startswith("partner_search_city_"))
async def process_search_city_partner(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(search_city=city)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –æ–∫—Ä—É–≥–∞
    data = await state.get_data()
    country = data.get('search_country')
    
    if country == "üá∑üá∫ –†–æ—Å—Å–∏—è" and city == "–ú–æ—Å–∫–≤–∞":
        # –¢–æ–ª—å–∫–æ –¥–ª—è –ú–æ—Å–∫–≤—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –æ–∫—Ä—É–≥–∞
        await show_district_selection(callback.message, state)
    else:
        await show_gender_selection(callback.message, state)
    await callback.answer()

async def show_district_selection(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    data = await state.get_data()
    city = data.get('search_city')
    
    # –°–ø–∏—Å–æ–∫ –æ–∫—Ä—É–≥–æ–≤ —Ç–æ–ª—å–∫–æ –¥–ª—è –ú–æ—Å–∫–≤—ã
    moscow_districts = ["–¶–ê–û", "–°–ê–û", "–°–í–ê–û", "–í–ê–û", "–Æ–í–ê–û", "–Æ–ê–û", "–Æ–ó–ê–û", "–ó–ê–û", "–°–ó–ê–û", "–¢–∏–ù–ê–û"]
    
    if city != "–ú–æ—Å–∫–≤–∞":
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ú–æ—Å–∫–≤–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
        await show_gender_selection(message, state)
        return
    
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π –æ–∫—Ä—É–≥"
    builder.row(InlineKeyboardButton(
        text="üèòÔ∏è –õ—é–±–æ–π –æ–∫—Ä—É–≥",
        callback_data="partner_district_any"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∫—Ä—É–≥–∞ –ú–æ—Å–∫–≤—ã
    for district in moscow_districts:
        builder.add(InlineKeyboardButton(
            text=district,
            callback_data=f"partner_district_{district}"
        ))
    
    builder.adjust(3)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º",
        callback_data="partner_back_to_cities"
    ))
    
    await message_obj.edit_text(
        f"üèòÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–≥ –≤ –≥–æ—Ä–æ–¥–µ {city}:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_DISTRICT)

@router.callback_query(SearchPartnerStates.SEARCH_DISTRICT, F.data.startswith("partner_district_"))
async def process_district_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_district_any":
        await state.update_data(district=None)
    else:
        district = callback.data.split("_", 2)[2]
        await state.update_data(district=district)
    
    await show_gender_selection(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_DISTRICT, F.data == "partner_back_to_cities")
async def partner_back_to_cities_from_district(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data.get('search_country')
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    cities_data_result = await get_users_by_location(
        search_type, 
        country=country, 
        sport_type=sport_type_val, 
        limit=20
    )
    
    buttons = []
    if cities_data_result:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_cities = sorted(cities_data_result.items(), key=lambda x: x[1], reverse=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤
        for city, count in sorted_cities:
            buttons.append([InlineKeyboardButton(
                text=f"{city} ({count})", 
                callback_data=f"partner_search_city_{city}"
            )])
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "–î—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
        other_cities_count = sum(count for city, count in sorted_cities[5:])
        
        if other_cities_count > 0:
            buttons.append([InlineKeyboardButton(
                text=f"üèô –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ ({other_cities_count})", 
                callback_data="partner_search_other_city"
            )])
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        if country == "üá∑üá∫ –†–æ—Å—Å–∏—è":
            main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
            for city in main_russian_cities:
                count = await count_users_by_location(search_type, country, city, sport_type_val)
                buttons.append([InlineKeyboardButton(
                    text=f"{city} ({count})", 
                    callback_data=f"partner_search_city_{city}"
                )])
        else:
            cities = cities_data.get(country, [])
            for city in cities:
                count = await count_users_by_location(search_type, country, city, sport_type_val)
                buttons.append([InlineKeyboardButton(
                    text=f"{city} ({count})", 
                    callback_data=f"partner_search_city_{city}"
                )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", 
        callback_data="partner_back_to_countries"
    )])
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ {country}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchPartnerStates.SEARCH_CITY)
    await callback.answer()

async def show_gender_selection(message: Union[types.Message, types.CallbackQuery], state: FSMContext, new_mess = False):
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    builder = InlineKeyboardBuilder()
    
    builder.row(InlineKeyboardButton(
        text="üë• –õ—é–±–æ–π –ø–æ–ª",
        callback_data="partner_gender_any"
    ))

    for gender in GENDER_TYPES:
        builder.add(InlineKeyboardButton(
            text=gender,
            callback_data=f"partner_gender_{gender}"
        ))
    
    builder.adjust(1, 2)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–æ—Ä–æ–¥–∞–º",
        callback_data="partner_back_to_cities"
    ))
    
    if new_mess:
        sent_message = await message_obj.answer(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=builder.as_markup()
    )
        await state.update_data(last_message_id=sent_message.message_id)
    else:
        await message_obj.edit_text(
            "üë• –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
            reply_markup=builder.as_markup()
        )
    await state.set_state(SearchPartnerStates.SEARCH_GENDER)

@router.callback_query(SearchPartnerStates.SEARCH_GENDER, F.data.startswith("partner_gender_"))
async def process_gender_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_gender_any":
        await state.update_data(gender=None)
    else:
        gender = callback.data.split("_", 2)[2]
        await state.update_data(gender=gender)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏–ª–∏ –Ω–µ—Ç
    data = await state.get_data()
    sport_type_val = data.get('sport_type')
    
    if sport_type_val == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        await show_age_range_selection(callback.message, state)
    else:
        await show_level_selection(callback.message, state)
    await callback.answer()

async def show_level_selection(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    builder = InlineKeyboardBuilder()
    
    builder.row(InlineKeyboardButton(
        text="üéØ –õ—é–±–æ–π —É—Ä–æ–≤–µ–Ω—å",
        callback_data="partner_level_any"
    ))

    for level in player_levels:
        builder.add(InlineKeyboardButton(
            text=level,
            callback_data=f"partner_level_{level}"
        ))
    
    builder.adjust(1, 3)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—É",
        callback_data="partner_back_to_gender"
    ))
    
    await message_obj.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∏–≥—Ä—ã –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_LEVEL)

@router.callback_query(SearchPartnerStates.SEARCH_LEVEL, F.data.startswith("partner_level_"))
async def process_level_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_level_any":
        await state.update_data(level=None)
    else:
        level = callback.data.split("_", 2)[2]
        await state.update_data(level=level)
    
    await perform_partner_search(callback.message, state)
    await callback.answer()

async def perform_partner_search(message: Union[types.Message, types.CallbackQuery], state: FSMContext):
    if isinstance(message, types.CallbackQuery):
        message_obj = message.message
    else:
        message_obj = message
    
    data = await state.get_data()
    country = data.get('search_country')
    city = data.get('search_city')
    district = data.get('district')
    sport_type_val = data.get('sport_type')
    gender = data.get('gender')
    level = data.get('level')
    age_range = data.get('age_range')
    dating_goal = data.get('dating_goal')
    distance = data.get('distance')
    
    users = await storage.load_users()
    current_user_id = str(message_obj.chat.id)
    results = []
    
    for user_id, profile in users.items():
        if not profile.get('show_in_search', True):
            continue
        
        # –î–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        if sport_type_val != "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞" and profile.get('role') != "–ò–≥—Ä–æ–∫":
            continue
        
        if profile.get('country') != country or profile.get('city') != city:
            continue
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –æ–∫—Ä—É–≥—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        if district and profile.get('district') != district:
            continue
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞
        if sport_type_val and profile.get('sport') != sport_type_val:
            continue
            
        if gender and profile.get('gender') != gender:
            continue
            
        if level and profile.get('player_level') != level:
            continue
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
        if sport_type_val == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
            # –§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
            if age_range and age_range != "any":
                user_age = await calculate_age(profile.get('birth_date', '01.01.2000'))
                if age_range == "18-25" and not (18 <= user_age <= 25):
                    continue
                elif age_range == "26-35" and not (26 <= user_age <= 35):
                    continue
                elif age_range == "36-45" and not (36 <= user_age <= 45):
                    continue
                elif age_range == "46-55" and not (46 <= user_age <= 55):
                    continue
                elif age_range == "56+" and user_age < 56:
                    continue
            
            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ø–ø–∏–Ω–≥
            if dating_goal and dating_goal != "any":
                profile_goal = profile.get('dating_goal')
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ–ª–Ω—ã–µ
                goal_mapping = {
                    "relationship": "–û—Ç–Ω–æ—à–µ–Ω–∏—è",
                    "communication": "–û–±—â–µ–Ω–∏–µ", 
                    "friendship": "–î—Ä—É–∂–±–∞",
                    "never_know": "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –±—É–¥–µ—Ç"
                }
                target_goal = goal_mapping.get(dating_goal, dating_goal)
                if profile_goal != target_goal:
                    continue
            
        results.append((user_id, profile))
    
    if not results:
        sport_text = f" –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ {sport_type_val}" if sport_type_val else ""
        gender_text = f", –ø–æ–ª: {gender}" if gender else ""
        level_text = f", —É—Ä–æ–≤–µ–Ω—å: {level}" if level else ""
        
        await message_obj.edit_text(
            f"üòï –í –≥–æ—Ä–æ–¥–µ {city} ({country}){sport_text}{gender_text}{level_text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="partner_back_to_level")
            ]])
        )
        await state.set_state(SearchPartnerStates.SEARCH_NO_RESULTS)
        return
    
    await state.update_data(search_results=results, current_page=0)
    await show_partner_results_list(message_obj, state, 0)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∑–Ω–∞–∫–æ–º—Å—Ç–≤
@router.callback_query(SearchPartnerStates.SEARCH_AGE_RANGE, F.data.startswith("partner_age_"))
async def process_age_range_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_age_any":
        await state.update_data(age_range=None)
    else:
        age_range = callback.data.split("_", 2)[2]
        await state.update_data(age_range=age_range)
    
    await show_dating_goal_selection(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_AGE_RANGE, F.data == "partner_back_to_gender")
async def partner_back_to_gender_from_age(callback: types.CallbackQuery, state: FSMContext):
    await show_gender_selection(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_DATING_GOAL, F.data.startswith("partner_dating_goal_"))
async def process_dating_goal_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_dating_goal_any":
        await state.update_data(dating_goal=None)
    else:
        dating_goal = callback.data.split("_", 3)[3]
        await state.update_data(dating_goal=dating_goal)
    
    await show_distance_selection(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_DATING_GOAL, F.data == "partner_back_to_age")
async def partner_back_to_age_from_dating_goal(callback: types.CallbackQuery, state: FSMContext):
    await show_age_range_selection(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_DISTANCE, F.data.startswith("partner_distance_"))
async def process_distance_selection(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "partner_distance_any":
        await state.update_data(distance=None)
    else:
        distance = int(callback.data.split("_", 2)[2])
        await state.update_data(distance=distance)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É
    await perform_partner_search(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_DISTANCE, F.data == "partner_back_to_dating_goal")
async def partner_back_to_dating_goal_from_distance(callback: types.CallbackQuery, state: FSMContext):
    await show_dating_goal_selection(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ "–ù–∞–∑–∞–¥"
@router.callback_query(SearchPartnerStates.SEARCH_COUNTRY, F.data == "partner_back_to_sport")
async def partner_back_to_sport_from_country(callback: types.CallbackQuery, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞" –ø–µ—Ä–≤–æ–π
    builder.row(InlineKeyboardButton(
        text="üéæ –õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞",
        callback_data="partner_sport_any"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
    for sport in sport_type:
        builder.add(InlineKeyboardButton(
            text=sport,
            callback_data=f"partner_sport_{sport}"
        ))
    
    builder.adjust(1, 2)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="partner_back_to_main"
    ))

    await callback.message.edit_text(
        "üéæ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_SPORT)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_CITY, F.data == "partner_back_to_countries")
async def partner_back_to_countries_from_city(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    buttons = []
    for country in countries[:5]:
        count = await count_users_by_location(search_type, country, sport_type=sport_type_val)
        buttons.append([InlineKeyboardButton(
            text=f"{country} ({count})", 
            callback_data=f"partner_search_country_{country}"
        )])
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
    other_countries = await get_top_countries(search_type=search_type, sport_type=sport_type_val, exclude_countries=countries[:5])
    other_countries_count = sum(count for country, count in other_countries)
    
    if other_countries_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üåé –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã ({other_countries_count})", 
            callback_data="partner_search_other_country"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞", 
        callback_data="partner_back_to_sport"
    )])
    
    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchPartnerStates.SEARCH_COUNTRY)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_GENDER, F.data == "partner_back_to_cities")
async def partner_back_to_cities_from_gender(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data.get('search_country')
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
    cities_data_result = await get_users_by_location(
        search_type, 
        country=country, 
        sport_type=sport_type_val, 
        limit=20
    )
    
    buttons = []
    if cities_data_result:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        sorted_cities = sorted(cities_data_result.items(), key=lambda x: x[1], reverse=True)
        
        # –ë–µ—Ä–µ–º —Ç–æ–ø-5 –≥–æ—Ä–æ–¥–æ–≤
        for city, count in sorted_cities:
            buttons.append([InlineKeyboardButton(
                text=f"{city} ({count})", 
                callback_data=f"partner_search_city_{city}"
            )])
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è "–î—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
        other_cities_count = sum(count for city, count in sorted_cities[5:])
        
        if other_cities_count > 0:
            buttons.append([InlineKeyboardButton(
                text=f"üèô –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ ({other_cities_count})", 
                callback_data="partner_search_other_city"
            )])
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
        if country == "üá∑üá∫ –†–æ—Å—Å–∏—è":
            main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
            for city in main_russian_cities:
                count = await count_users_by_location(search_type, country, city, sport_type_val)
                buttons.append([InlineKeyboardButton(
                    text=f"{city} ({count})", 
                    callback_data=f"partner_search_city_{city}"
                )])
        else:
            cities = cities_data.get(country, [])
            for city in cities:
                count = await count_users_by_location(search_type, country, city, sport_type_val)
                buttons.append([InlineKeyboardButton(
                    text=f"{city} ({count})", 
                    callback_data=f"partner_search_city_{city}"
                )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", 
        callback_data="partner_back_to_countries"
    )])
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ {country}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchPartnerStates.SEARCH_CITY)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_LEVEL, F.data == "partner_back_to_gender")
async def partner_back_to_gender_from_level(callback: types.CallbackQuery, state: FSMContext):
    await show_gender_selection(callback.message, state)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_RESULTS, F.data == "partner_back_to_level")
@router.callback_query(SearchPartnerStates.SEARCH_NO_RESULTS, F.data == "partner_back_to_level")
async def partner_back_to_level_from_results(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    sport_type_val = data.get('sport_type')
    
    if sport_type_val == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        await show_age_range_selection(callback.message, state)
    else:
        await show_level_selection(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–î—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω"
@router.callback_query(SearchPartnerStates.SEARCH_COUNTRY, F.data == "partner_search_other_country")
async def process_search_other_country_partner(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-7 —Å—Ç—Ä–∞–Ω, –∏—Å–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ
    top_countries = await get_top_countries(search_type=search_type, sport_type=sport_type_val, exclude_countries=countries[:5])
    
    if not top_countries:
        await callback.answer("‚ùå –ù–µ—Ç —Å—Ç—Ä–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        return
    
    builder = InlineKeyboardBuilder()
    
    for country, count in top_countries:
        builder.add(InlineKeyboardButton(
            text=f"{country} ({count})",
            callback_data=f"partner_search_country_{country}"
        ))
    
    builder.adjust(1)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="partner_back_to_countries"
    ))

    await callback.message.edit_text(
        "üåç –¢–æ–ø —Å—Ç—Ä–∞–Ω —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_OTHER_COUNTRIES)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–î—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
@router.callback_query(SearchPartnerStates.SEARCH_CITY, F.data == "partner_search_other_city")
async def process_search_other_city_partner(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    search_type = data.get('search_type')
    country = data.get('search_country')
    sport_type_val = data.get('sport_type')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    if country == "üá∑üá∫ –†–æ—Å—Å–∏—è":
        exclude_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
    else:
        exclude_cities = cities_data.get(country, [])
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-7 –≥–æ—Ä–æ–¥–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ, –∏—Å–∫–ª—é—á–∞—è –æ—Å–Ω–æ–≤–Ω—ã–µ
    top_cities = await get_top_cities(search_type=search_type, country=country, sport_type=sport_type_val, exclude_cities=exclude_cities)
    
    if not top_cities:
        await callback.answer("‚ùå –ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏")
        return
    
    builder = InlineKeyboardBuilder()
    
    for city, count in top_cities:
        builder.add(InlineKeyboardButton(
            text=f"{city} ({count})",
            callback_data=f"partner_search_city_{city}"
        ))
    
    builder.adjust(1)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="partner_back_to_cities"
    ))
    
    await callback.message.edit_text(
        f"üèô –¢–æ–ø –≥–æ—Ä–æ–¥–æ–≤ –≤ {country}:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(SearchPartnerStates.SEARCH_OTHER_CITIES)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏–∑ "–î—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
@router.callback_query(SearchPartnerStates.SEARCH_OTHER_CITIES, F.data.startswith("partner_search_city_"))
async def process_other_city_selection(callback: types.CallbackQuery, state: FSMContext):
    city = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(search_city=city)
    await show_gender_selection(callback.message, state)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≥–æ—Ä–æ–¥–∞–º –∏–∑ "–î—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤"
@router.callback_query(SearchPartnerStates.SEARCH_OTHER_CITIES, F.data == "partner_back_to_cities")
async def back_to_cities_from_other(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country = data.get('search_country')
    search_type = data.get('search_type')
    sport_type_val = data.get('sport_type')
    
    buttons = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞
    if country == "üá∑üá∫ –†–æ—Å—Å–∏—è":
        main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
        for city in main_russian_cities:
            count = await count_users_by_location(search_type, country, city, sport_type_val)
            buttons.append([InlineKeyboardButton(
                text=f"{city} ({count})", 
                callback_data=f"partner_search_city_{city}"
            )])
    else:
        cities = cities_data.get(country, [])
        for city in cities:
            count = await count_users_by_location(search_type, country, city, sport_type_val)
            buttons.append([InlineKeyboardButton(
                text=f"{city} ({count})", 
                callback_data=f"partner_search_city_{city}"
            )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞"
    if country == "üá∑üá∫ –†–æ—Å—Å–∏—è":
        exclude_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
    else:
        exclude_cities = cities_data.get(country, [])
    
    other_cities = await get_top_cities(search_type=search_type, country=country, sport_type=sport_type_val, exclude_cities=exclude_cities)
    other_cities_count = sum(count for city, count in other_cities)
    
    if other_cities_count > 0:
        buttons.append([InlineKeyboardButton(
            text=f"üèô –î—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ ({other_cities_count})", 
            callback_data="partner_search_other_city"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç—Ä–∞–Ω–∞–º", 
        callback_data="partner_back_to_countries"
    )])
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ {country}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
    )
    await state.set_state(SearchPartnerStates.SEARCH_CITY)
    await callback.answer()

async def show_partner_results_list(message: types.Message, state: FSMContext, page: int = 0):
    data = await state.get_data()
    results = data.get('search_results', [])
    country = data.get('search_country')
    city = data.get('search_city')
    sport_type_val = data.get('sport_type')
    gender = data.get('gender')
    level = data.get('level')
    
    if not results:
        await message.edit_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    results_per_page = 10
    total_pages = (len(results) + results_per_page - 1) // results_per_page
    start_idx = page * results_per_page
    end_idx = min(start_idx + results_per_page, len(results))
    current_results = results[start_idx:end_idx]
    
    builder = InlineKeyboardBuilder()
    
    for user_id, profile in current_results:
        name = f"{profile.get('first_name', '')[0]}. {profile.get('last_name', '')}".strip()
        age = await calculate_age(profile.get('birth_date', '05.05.2000'))
        gender_profile = profile.get('gender', '')
        user_district = profile.get('district', '')
        player_level = profile.get('player_level', '')
        rating_points = profile.get('rating_points', '')
        
        gender_icon = "üë®" if gender_profile == '–ú—É–∂—Å–∫–æ–π' else "üë©" if gender_profile == '–ñ–µ–Ω—Å–∫–∏–π' else 'üë§'
        district_text = f"{user_district}" if user_district else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        display_name = f"{gender_icon} {name} {district_text} ({age} –ª–µ—Ç)"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∏ —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if player_level and rating_points:
            display_name += f" | {player_level} ({rating_points})"
        elif player_level:
            display_name += f" | {player_level}"
            
        builder.add(InlineKeyboardButton(
            text=display_name,
            callback_data=f"partner_show_profile_{user_id}"
        ))
    
    builder.adjust(1)
    
    pagination_buttons = []
    if page > 0:
        pagination_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"partner_page_{page-1}"
        ))
    if page < total_pages - 1:
        pagination_buttons.append(InlineKeyboardButton(
            text="–°–ª–µ–¥—É—é—â–∞—è ‚û°Ô∏è",
            callback_data=f"partner_page_{page+1}"
        ))
    
    if pagination_buttons:
        builder.row(*pagination_buttons)
    
    builder.row(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="partner_back_to_level"
    ))
    
    sport_text = f", –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport_type_val}" if sport_type_val else ""
    gender_text = f", –ø–æ–ª: {gender}" if gender else ""
    level_text = f", —É—Ä–æ–≤–µ–Ω—å: {level}" if level else ""
    
    await message.edit_text(
        f"üîç –ù–∞–π–¥–µ–Ω–æ {len(results)} –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ {city} ({country}){sport_text}{gender_text}{level_text}:\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    
    await state.update_data(current_page=page)
    await state.set_state(SearchPartnerStates.SEARCH_RESULTS)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
@router.callback_query(SearchPartnerStates.SEARCH_RESULTS, F.data.startswith("partner_show_profile_"))
async def handle_show_profile_partner(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_", 3)[3])
    
    profile = await storage.get_user(user_id)
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
    name = f"{profile.get('first_name', '')} {profile.get('last_name', '')}".strip()
    age = await calculate_age(profile.get('birth_date', '01.01.2000'))
    gender = profile.get('gender', '')
    city = profile.get('city', '')
    country = profile.get('country', '')
    sport = profile.get('sport', '')
    level = profile.get('player_level', '')
    rating = profile.get('rating_points', '')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    profile_text = f"üë§ **{name}**\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
    profile_text += f"üë´ –ü–æ–ª: {gender}\n"
    profile_text += f"üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {city}, {country}\n"
    profile_text += f"üéæ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {sport}\n"
    
    if level and level.strip():
        profile_text += f"üéØ –£—Ä–æ–≤–µ–Ω—å: {level}"
        if rating and rating.strip():
            profile_text += f" ({rating} –æ—á–∫–æ–≤)"
        profile_text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤
    if sport == "üçí–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞":
        dating_goal = profile.get('dating_goal', '')
        if dating_goal:
            profile_text += f"üíï –¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤: {dating_goal}\n"
        
        interests = profile.get('dating_interests', [])
        if interests:
            profile_text += f"üé® –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(interests)}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—Ä–µ—á–µ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫–æ–≤ –∏ –ø–æ –ø–∏–≤—É
    if sport in ["‚òïÔ∏è–ë–∏–∑–Ω–µ—Å-–∑–∞–≤—Ç—Ä–∞–∫", "üçª–ü–æ –ø–∏–≤—É"]:
        meeting_time = profile.get('meeting_time', '')
        if meeting_time:
            profile_text += f"‚è∞ –í—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏: {meeting_time}\n"
    
    profile_text += f"\nüí¨ {profile.get('about_me', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="üëÅÔ∏è –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å",
        callback_data=f"partner_full_profile_{user_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
        callback_data=f"partner_message_{user_id}"
    ))
    builder.add(InlineKeyboardButton(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
        callback_data="partner_back_to_results"
    ))
    builder.adjust(1)
    
    await callback.message.edit_text(
        profile_text,
        reply_markup=builder.as_markup(),
        parse_mode="Markdown"
    )
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_RESULTS, F.data.startswith("partner_full_profile_"))
async def handle_full_profile_partner(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_", 3)[3])
    
    profile = await storage.get_user(user_id)
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    await show_profile(callback.message, profile)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    back_button = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫—Ä–∞—Ç–∫–æ–º—É –ø—Ä–æ—Ñ–∏–ª—é", callback_data=f"partner_show_profile_{user_id}")
    ]])
    
    await callback.message.edit_reply_markup(reply_markup=back_button)
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_RESULTS, F.data.startswith("partner_message_"))
async def handle_message_partner(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_", 3)[3])
    
    profile = await storage.get_user(user_id)
    if not profile:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è
    name = f"{profile.get('first_name', '')} {profile.get('last_name', '')}".strip()
    
    await callback.message.edit_text(
        f"üí¨ –î–ª—è —Å–≤—è–∑–∏ —Å {name} –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram: @{profile.get('username', '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª username')}\n\n"
        f"–ò–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–≤—è–∑–∞—Ç—å –≤–∞—Å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data=f"partner_show_profile_{user_id}")
        ]])
    )
    await callback.answer()

@router.callback_query(SearchPartnerStates.SEARCH_RESULTS, F.data == "partner_back_to_results")
async def handle_back_to_results_partner(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_page = data.get('current_page', 0)
    await show_partner_results_list(callback.message, state, current_page)
    await callback.answer()
