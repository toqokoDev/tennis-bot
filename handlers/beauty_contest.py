from datetime import datetime
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.more import back_to_main
from models.states import BeautyContestStates
from services.storage import storage
from utils.admin import is_admin
from utils.utils import calculate_age, remove_country_flag
from config.paths import BASE_DIR

router = Router()
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
PROFILES_PER_PAGE = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–π –∞–Ω–∫–µ—Ç–µ –∑–∞ —Ä–∞–∑

# ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==============

async def has_premium(user_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    users = await storage.load_users()
    user_data = users.get(user_id, {})
    subscription = user_data.get('subscription', {})
    
    if not subscription.get('active', False):
        return False
    
    until_date_str = subscription.get('until')
    if not until_date_str:
        return False
    
    try:
        until_date = datetime.strptime(until_date_str, '%Y-%m-%d')
        return until_date >= datetime.now()
    except ValueError:
        return False

def get_user_votes_info(contest_data: dict, voter_id: str) -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_votes = contest_data.get("user_votes", {}).get(voter_id, {
        "male_votes": [],  # [user_id1, user_id2, ...]
        "female_votes": []  # [user_id1, user_id2, ...]
    })
    return user_votes

async def can_vote_for_gender(contest_data: dict, voter_id: str, target_gender: str) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ—Ç –ø–æ–ª
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (can_vote, reason)
    reason –º–æ–∂–µ—Ç –±—ã—Ç—å: "ok", "no_premium", "max_votes"
    """
    user_votes = get_user_votes_info(contest_data, voter_id)
    is_premium = await has_premium(voter_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π –º–∞—Å—Å–∏–≤ –≥–æ–ª–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    votes_list = user_votes.get("male_votes", []) if target_gender == "–ú—É–∂—Å–∫–æ–π" else user_votes.get("female_votes", [])
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –≥–æ–ª–æ—Å–æ–≤ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ
    current_votes_count = len(votes_list)
    
    # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 1 –≥–æ–ª–æ—Å –∑–∞ –º—É–∂—á–∏–Ω + 1 –∑–∞ –∂–µ–Ω—â–∏–Ω
    # –ü—Ä–µ–º–∏—É–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: 2 –≥–æ–ª–æ—Å–∞ –∑–∞ –º—É–∂—á–∏–Ω + 2 –∑–∞ –∂–µ–Ω—â–∏–Ω
    max_votes = 2 if is_premium else 1
    
    if current_votes_count < max_votes:
        return True, "ok"
    elif current_votes_count >= 1 and not is_premium:
        return False, "no_premium"
    else:
        return False, "max_votes"

async def get_votes_status_text(contest_data: dict, voter_id: str) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_votes = get_user_votes_info(contest_data, voter_id)
    is_premium = await has_premium(voter_id)
    
    male_votes = user_votes.get("male_votes", [])
    female_votes = user_votes.get("female_votes", [])
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞
    male_used = len(male_votes)
    female_used = len(female_votes)
    
    max_votes = 2 if is_premium else 1
    
    text = f"üó≥ <b>–í–∞—à–∏ –≥–æ–ª–æ—Å–∞:</b>\n"
    text += f"‚Ä¢ –ó–∞ –º—É–∂—á–∏–Ω: {male_used}/{max_votes} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
    
    text += f"‚Ä¢ –ó–∞ –∂–µ–Ω—â–∏–Ω: {female_used}/{max_votes} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
    
    text += "\n"
    
    if is_premium:
        text += "‚≠êÔ∏è <b>Premium –∞–∫—Ç–∏–≤–µ–Ω!</b>\n"
        text += "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–¥–∞—Ç—å –ø–æ 2 –≥–æ–ª–æ—Å–∞ –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–ª\n"
    else:
        text += "üí° <b>–ü–æ–¥—Å–∫–∞–∑–∫–∞:</b>\n"
        text += "–° Premium –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –µ—â–µ –ø–æ 1 –≥–æ–ª–æ—Å—É –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–ª!\n"
    
    return text

# ============== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ==============

@router.callback_query(F.data == "beauty_contest")
async def beauty_contest_main_menu(callback: CallbackQuery, state: FSMContext):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∫–æ–Ω–∫—É—Ä—Å–∞ –∫—Ä–∞—Å–æ—Ç—ã"""
    user_id = str(callback.from_user.id)
    users = await storage.load_users()
    user_data = users.get(user_id)
    
    if not user_data:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_more"))
        try:
            await callback.message.edit_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!",
                reply_markup=builder.as_markup()
            )
        except:
            await callback.message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –±–æ—Ç–µ!",
                reply_markup=builder.as_markup()
            )
        await callback.answer()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    has_application = user_id in applications
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã", callback_data="bc_view_profiles")
    )
    
    if has_application:
        builder.row(
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É", callback_data="bc_delete_application")
        )
    else:
        builder.row(
            InlineKeyboardButton(text="üìù –ó–∞—è–≤–∏—Ç—å—Å—è –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å", callback_data="bc_apply")
        )
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    if await is_admin(int(user_id)):
        builder.row(
            InlineKeyboardButton(text="‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–∞–º–∏ (–ê–¥–º–∏–Ω)", callback_data="bc_admin_menu")
        )
    
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", callback_data="back_to_more")
    )
    
    text = (
        "üåü <b>Mr & Mrs Tennis Play</b>\n\n"
        "–ü—Ä–∏–º–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ Mr & Mrs Tennis Play, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä–∞—Ç—å –Ω–∞—à—É –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É Premium –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å 1 –≥–æ–¥–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—á–∞—Å—Ç–∏—è –≤ –Ω–∞—à–∏—Ö  —Ç—É—Ä–Ω–∏—Ä–∞—Ö –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –¥—Ä—É–≥–∞!\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ —Å–æ–±–∏—Ä–∞—Ç—å –≥–æ–ª–æ—Å–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –±–æ—Ç–∞.\n\n"
        "üìä –í –∫–æ–Ω–∫—É—Ä—Å–µ —É—á–∞—Å—Ç–≤—É—é—Ç:\n"
        f"‚Ä¢ –ú—É–∂—á–∏–Ω: {sum(1 for app in applications.values() if app.get('gender') == '–ú—É–∂—Å–∫–æ–π')}\n"
        f"‚Ä¢ –ñ–µ–Ω—â–∏–Ω: {sum(1 for app in applications.values() if app.get('gender') == '–ñ–µ–Ω—Å–∫–∏–π')}\n\n"
    )
    
    if has_application:
        user_votes = contest_data.get("votes", {}).get(user_id, {})
        vote_count = len(user_votes)
        text += f"‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ\nüíñ –ì–æ–ª–æ—Å–æ–≤: {vote_count}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ–ª–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    text += await get_votes_status_text(contest_data, user_id) + "\n"
    
    text += f"\n\n<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–∫—É—Ä—Å–∞ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã 15 —è–Ω–≤–∞—Ä—è 2026 –≥–æ–¥–∞</b>"
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(BeautyContestStates.MAIN_MENU)
    await callback.answer()

# ============== –ü–†–û–°–ú–û–¢–† –ê–ù–ö–ï–¢ ==============

@router.callback_query(F.data == "bc_view_profiles")
async def select_gender(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω—ã", callback_data="bc_gender_male"),
        InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω—ã", callback_data="bc_gender_female")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="beauty_contest")
    )
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    
    try:
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=builder.as_markup())
    await state.set_state(BeautyContestStates.SELECT_GENDER)
    await callback.answer()

@router.callback_query(F.data.in_(["bc_gender_male", "bc_gender_female"]))
async def show_profiles_by_gender(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –∞–Ω–∫–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª–∞"""
    gender = "–ú—É–∂—Å–∫–æ–π" if callback.data == "bc_gender_male" else "–ñ–µ–Ω—Å–∫–∏–π"
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    votes = contest_data.get("votes", {})
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–Ω–∫–µ—Ç—ã –ø–æ –ø–æ–ª—É
    filtered_profiles = {
        uid: app for uid, app in applications.items() 
        if app.get("gender") == gender
    }
    
    if not filtered_profiles:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="bc_view_profiles"))
        try:
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –∞–Ω–∫–µ—Ç —Å —Ç–∞–∫–∏–º –ø–æ–ª–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                reply_markup=builder.as_markup()
            )
        except:
            await callback.message.answer(
                "‚ùå –ù–µ—Ç –∞–Ω–∫–µ—Ç —Å —Ç–∞–∫–∏–º –ø–æ–ª–æ–º\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–ª –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥.",
                reply_markup=builder.as_markup()
            )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
    sorted_profiles = sorted(
        filtered_profiles.items(),
        key=lambda x: len(votes.get(x[0], {})),
        reverse=True
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    await state.update_data(
        gender=gender,
        profiles=sorted_profiles,
        current_page=0
    )
    
    await show_profile_page(callback.message, callback.from_user.id, state)
    await state.set_state(BeautyContestStates.VIEW_PROFILES)
    await callback.answer()

async def show_profile_page(message: Message, viewer_id: int, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∞–Ω–∫–µ—Ç–æ–π"""
    data = await state.get_data()
    profiles = data.get("profiles", [])
    current_page = data.get("current_page", 0)
    
    if not profiles or current_page >= len(profiles):
        await message.edit_text(
            "‚ùå –ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="bc_view_profiles")
            ]])
        )
        return
    
    user_id, profile = profiles[current_page]
    viewer_id_str = str(viewer_id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–æ—Å–∞—Ö
    contest_data = await storage.load_beauty_contest()
    votes = contest_data.get("votes", {})
    profile_votes = votes.get(user_id, {})
    vote_count = len(profile_votes)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ—Ç –ø–æ–ª
    target_gender = profile.get("gender")
    can_vote, reason = await can_vote_for_gender(contest_data, viewer_id_str, target_gender)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    user_votes = get_user_votes_info(contest_data, viewer_id_str)
    votes_list = user_votes.get("male_votes", []) if target_gender == "–ú—É–∂—Å–∫–æ–π" else user_votes.get("female_votes", [])
    has_voted_for_this = user_id in votes_list
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∞–Ω–∫–µ—Ç—ã
    age = await calculate_age(profile.get('birth_date', ''))

    text = (
        f"üåü <b>{profile.get('first_name', '')} {profile.get('last_name', '')}</b>\n\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {remove_country_flag(profile.get('country', '‚Äî'))}\n"
        f"üèô –ì–æ—Ä–æ–¥: {profile.get('city', '‚Äî')}\n\n"
        f"üíñ –ì–æ–ª–æ—Å–æ–≤: <b>{vote_count}</b>\n\n"
    )
    
    if profile.get('comment'):
        text += f"üí¨ –û —Å–µ–±–µ: {profile.get('comment')}\n\n"
    
    text += f"–ê–Ω–∫–µ—Ç–∞ {current_page + 1} –∏–∑ {len(profiles)}"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    if viewer_id_str == user_id:
        # –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è
        builder.row(
            InlineKeyboardButton(text="üö´ –≠—Ç–æ –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞", callback_data="bc_self_vote")
        )
    elif has_voted_for_this:
        # –£–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        builder.row(
            InlineKeyboardButton(text="üíî –£–±—Ä–∞—Ç—å –≥–æ–ª–æ—Å", callback_data=f"bc_unvote_{user_id}")
        )
    elif can_vote:
        # –ú–æ–∂–Ω–æ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
        builder.row(
            InlineKeyboardButton(text="üíñ –ü—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å", callback_data=f"bc_vote_{user_id}")
        )
    else:
        # –ì–æ–ª–æ—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        gender_text = "–º—É–∂—á–∏–Ω" if target_gender == "–ú—É–∂—Å–∫–æ–π" else "–∂–µ–Ω—â–∏–Ω"
        builder.row(
            InlineKeyboardButton(text=f"üö´ –ì–æ–ª–æ—Å–∞ –∑–∞ {gender_text} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å", callback_data="bc_no_votes")
        )
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", callback_data="bc_prev_page"))
    if current_page < len(profiles) - 1:
        nav_buttons.append(InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è", callback_data="bc_next_page"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞", callback_data="bc_view_profiles")
    )
    
    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    photo_path = BASE_DIR / profile['photo_path']
    
    try:
        if photo_path.exists():
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.delete()
            except:
                pass
            
            await message.answer_photo(
                photo=FSInputFile(photo_path),
                caption=text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        else:
            await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    except Exception as e:
        print(f"Error showing profile: {e}")
        await message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")

# ============== –ì–û–õ–û–°–û–í–ê–ù–ò–ï ==============

@router.callback_query(F.data == "bc_self_vote")
async def self_vote_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è"""
    await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!", show_alert=True)

@router.callback_query(F.data == "bc_no_votes")
async def no_votes_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–≥–¥–∞ –≥–æ–ª–æ—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å"""
    await callback.answer(
        "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≥–æ–ª–æ—Å–∞ –∑–∞ —ç—Ç–æ—Ç –ø–æ–ª.\n\n"
        "üí° –û—Ñ–æ—Ä–º–∏—Ç–µ Premium –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥–æ–ª–æ—Å–∞!",
        show_alert=True
    )

@router.callback_query(F.data.startswith("bc_vote_"))
async def vote_for_profile(callback: CallbackQuery, state: FSMContext):
    """–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –∞–Ω–∫–µ—Ç—É"""
    target_user_id = callback.data.split("_")[2]
    voter_id = str(callback.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≥–æ–ª–æ—Å—É–µ—Ç –∑–∞ —Å–µ–±—è
    if voter_id == target_user_id:
        await callback.answer("‚ùå –ù–µ–ª—å–∑—è –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è!")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    votes = contest_data.get("votes", {})
    user_votes = contest_data.get("user_votes", {})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª —Ü–µ–ª–µ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    target_profile = applications.get(target_user_id, {})
    target_gender = target_profile.get("gender")
    
    if not target_gender:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —ç—Ç–æ—Ç –ø–æ–ª
    can_vote, reason = await can_vote_for_gender(contest_data, voter_id, target_gender)
    
    if not can_vote:
        if reason == "no_premium":
            gender_text = "–º—É–∂—á–∏–Ω" if target_gender == "–ú—É–∂—Å–∫–æ–π" else "–∂–µ–Ω—â–∏–Ω"
            text = (
                f"‚ùå <b>–ì–æ–ª–æ—Å –∑–∞ {gender_text} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n\n"
                f"–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –≥–æ–ª–æ—Å –∑–∞ {gender_text}.\n\n"
                "‚≠êÔ∏è –° Premium –ø–æ–¥–ø–∏—Å–∫–æ–π –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –≥–æ–ª–æ—Å –∑–∞ –∫–∞–∂–¥—ã–π –ø–æ–ª!\n\n"
                "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üí≥ –ü–ª–∞—Ç–µ–∂–∏¬ª"
            )
        else:
            text = (
                "‚ùå <b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≥–æ–ª–æ—Å–æ–≤</b>\n\n"
                "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∑–∞ —ç—Ç–æ—Ç –ø–æ–ª."
            )
        
        await callback.answer(text, show_alert=True)
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if voter_id not in user_votes:
        user_votes[voter_id] = {
            "male_votes": [],
            "female_votes": []
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª –ª–∏ —É–∂–µ –∑–∞ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    votes_list_key = "male_votes" if target_gender == "–ú—É–∂—Å–∫–æ–π" else "female_votes"
    if target_user_id in user_votes[voter_id][votes_list_key]:
        await callback.answer("‚ùå –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!", show_alert=True)
        return
    
    if target_user_id not in votes:
        votes[target_user_id] = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å –≤ –æ–±—â–∏–µ –≥–æ–ª–æ—Å–∞ –ø—Ä–æ—Ñ–∏–ª—è
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ–ª–æ—Å–∞ (voter_id + timestamp)
    vote_key = f"{voter_id}_{datetime.now().timestamp()}"
    votes[target_user_id][vote_key] = {
        "voted_at": datetime.now().isoformat(),
        "voter_id": voter_id,
        "voter_name": f"{callback.from_user.first_name} {callback.from_user.last_name or ''}"
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∑–∞ —ç—Ç–æ—Ç –ø–æ–ª
    user_votes[voter_id][votes_list_key].append(target_user_id)
    
    contest_data["votes"] = votes
    contest_data["user_votes"] = user_votes
    await storage.save_beauty_contest(contest_data)
    
    await callback.answer("üíñ –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_profile_page(callback.message, callback.from_user.id, state)

@router.callback_query(F.data.startswith("bc_unvote_"))
async def unvote_for_profile(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –≥–æ–ª–æ—Å–∞ –∑–∞ –∞–Ω–∫–µ—Ç—É"""
    target_user_id = callback.data.split("_")[2]
    voter_id = str(callback.from_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    votes = contest_data.get("votes", {})
    user_votes = contest_data.get("user_votes", {})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª —Ü–µ–ª–µ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    target_profile = applications.get(target_user_id, {})
    target_gender = target_profile.get("gender")
    
    # –£–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å –∏–∑ –æ–±—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤ –ø—Ä–æ—Ñ–∏–ª—è
    if target_user_id in votes:
        # –ò—â–µ–º –≥–æ–ª–æ—Å —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        votes_to_remove = [key for key, vote_data in votes[target_user_id].items() 
                          if vote_data.get("voter_id") == voter_id]
        
        # –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
        if votes_to_remove:
            del votes[target_user_id][votes_to_remove[0]]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–æ–ª–æ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if voter_id in user_votes:
        votes_list_key = "male_votes" if target_gender == "–ú—É–∂—Å–∫–æ–π" else "female_votes"
        if target_user_id in user_votes[voter_id].get(votes_list_key, []):
            user_votes[voter_id][votes_list_key].remove(target_user_id)
    
    contest_data["votes"] = votes
    contest_data["user_votes"] = user_votes
    await storage.save_beauty_contest(contest_data)
    
    await callback.answer("üíî –ì–æ–ª–æ—Å —É–±—Ä–∞–Ω")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await show_profile_page(callback.message, callback.from_user.id, state)

# ============== –ü–ê–ì–ò–ù–ê–¶–ò–Ø ==============

@router.callback_query(F.data == "bc_prev_page")
async def previous_page(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    
    if current_page > 0:
        await state.update_data(current_page=current_page - 1)
        await show_profile_page(callback.message, callback.from_user.id, state)
    
    await callback.answer()

@router.callback_query(F.data == "bc_next_page")
async def next_page(callback: CallbackQuery, state: FSMContext):
    """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    data = await state.get_data()
    current_page = data.get("current_page", 0)
    profiles = data.get("profiles", [])
    
    if current_page < len(profiles) - 1:
        await state.update_data(current_page=current_page + 1)
        await show_profile_page(callback.message, callback.from_user.id, state)
    
    await callback.answer()

# ============== –ü–û–î–ê–ß–ê –ó–ê–Ø–í–ö–ò ==============

@router.callback_query(F.data == "bc_apply")
async def apply_to_contest(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä—Å"""
    user_id = str(callback.from_user.id)
    users = await storage.load_users()
    user_data = users.get(user_id)
    
    if not user_data:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="beauty_contest"))
        try:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=builder.as_markup()
            )
        except:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
                reply_markup=builder.as_markup()
            )
        await callback.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–æ—Ç–æ
    photo_path = BASE_DIR / user_data['photo_path']
    if not photo_path.exists():
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="beauty_contest"))
        try:
            await callback.message.edit_text(
                "‚ùå <b>–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å!</b>\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞' –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        except:
            await callback.message.answer(
                "‚ùå <b>–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –≤ –ø—Ä–æ—Ñ–∏–ª—å!</b>\n\n"
                "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª 'üë§ –ú–æ—è –∞–Ω–∫–µ—Ç–∞' –∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ.",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )
        await callback.answer()
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    age = await calculate_age(user_data.get('birth_date', ''))
    
    text = (
        "üìù <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ</b>\n\n"
        "–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
        f"üë§ {user_data.get('first_name', '')} {user_data.get('last_name', '')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {remove_country_flag(user_data.get('country', '‚Äî'))}\n"
        f"üèô –ì–æ—Ä–æ–¥: {user_data.get('city', '‚Äî')}\n\n"
    )
    
    if user_data.get('comment'):
        text += f"üí¨ –û —Å–µ–±–µ: {user_data.get('comment')}\n\n"
    
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ –∫—Ä–∞—Å–æ—Ç—ã:"
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="bc_confirm_apply"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="beauty_contest")
    )
    
    try:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await callback.message.delete()
        except:
            pass
        
        await callback.message.answer_photo(
            photo=FSInputFile(photo_path),
            caption=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    except:
        await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    
    await state.set_state(BeautyContestStates.CONFIRM_APPLICATION)
    await callback.answer()

@router.callback_query(F.data == "bc_confirm_apply")
async def confirm_application(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"""
    user_id = str(callback.from_user.id)
    users = await storage.load_users()
    user_data = users.get(user_id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∏
    if user_id in applications:
        await callback.answer("‚ùå –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ!")
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
    applications[user_id] = {
        "first_name": user_data.get('first_name', ''),
        "last_name": user_data.get('last_name', ''),
        "gender": user_data.get('gender', ''),
        "birth_date": user_data.get('birth_date', ''),
        "country": user_data.get('country', ''),
        "city": user_data.get('city', ''),
        "comment": user_data.get('comment', ''),
        "photo_path": user_data.get('photo_path', ''),
        "applied_at": datetime.now().isoformat()
    }
    
    contest_data["applications"] = applications
    await storage.save_beauty_contest(contest_data)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await beauty_contest_main_menu(callback, state)

# ============== –£–î–ê–õ–ï–ù–ò–ï –ó–ê–Ø–í–ö–ò ==============

@router.callback_query(F.data == "bc_delete_application")
async def delete_application_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="bc_confirm_delete"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="beauty_contest")
    )
    
    text = (
        "‚ùì <b>–£–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É?</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –∏–∑ –∫–æ–Ω–∫—É—Ä—Å–∞ –∫—Ä–∞—Å–æ—Ç—ã?\n"
        "–í—Å–µ –≥–æ–ª–æ—Å–∞ –∑–∞ –≤–∞—Å –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã."
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await state.set_state(BeautyContestStates.DELETE_APPLICATION)
    await callback.answer()

@router.callback_query(F.data == "bc_confirm_delete")
async def confirm_delete_application(callback: CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = str(callback.from_user.id)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    votes = contest_data.get("votes", {})
    
    # –£–¥–∞–ª—è–µ–º –∑–∞—è–≤–∫—É
    if user_id in applications:
        del applications[user_id]
    
    # –£–¥–∞–ª—è–µ–º –≥–æ–ª–æ—Å–∞ –∑–∞ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in votes:
        del votes[user_id]
    
    contest_data["applications"] = applications
    contest_data["votes"] = votes
    await storage.save_beauty_contest(contest_data)
    
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—Ö–µ
    await beauty_contest_main_menu(callback, state)

# ============== –ê–î–ú–ò–ù–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==============

@router.callback_query(F.data == "bc_admin_menu")
async def admin_menu(callback: CallbackQuery, state: FSMContext):
    """–ê–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—É—Ä—Å–æ–º"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="bc_admin_delete")
    )
    builder.row(
        InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞", callback_data="bc_admin_reset_votes")
    )
    builder.row(
        InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã", callback_data="bc_admin_clear_all")
    )
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="beauty_contest")
    )
    
    text = (
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—É—Ä—Å–æ–º –∫—Ä–∞—Å–æ—Ç—ã</b>\n\n"
        f"üìä –í—Å–µ–≥–æ –∞–Ω–∫–µ—Ç: {len(applications)}"
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "bc_admin_delete")
async def admin_delete_select(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    votes = contest_data.get("votes", {})
    
    if not applications:
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="bc_admin_menu"))
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
            reply_markup=builder.as_markup()
        )
        await callback.answer()
        return
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–æ–ª–æ—Å–æ–≤
    sorted_apps = sorted(
        applications.items(),
        key=lambda x: len(votes.get(x[0], {})),
        reverse=True
    )
    
    builder = InlineKeyboardBuilder()
    
    for uid, app in sorted_apps:
        vote_count = len(votes.get(uid, {}))
        button_text = f"{app.get('first_name', '')} {app.get('last_name', '')} ({vote_count} üíñ)"
        builder.row(
            InlineKeyboardButton(text=button_text, callback_data=f"bc_admin_del_{uid}")
        )
    
    builder.row(
        InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="bc_admin_menu")
    )
    
    text = "–í—ã–±–µ—Ä–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("bc_admin_del_"))
async def admin_delete_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –∞–¥–º–∏–Ω–æ–º"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    target_user_id = callback.data.split("_")[3]
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    contest_data = await storage.load_beauty_contest()
    applications = contest_data.get("applications", {})
    votes = contest_data.get("votes", {})
    
    # –£–¥–∞–ª—è–µ–º –∞–Ω–∫–µ—Ç—É –∏ –≥–æ–ª–æ—Å–∞
    if target_user_id in applications:
        del applications[target_user_id]
    
    if target_user_id in votes:
        del votes[target_user_id]
    
    contest_data["applications"] = applications
    contest_data["votes"] = votes
    await storage.save_beauty_contest(contest_data)
    
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    await admin_delete_select(callback, state)

@router.callback_query(F.data == "bc_admin_reset_votes")
async def admin_reset_votes_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="bc_admin_reset_votes_confirm"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bc_admin_menu")
    )
    
    text = (
        "‚ùì <b>–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞?</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –≥–æ–ª–æ—Å–∞ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "bc_admin_reset_votes_confirm")
async def admin_reset_votes(callback: CallbackQuery, state: FSMContext):
    """–°–±—Ä–æ—Å –≤—Å–µ—Ö –≥–æ–ª–æ—Å–æ–≤"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–∞
    contest_data = await storage.load_beauty_contest()
    contest_data["votes"] = {}
    contest_data["user_votes"] = {}
    await storage.save_beauty_contest(contest_data)
    
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    await admin_menu(callback, state)

@router.callback_query(F.data == "bc_admin_clear_all")
async def admin_clear_all_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="bc_admin_clear_all_confirm"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="bc_admin_menu")
    )
    
    text = (
        "‚ùì <b>–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã?</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–Ω–∫–µ—Ç—ã –∏ –≥–æ–ª–æ—Å–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    await callback.message.edit_text(text, reply_markup=builder.as_markup(), parse_mode="HTML")
    await callback.answer()

@router.callback_query(F.data == "bc_admin_clear_all_confirm")
async def admin_clear_all(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∞–Ω–∫–µ—Ç –∏ –≥–æ–ª–æ—Å–æ–≤"""
    user_id = int(callback.from_user.id)
    
    if not await is_admin(user_id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å–∞
    contest_data = {"applications": {}, "votes": {}, "user_votes": {}}
    await storage.save_beauty_contest(contest_data)
    
    await callback.answer()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –∞–¥–º–∏–Ω—Å–∫–æ–µ –º–µ–Ω—é
    await admin_menu(callback, state)

# ============== –í–û–ó–í–†–ê–¢ –í –ú–ï–ù–Æ "–ï–©–ï" ==============

@router.callback_query(F.data == "back_to_more")
async def back_to_more(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é '–ï—â–µ'"""
    await state.clear()
    
    await back_to_main(callback, state)
