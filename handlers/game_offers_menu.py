from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.config import ITEMS_PER_PAGE
from config.profile import sport_type
from services.storage import storage
from utils.admin import is_admin
from models.states import BrowseOffersStates, RespondToOfferStates
from utils.utils import create_user_profile_link, get_sort_key, get_weekday_short

router = Router()

@router.message(F.text == "‚è± –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä")
async def browse_offers_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä - –≤—ã–±–æ—Ä –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∏–¥–∞–º–∏ —Å–ø–æ—Ä—Ç–∞
    buttons = []
    for sport in sport_type:
        buttons.append([
            InlineKeyboardButton(
                text=sport,
                callback_data=f"offersport_{sport}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await message.answer(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseOffersStates.SELECT_SPORT)
    await state.update_data(page=0)

@router.callback_query(BrowseOffersStates.SELECT_SPORT, F.data.startswith("offersport_"))
async def select_offer_sport(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    sport_type_selected = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(selected_sport=sport_type_selected)
    
    users = await storage.load_users()
    current_user_id = str(callback.message.chat.id)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    country_stats = {}
    for user_id, user_data in users.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id == current_user_id:
            continue
            
        if user_data.get('games'):
            country = user_data.get('country', '')
            if country:
                active_games = [game for game in user_data['games'] 
                               if game.get('active', True) and user_data.get('sport') == sport_type_selected]
                if active_games:
                    country_stats[country] = country_stats.get(country, 0) + len(active_games)
    
    if not country_stats:
        await callback.message.edit_text(
            f"‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä –≤ {sport_type_selected} –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéæ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É", callback_data="new_offer")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Ä—Ç–∞", callback_data="back_to_sport_selection")]
            ])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω
    buttons = []
    for country, count in country_stats.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"{country} ({count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)",
                callback_data=f"offercountry_{country}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Ä—Ç–∞", callback_data="back_to_sport_selection")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π {sport_type_selected}:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseOffersStates.SELECT_COUNTRY)
    await callback.answer()

@router.callback_query(BrowseOffersStates.SELECT_COUNTRY, F.data.startswith("offercountry_"))
async def select_offer_country(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã"""
    country = callback.data.split("_", maxsplit=1)[1]
    state_data = await state.get_data()
    sport_type_selected = state_data.get('selected_sport')
    
    await state.update_data(selected_country=country)
    
    users = await storage.load_users()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    city_stats = {}
    for user_id, user_data in users.items():
        if (user_data.get('country') == country and 
            user_data.get('games')):
            
            city = user_data.get('city', '')
            if city:
                active_games = [game for game in user_data['games'] 
                               if game.get('active', True) and user_data.get('sport') == sport_type_selected and user_id != callback.message.chat.id]
                if active_games:
                    city_stats[city] = city_stats.get(city, 0) + len(active_games)
    
    if not city_stats:
        await callback.message.edit_text(
            f"‚ùå –í {country} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ {sport_type_selected}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="back_to_country_selection")]
            ])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    buttons = []
    for city, count in city_stats.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"üèô {city} ({count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)",
                callback_data=f"offercity_{city}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="back_to_country_selection")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ {country} –¥–ª—è {sport_type_selected}:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseOffersStates.SELECT_CITY)
    await callback.answer()

@router.callback_query(BrowseOffersStates.SELECT_CITY, F.data.startswith("offercity_"))
async def select_offer_city(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    city = callback.data.split("_", maxsplit=1)[1]
    state_data = await state.get_data()
    country = state_data.get('selected_country')
    sport_type_selected = state_data.get('selected_sport')
    
    await state.update_data(selected_city=city)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ, —Å—Ç—Ä–∞–Ω–µ –∏ –≤–∏–¥–µ —Å–ø–æ—Ä—Ç–∞
    users = await storage.load_users()
    all_offers = []
    
    for user_id, user_data in users.items():
        if (user_data.get('country') == country and 
            user_data.get('city') == city and 
            user_data.get('games') and
            user_id != callback.message.chat.id):
            
            user_name = f"{user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')[:1]}.{user_data.get('last_name', '')}".strip()
            
            for game in user_data['games']:
                if (game.get('active', True) and 
                    user_data.get('sport') == sport_type_selected):
                    
                    offer = {
                        'user_id': user_id,
                        'user_name': user_name,
                        'player_level': user_data.get('player_level'),
                        'gender': user_data.get('gender'),
                        'district': user_data.get('district'),
                        'game_id': game.get('id'),
                        'city': game.get('city'),
                        'date': game.get('date'),
                        'time': game.get('time'),
                        'sport_type': user_data.get('sport'),
                        'game_type': game.get('type'),
                        'payment_type': game.get('payment_type'),
                        'competitive': game.get('competitive'),
                        'repeat': game.get('repeat'),
                        'comment': game.get('comment')
                    }
                    all_offers.append(offer)
    
    if not all_offers:
        await callback.message.edit_text(
            f"‚ùå –í {city} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ {sport_type_selected}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data="back_to_city_selection")]
            ])
        )
        return
    
    all_offers.sort(key=get_sort_key)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ state
    await state.update_data(all_offers=all_offers, current_page=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    await show_offers_page(callback.message, state)
    await callback.answer()

async def show_offers_page(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏"""
    state_data = await state.get_data()
    all_offers = state_data.get('all_offers', [])
    current_page = state_data.get('current_page', 0)
    sport_type_selected = state_data.get('selected_sport')
    city = state_data.get('selected_city')
    
    if not all_offers:
        await message.answer("‚ùå –ù–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_offers = all_offers[start_idx:end_idx]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    text = f"üéæ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è {sport_type_selected} –≤ {city}\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for i, offer in enumerate(page_offers, start=1):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –ø–æ–ª–∞
        gender_icon = "üë®" if offer.get('gender', 'male') == '–ú—É–∂—Å–∫–æ–π' else "üë©"
        
        # –ò–º—è + —É—Ä–æ–≤–µ–Ω—å
        if offer.get('player_level', '-'):
            user_info = f"{offer['user_name']} ({offer.get('player_level', '-')} lvl)"
        else:
            user_info = f"{offer['user_name']} (–¢—Ä–µ–Ω–µ—Ä)"
        
        # –î–∞—Ç–∞ ‚Üí —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ
        raw_date = offer.get('date')
        day_str = "‚Äî"
        if raw_date:
            try:
                dt = datetime.strptime(raw_date, "%Y-%m-%d")
                day_str = f"{dt.day}–µ"
            except ValueError:
                day_str = raw_date[:2] + "–µ"
        
        # –í—Ä–µ–º—è
        time = offer.get('time', '-')
        district = offer.get('district', '')
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        short_info = f"{day_str} {time} {district} {gender_icon} {user_info} "
        
        builder.row(InlineKeyboardButton(
            text=short_info,
            callback_data=f"viewoffer_{offer['user_id']}_{offer['game_id']}"
        ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="offerpage_prev"))
    if end_idx < len(all_offers):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="offerpage_next"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    builder.row(InlineKeyboardButton(text="üéæ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É", callback_data="new_offer"))
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞
    builder.row(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞", callback_data="back_to_city_selection"))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.content_type == 'text':
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("offerpage_"))
async def handle_offer_page_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    action = callback.data.split("_", maxsplit=1)[1]
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 0)
    all_offers = state_data.get('all_offers', [])
    
    if action == "prev" and current_page > 0:
        current_page -= 1
    elif action == "next" and (current_page + 1) * ITEMS_PER_PAGE < len(all_offers):
        current_page += 1
    
    await state.update_data(current_page=current_page)
    await show_offers_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.startswith("viewoffer_"))
async def view_offer_details(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
    parts = callback.data.split("_")
    user_id = parts[1]
    game_id = parts[2]
    
    users = await storage.load_users()
    user_data = users.get(user_id)
    
    if not user_data:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ò—â–µ–º –∏–≥—Ä—É
    game = None
    for g in user_data.get('games', []):
        if str(g.get('id')) == game_id and g.get('active', True):
            game = g
            break
    
    if not game:
        await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
    await state.update_data(
        selected_offer_user_id=user_id,
        selected_offer_game_id=game_id
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    username = user_data.get("username")
    username_str = f"@{username}" if username else "üë§ (–±–µ–∑ username)"

    # –ò–º—è + —É—Ä–æ–≤–µ–Ω—å
    user_name = f"{user_data.get('first_name', '')} {user_data.get('last_name', '')}".strip()
    player_level = user_data.get("player_level", "‚Äî")
    
    text = (
        f"üéØ –í–∏–¥ —Å–ø–æ—Ä—Ç–∞: {game.get('sport_type', '‚Äî')}\n"
        f"‚ö†Ô∏è {user_name} {username_str}\n"
        f"üèÖ –†–µ–π—Ç–∏–Ω–≥ {user_data.get('rating_points', '‚Äî')} (–õ–≤–ª: {player_level})\n"
        f"üèô {game.get('city', '‚Äî')}\n"
        f"üìä –°—ã–≥—Ä–∞–Ω–æ –º–∞—Ç—á–µ–π: {user_data.get('games_played', 0)}\n\n"
        f"üìÖ {game.get('date', '‚Äî')}, {game.get('time', '‚Äî')}\n"
        f"üïπ {game.get('type', '‚Äî')}\n"
        f"üí∞ –û–ø–ª–∞—Ç–∞: {game.get('payment_type', '‚Äî')}\n"
        f"üèÜ –ù–∞ —Å—á—ë—Ç: {'–î–∞' if game.get('competitive') else '–ù–µ—Ç'}\n"
    )
    
    if game.get('comment'):
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {game['comment']}\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –∞–¥–º–∏–Ω–∞
    if await is_admin(callback.message.chat.id):
        text += f"\nüÜî ID –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: `{game_id}`"
        text += f"\nüÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{user_id}`"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard_buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    if str(callback.message.chat.id) != user_id:
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="‚úÖ –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
                callback_data="respond_to_offer"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard_buttons.append([
        InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", 
            callback_data="back_to_offers_list"
        )
    ])
    
    # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
    if (await is_admin(callback.message.chat.id)):
        keyboard_buttons.append([
            InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", 
                callback_data=f"admin_select_offer:{user_id}:{game_id}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()

@router.callback_query(F.data == "back_to_offers_list")
async def back_to_offers_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π"""
    await show_offers_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data == "back_to_sport_selection")
async def back_to_sport_selection(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∏–¥–∞–º–∏ —Å–ø–æ—Ä—Ç–∞
    buttons = []
    for sport in sport_type:
        buttons.append([
            InlineKeyboardButton(
                text=sport,
                callback_data=f"offersport_{sport}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseOffersStates.SELECT_SPORT)
    await callback.answer()

@router.callback_query(F.data == "back_to_country_selection")
async def back_to_country_selection(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã"""
    state_data = await state.get_data()
    sport_type_selected = state_data.get('selected_sport')
    
    users = await storage.load_users()
    current_user_id = str(callback.message.chat.id)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    country_stats = {}
    for user_id, user_data in users.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id == current_user_id:
            continue
            
        if user_data.get('games'):
            country = user_data.get('country', '')
            if country:
                active_games = [game for game in user_data['games'] 
                               if game.get('active', True) and user_data.get('sport') == sport_type_selected]
                if active_games:
                    country_stats[country] = country_stats.get(country, 0) + len(active_games)
    
    if not country_stats:
        await callback.message.edit_text(
            f"‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–≥—Ä –≤ {sport_type_selected} –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üéæ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–≥—Ä—É", callback_data="new_offer")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Ä—Ç–∞", callback_data="back_to_sport_selection")]
            ])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω
    buttons = []
    for country, count in country_stats.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"{country} ({count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)",
                callback_data=f"offercountry_{country}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Ä—Ç–∞", callback_data="back_to_sport_selection")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π {sport_type_selected}:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseOffersStates.SELECT_COUNTRY)
    await callback.answer()

@router.callback_query(F.data == "back_to_city_selection")
async def back_to_city_selection(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –≥–æ—Ä–æ–¥–∞"""
    state_data = await state.get_data()
    country = state_data.get('selected_country')
    sport_type_selected = state_data.get('selected_sport')
    
    users = await storage.load_users()
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
    city_stats = {}
    for user_id, user_data in users.items():
        if (user_data.get('country') == country and 
            user_data.get('games')):
            
            city = user_data.get('city', '')
            if city:
                active_games = [game for game in user_data['games'] 
                               if game.get('active', True) and user_data.get('sport') == sport_type_selected]
                if active_games:
                    city_stats[city] = city_stats.get(city, 0) + len(active_games)
    
    if not city_stats:
        await callback.message.edit_text(
            f"‚ùå –í {country} –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ {sport_type_selected}.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="back_to_country_selection")]
            ])
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    buttons = []
    for city, count in city_stats.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"üèô {city} ({count} –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π)",
                callback_data=f"offercity_{city}"
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω—ã", callback_data="back_to_country_selection")
    ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ {country} –¥–ª—è {sport_type_selected}:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseOffersStates.SELECT_CITY)
    await callback.answer()

@router.callback_query(F.data == "respond_to_offer")
async def start_respond_to_offer(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"""
    await callback.message.edit_text(
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É –æ—Ç–∫–ª–∏–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
    )
    await state.set_state(RespondToOfferStates.ENTER_COMMENT)
    await callback.answer()

@router.message(RespondToOfferStates.ENTER_COMMENT, F.text == "/skip")
@router.message(RespondToOfferStates.ENTER_COMMENT, F.text)
async def process_respond_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    comment = message.text if message.text != "/skip" else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
    
    state_data = await state.get_data()
    target_user_id = state_data.get('selected_offer_user_id')
    game_id = state_data.get('selected_offer_game_id')
    
    if not target_user_id or not game_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await storage.load_users()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    current_user = users.get(str(message.chat.id))
    if not current_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    target_user = users.get(target_user_id)
    if not target_user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        await state.clear()
        return
    
    # –ù–∞—Ö–æ–¥–∏–º –∏–≥—Ä—É
    game = None
    for g in target_user.get('games', []):
        if str(g.get('id')) == game_id:
            game = g
            break
    
    if not game:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    respondent_name = f"{current_user.get('first_name', '')} {current_user.get('last_name', '')}".strip()
    respondent_username = current_user.get('username')
    
    profile_link = await create_user_profile_link(current_user, str(message.chat.id))
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–∫–ª–∏–∫–∞
    response_data = {
        'respondent_id': str(message.chat.id),
        'respondent_name': respondent_name,
        'respondent_username': respondent_username,
        'respondent_level': current_user.get('player_level', '‚Äî'),
        'game_id': game_id,
        'game_date': game.get('date'),
        'game_time': game.get('time'),
        'sport_type': current_user.get('sport'),
        'comment': comment,
        'response_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        'status': 'pending'  # pending, accepted, rejected
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫–ª–∏–∫ –≤ –¥–∞–Ω–Ω—ã–µ —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if 'offer_responses' not in target_user:
        target_user['offer_responses'] = []
    
    target_user['offer_responses'].append(response_data)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    users[target_user_id] = target_user
    await storage.save_users(users)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ü–µ–ª–µ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_message = (
        f"üéæ –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –≤ {game.get('sport_type', '‚Äî')}!\n\n"
        f"üë§ –û—Ç: {profile_link}\n"
        f"üìÖ –î–∞—Ç–∞ –∏–≥—Ä—ã: {game.get('date', '‚Äî')} {game.get('time', '‚Äî')}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(
            chat_id=target_user_id, 
            text=target_message,
            parse_mode='Markdown',
            disable_web_page_preview=True
        )
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n"
        )
    except Exception as e:
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–∫–ª–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            "–í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞."
        )
    
    await state.clear()
