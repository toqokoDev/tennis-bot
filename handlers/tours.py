from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config.config import ITEMS_PER_PAGE
from config.profile import sport_type, countries, cities_data
from models.states import BrowseToursStates, CreateTourStates
from services.channels import send_tour_to_channel
from utils.utils import create_user_profile_link, format_tour_date
from utils.validate import validate_future_date, validate_date, validate_date_range
from services.storage import storage

router = Router()

@router.message(F.text == "‚úàÔ∏è –¢—É—Ä—ã")
async def browse_tours_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–æ–≤ - –≤—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∏–¥–∞–º–∏ —Å–ø–æ—Ä—Ç–∞
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞" –ø–µ—Ä–≤–æ–π
    builder.row(InlineKeyboardButton(
        text="üéæ –õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞",
        callback_data="toursport_any"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
    for sport in sport_type: 
        builder.add(InlineKeyboardButton(
            text=sport,
            callback_data=f"toursport_{sport}"
        ))
    
    builder.adjust(1, 2)

    try:
        await message.edit_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤:",
            reply_markup=builder.as_markup()
        )
    except:
        await message.answer(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤:",
            reply_markup=builder.as_markup()
        )
    await state.set_state(BrowseToursStates.SELECT_SPORT)
    await state.update_data(page=0)

@router.callback_query(F.data == "tours_back_to_sport")
async def browse_tours_start_callback(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–æ–≤ - –≤—ã–±–æ—Ä —Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∏–¥–∞–º–∏ —Å–ø–æ—Ä—Ç–∞
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞" –ø–µ—Ä–≤–æ–π
    builder.row(InlineKeyboardButton(
        text="üéæ –õ—é–±–æ–π –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞",
        callback_data="toursport_any"
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
    for sport in sport_type: 
        builder.add(InlineKeyboardButton(
            text=sport,
            callback_data=f"toursport_{sport}"
        ))
    
    builder.adjust(1, 2)

    try:
        await callback.message.edit_text(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤:",
            reply_markup=builder.as_markup()
        )
    except:
        await callback.message.answer(
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–æ–≤:",
            reply_markup=builder.as_markup()
        )
    await state.set_state(BrowseToursStates.SELECT_SPORT)
    await state.update_data(page=0)
    await callback.answer()

@router.callback_query(BrowseToursStates.SELECT_SPORT, F.data.startswith("toursport_"))
async def select_tour_sport(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Ä—Ç–∞ –¥–ª—è —Ç—É—Ä–æ–≤"""
    sport = callback.data.split("_", maxsplit=1)[1]
    await state.update_data(selected_sport=sport)
    sport_text = "–ª—é–±–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞" if sport == "any" else sport
    
    users = await storage.load_users()
    current_user_id = str(callback.from_user.id)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∞–º —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏ (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    country_stats = {}
    for user_id, user_data in users.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–∫–ª—é—á–µ–Ω –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞
        # –∏ —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Ä—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—é
        if (user_data.get('vacation_tennis', False) and 
            (user_data.get('sport') == sport or sport == "any")):
            country = user_data.get('vacation_country', '')
            if country:
                country_stats[country] = country_stats.get(country, 0) + 1
    
    if not country_stats:
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç—É—Ä —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∏–¥–æ–º —Å–ø–æ—Ä—Ç–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üéæ –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞",
                callback_data=f"createTour"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Ä—Ç–∞",
                callback_data="tours_back_to_sport"
            )]
        ])
        
        await callback.message.edit_text(
            f"‚ùå –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ {sport_text} –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=keyboard
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω
    buttons = []
    for country, count in country_stats.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"{country} ({count} —Ç—É—Ä–æ–≤)",
                callback_data=f"tourcountry_{country}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    await callback.message.edit_text(
        f"üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—É—Ä–æ–≤ –ø–æ {sport_text}:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseToursStates.SELECT_COUNTRY)
    await callback.answer()

@router.callback_query(BrowseToursStates.SELECT_COUNTRY, F.data.startswith("tourcountry_"))
async def select_tour_country(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Ç—É—Ä–æ–≤"""
    country = callback.data.split("_", maxsplit=1)[1]
    state_data = await state.get_data()
    sport = state_data.get('selected_sport')
    
    await state.update_data(selected_country=country)
    
    users = await storage.load_users()

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞
    city_stats = {}
    for user_id, user_data in users.items():
        if (user_data.get('vacation_country') == country and 
            user_data.get('vacation_tennis', False) and
            (user_data.get('sport') == sport or sport=="any")):
            city = user_data.get('vacation_city', '')
            if city:
                city_stats[city] = city_stats.get(city, 0) + 1
    
    if not city_stats:
        await callback.answer("‚ùå –í —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
    buttons = []
    for city, count in city_stats.items():
        buttons.append([
            InlineKeyboardButton(
                text=f"üèô {city} ({count} —Ç—É—Ä–æ–≤)",
                callback_data=f"tourcity_{city}"
            )
        ])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback.message.edit_text(
        f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ {country} –¥–ª—è {sport}:",
        reply_markup=keyboard
    )
    await state.set_state(BrowseToursStates.SELECT_CITY)
    await callback.answer()

@router.callback_query(BrowseToursStates.SELECT_CITY, F.data.startswith("tourcity_"))
async def select_tour_city(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—É—Ä–æ–≤"""
    city = callback.data.split("_", maxsplit=1)[1]
    state_data = await state.get_data()
    country = state_data.get('selected_country')
    sport = state_data.get('selected_sport')
    
    await state.update_data(selected_city=city)
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏ —Å—Ç—Ä–∞–Ω–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–æ—Ä—Ç–∞
    users = await storage.load_users()
    all_tours = []
    
    for user_id, user_data in users.items():
        if (user_data.get('vacation_country') == country and 
            user_data.get('vacation_city') == city and 
            user_data.get('vacation_tennis', False) and
            (user_data.get('sport') == sport or sport=="any")):
            
            tour = {
                'user_id': user_id,
                'user_data': user_data,
                'gender': user_data.get('gender'),
                'vacation_start': user_data.get('vacation_start'),
                'vacation_end': user_data.get('vacation_end'),
                'vacation_comment': user_data.get('vacation_comment'),
                'sport': user_data.get('sport')
            }
            all_tours.append(tour)
    
    if not all_tours:
        await callback.answer("‚ùå –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç—É—Ä—ã –≤ state
    await state.update_data(all_tours=all_tours, current_page=0)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç—É—Ä–æ–≤
    await show_tours_page(callback.message, state)
    await callback.answer()

async def show_tours_page(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç—É—Ä–∞–º–∏"""
    state_data = await state.get_data()
    all_tours = state_data.get('all_tours', [])
    current_page = state_data.get('current_page', 0)
    sport = state_data.get('selected_sport')
    
    if not all_tours:
        await message.answer("‚ùå –ù–µ—Ç —Ç—É—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = current_page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_tours = all_tours[start_idx:end_idx]
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    sport_icons = {
        'tennis': 'üéæ',
        'badminton': 'üè∏',
        'table_tennis': 'üèì'
    }
    sport_icon = sport_icons.get(sport, 'üéæ')

    sport_text = "–ª—é–±–æ–º—É –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞" if sport == "any" else sport

    text = f"{sport_icon} –¢—É—Ä—ã –ø–æ {sport_text} –≤ {state_data.get('selected_city')}, {state_data.get('selected_country')}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç—É—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    for i, tour in enumerate(page_tours, start=1):
        user_data = tour['user_data']
        
        # –°–º–∞–π–ª–∏–∫ –≥–µ–Ω–¥–µ—Ä–∞
        gender = user_data.get('gender', '')
        gender_icon = "üë®" if gender == '–ú—É–∂—Å–∫–æ–π' else "üë©" if gender == '–ñ–µ–Ω—Å–∫–∏–π' else 'üë§'
        
        # –ò–º—è —Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤—ã + —Ñ–∞–º–∏–ª–∏—è
        first_name = user_data.get('first_name', '')
        last_name = user_data.get('last_name', '')
        user_name = f"{first_name[:1]}. {last_name}" if first_name and last_name else first_name or last_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        level = user_data.get('player_level', '-')

        start_date = await format_tour_date(tour.get('vacation_start', '-'))
        end_date = await format_tour_date(tour.get('vacation_end', '-'))
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        tour_info = f"{start_date}-{end_date} | {gender_icon} {user_name} ({level})"
        
        builder.row(InlineKeyboardButton(
            text=tour_info,
            callback_data=f"viewtour_{tour['user_id']}"
        ))
    
    builder.row(InlineKeyboardButton(
        text="üéæ –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞",
        callback_data="createTour"
    ))
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if current_page > 0:
        nav_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tourpage_prev"))
    if end_idx < len(all_tours):
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data="tourpage_next"))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.content_type == 'text':
        await message.edit_text(text, reply_markup=builder.as_markup())
    else:
        await message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("tourpage_"))
async def handle_tour_page_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Ç—É—Ä–æ–≤"""
    action = callback.data.split("_", maxsplit=1)[1]
    state_data = await state.get_data()
    current_page = state_data.get('current_page', 0)
    all_tours = state_data.get('all_tours', [])
    
    if action == "prev" and current_page > 0:
        current_page -= 1
    elif action == "next" and (current_page + 1) * ITEMS_PER_PAGE < len(all_tours):
        current_page += 1
    
    await state.update_data(current_page=current_page)
    await show_tours_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.startswith("viewtour_"))
async def view_tour_details(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–∞"""
    user_id = callback.data.split("_", maxsplit=1)[1]
    
    users = await storage.load_users()
    user_data = users.get(user_id)
    
    if not user_data or not user_data.get('vacation_tennis', False):
        await callback.answer("‚ùå –¢—É—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    country = user_data.get("vacation_country", "‚Äî")
    city = user_data.get("vacation_city", "‚Äî")
    district = user_data.get('district', None)
    sport = user_data.get('sport', '—Ç–µ–Ω–Ω–∏—Å')
    
    if district:
        city = f"{city} - {district}"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
    profile_link = await create_user_profile_link(user_data, user_id)
    
    # –ò–∫–æ–Ω–∫–∞ —Å–ø–æ—Ä—Ç–∞
    sport_icons = {
        'tennis': 'üéæ',
        'badminton': 'üè∏',
        'table_tennis': 'üèì'
    }
    sport_icon = sport_icons.get(sport, 'üéæ')
    
    text = (
        f"{sport_icon} –¢—É—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({sport}):\n\n"
        f"{profile_link}\n"
        f"üìç –ú–µ—Å—Ç–æ: {country}, {city}\n\n"
        f"üìÖ –î–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏:\n"
        f"–ù–∞—á–∞–ª–æ: {user_data.get('vacation_start', '‚Äî')}\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {user_data.get('vacation_end', '‚Äî')}\n\n"
    )
    
    if user_data.get('vacation_comment'):
        text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {user_data['vacation_comment']}\n"
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úâÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", 
                url=f"tg://user?id={user_id}" if user_id.isdigit() else "#"
            )],
            [InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_tours_list"
            )]
            ,
            [InlineKeyboardButton(
                text="üéæ –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤—Ä–µ–º—è –æ—Ç–¥—ã—Ö–∞", callback_data="createTour"
            )]
        ]
    )
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()

@router.callback_query(F.data == "back_to_tours_list")
async def back_to_tours_list(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç—É—Ä–æ–≤"""
    await show_tours_page(callback.message, state)
    await callback.answer()

@router.callback_query(F.data.startswith("createTour"))
async def start_create_tour(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω—ã"""
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç—Ä–∞–Ω
    buttons = []
    for country in countries[:5]:
        buttons.append([InlineKeyboardButton(text=f"{country}", callback_data=f"create_tour_country_{country}")])
    buttons.append([InlineKeyboardButton(text="üåé –î—Ä—É–≥–∞—è —Å—Ç—Ä–∞–Ω–∞", callback_data="create_tour_other_country")])

    try:
        await callback.message.edit_text(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –æ—Ç–¥—ã—Ö–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except:
        await callback.message.answer(
            "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –æ—Ç–¥—ã—Ö–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    
    await state.set_state(CreateTourStates.SELECT_COUNTRY)
    await callback.answer()

@router.callback_query(CreateTourStates.SELECT_COUNTRY, F.data.startswith("create_tour_country_"))
async def process_create_tour_country_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    country = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(vacation_country=country)
    await ask_for_create_tour_city(callback.message, state, country)
    await callback.answer()

@router.callback_query(CreateTourStates.SELECT_COUNTRY, F.data == "create_tour_other_country")
async def process_create_tour_other_country(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    await callback.message.edit_text("üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –æ—Ç–¥—ã—Ö–∞:", reply_markup=None)
    await state.set_state(CreateTourStates.ENTER_COUNTRY)
    await callback.answer()

@router.message(CreateTourStates.ENTER_COUNTRY, F.text)
async def process_create_tour_country_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    await state.update_data(vacation_country=message.text.strip())
    await message.answer("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞:")
    await state.set_state(CreateTourStates.ENTER_CITY)
    await storage.save_session(message.chat.id, await state.get_data())

async def ask_for_create_tour_city(message: types.Message, state: FSMContext, country: str):
    """–ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    if country == "–†–æ—Å—Å–∏—è":
        main_russian_cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"create_tour_city_{city}")] for city in main_russian_cities]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="create_tour_other_city")])
    else:
        cities = cities_data.get(country, [])
        buttons = [[InlineKeyboardButton(text=f"{city}", callback_data=f"create_tour_city_{city}")] for city in cities[:5]]
        buttons.append([InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="create_tour_other_city")])

    try:
        await message.edit_text(
            f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–¥—ã—Ö–∞ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    except:
        await message.answer(
            f"üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–¥—ã—Ö–∞ –≤ —Å—Ç—Ä–∞–Ω–µ: {country}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons)
        )
    
    await state.set_state(CreateTourStates.SELECT_CITY)

@router.callback_query(CreateTourStates.SELECT_CITY, F.data.startswith("create_tour_city_"))
async def process_create_tour_city_selection(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    city = callback.data.split("_", maxsplit=3)[3]
    await state.update_data(vacation_city=city)
    await callback.message.edit_text(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.08.2025",
        reply_markup=None
    )
    await state.set_state(CreateTourStates.ENTER_START_DATE)
    await callback.answer()

@router.callback_query(CreateTourStates.SELECT_CITY, F.data == "create_tour_other_city")
async def process_create_tour_other_city(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    await callback.message.edit_text("üèô –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–¥—ã—Ö–∞:", reply_markup=None)
    await state.set_state(CreateTourStates.ENTER_CITY)
    await callback.answer()

@router.message(CreateTourStates.ENTER_CITY, F.text)
async def process_create_tour_city_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—É—Ä–∞"""
    await state.update_data(vacation_city=message.text.strip())
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.08.2025"
    )
    await state.set_state(CreateTourStates.ENTER_START_DATE)
    await storage.save_session(message.chat.id, await state.get_data())

@router.message(CreateTourStates.ENTER_START_DATE, F.text)
async def process_start_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –ø–æ–µ–∑–¥–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        datetime.strptime(message.text, "%d.%m.%Y")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if not await validate_future_date(message.text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.08.2025"
            )
            return
            
        await state.update_data(vacation_start=message.text)
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025"
        )
        await state.set_state(CreateTourStates.ENTER_END_DATE)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.08.2025"
        )

@router.message(CreateTourStates.ENTER_END_DATE, F.text)
async def process_end_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        datetime.strptime(message.text, "%d.%m.%Y")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if not await validate_future_date(message.text):
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025"
            )
            return
        
        state_data = await state.get_data()
        start_date = datetime.strptime(state_data['vacation_start'], "%d.%m.%Y")
        end_date = datetime.strptime(message.text, "%d.%m.%Y")
        
        if end_date <= start_date:
            await message.answer(
                "‚ùå –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
            return
        
        await state.update_data(vacation_end=message.text)
        await message.answer(
            "üí¨ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–º—É —Ç—É—Ä—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥."
        )
        await state.set_state(CreateTourStates.ENTER_COMMENT)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 30.08.2025"
        )

@router.message(CreateTourStates.ENTER_COMMENT, F.text == "/skip")
@router.message(CreateTourStates.ENTER_COMMENT, F.text)
async def process_tour_comment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —Ç—É—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
    comment = message.text if message.text != "/skip" else None
    
    state_data = await state.get_data()
    vacation_start = state_data.get('vacation_start')
    vacation_end = state_data.get('vacation_end')
    vacation_country = state_data.get('vacation_country')
    vacation_city = state_data.get('vacation_city')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = await storage.load_users()
    user_id = str(message.from_user.id)
    
    if user_id not in users:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    users[user_id]['vacation_tennis'] = True
    users[user_id]['vacation_start'] = vacation_start
    users[user_id]['vacation_end'] = vacation_end
    users[user_id]['vacation_country'] = vacation_country
    users[user_id]['vacation_city'] = vacation_city
    if comment:
        users[user_id]['vacation_comment'] = comment
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    await storage.save_users(users)
    await send_tour_to_channel(message.bot, user_id, users[user_id])
    
    await message.answer(
        f"‚úÖ –í–∞—à —Ç—É—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! –¢–µ–ø–µ—Ä—å –¥—Ä—É–≥–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç —É–≤–∏–¥–µ—Ç—å –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ —Ç—É—Ä–æ–≤.\n\n"
        f"üìç –ú–µ—Å—Ç–æ: {vacation_country}, {vacation_city}\n"
        f"üìÖ –î–∞—Ç—ã: {vacation_start} - {vacation_end}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment if comment else '–ù–µ —É–∫–∞–∑–∞–Ω'}"
    )
    
    await state.clear()
