"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ç—É—Ä–Ω–∏—Ä–æ–≤
"""

import logging
from typing import List, Dict, Any
from aiogram import Bot
from services.storage import storage

logger = logging.getLogger(__name__)


class TournamentNotifications:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
    
    def __init__(self, bot: Bot):
        self.bot = bot
    
    async def notify_tournament_started(self, tournament_id: str, tournament_data: Dict[str, Any]) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –∏—Ö —Å–æ–ø–µ—Ä–Ω–∏–∫–∞—Ö"""
        try:
            participants = tournament_data.get('participants', {})
            tournament_name = tournament_data.get('name', '–¢—É—Ä–Ω–∏—Ä')
            tournament_type = tournament_data.get('type', '–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞')
            matches = tournament_data.get('matches', [])
            
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} ({tournament_name})")
            logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(participants)}, –º–∞—Ç—á–µ–π: {len(matches)}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è username
            users = await storage.load_users()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É
            success_count = 0
            for user_id, participant_data in participants.items():
                try:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id}...")
                    user_data = users.get(user_id, {})
                    username = user_data.get('username', '')
                    username_text = f"@{username}" if username else "–Ω–µ—Ç username"
                    
                    # –ù–∞—Ö–æ–¥–∏–º –º–∞—Ç—á–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ID –∫ —Å—Ç—Ä–æ–∫–∞–º)
                    user_matches = []
                    for match in matches:
                        match_p1 = str(match.get('player1_id', ''))
                        match_p2 = str(match.get('player2_id', ''))
                        if match_p1 == str(user_id) or match_p2 == str(user_id):
                            user_matches.append(match)
                    
                    logger.info(f"–î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(user_matches)}")
                    
                    if not user_matches:
                        logger.warning(f"–£ —É—á–∞—Å—Ç–Ω–∏–∫–∞ {user_id} –Ω–µ—Ç –º–∞—Ç—á–µ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
                        continue
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ Markdown –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
                    message = f"üèÜ <b>–¢—É—Ä–Ω–∏—Ä –Ω–∞—á–∞–ª—Å—è!</b>\n\n"
                    message += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_name}\n"
                    message += f"‚öîÔ∏è –¢–∏–ø: {tournament_type}\n"
                    message += f"üë§ –í–∞—à–µ –∏–º—è: {participant_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
                    
                    if tournament_type == "–û–ª–∏–º–ø–∏–π—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞":
                        message += f"üéØ <b>–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –≤ –ø–µ—Ä–≤–æ–º —Ä–∞—É–Ω–¥–µ:</b>\n"
                        for match in user_matches:
                            if match.get('status') == 'pending' and not match.get('is_bye'):
                                if str(match.get('player1_id')) == str(user_id):
                                    opponent_name = match.get('player2_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    opponent_id = str(match.get('player2_id', ''))
                                else:
                                    opponent_name = match.get('player1_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    opponent_id = str(match.get('player1_id', ''))
                                
                                opponent_data = users.get(opponent_id, {})
                                opponent_username = opponent_data.get('username', '')
                                opponent_username_text = f"@{opponent_username}" if opponent_username else "–Ω–µ—Ç username"
                                
                                message += f"‚öîÔ∏è {opponent_name}\n"
                                message += f"üì± –î–ª—è —Å–≤—è–∑–∏: {opponent_username_text}\n"
                                
                    elif tournament_type == "–ö—Ä—É–≥–æ–≤–∞—è":
                        message += f"üéØ <b>–í–∞—à–∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∏:</b>\n"
                        for match in user_matches:
                            if match.get('status') == 'pending' and not match.get('is_bye'):
                                if str(match.get('player1_id')) == str(user_id):
                                    opponent_name = match.get('player2_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    opponent_id = str(match.get('player2_id', ''))
                                else:
                                    opponent_name = match.get('player1_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                                    opponent_id = str(match.get('player1_id', ''))
                                
                                opponent_data = users.get(opponent_id, {})
                                opponent_username = opponent_data.get('username', '')
                                opponent_username_text = f"@{opponent_username}" if opponent_username else "–Ω–µ—Ç username"
                                
                                message += f"‚öîÔ∏è {opponent_name}\n"
                                message += f"üì± –î–ª—è —Å–≤—è–∑–∏: {opponent_username_text}\n"
                    
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}, –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message)}")
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode='HTML'
                    )
                    success_count += 1
                    logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫—É {user_id}")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–∞—á–∞–ª–µ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}: {e}", exc_info=True)
            return False
    
    async def notify_match_assignment(self, tournament_id: str, match_data: Dict[str, Any]) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º –º–∞—Ç—á–µ"""
        try:
            tournament_data = await storage.load_tournaments()
            tournament_info = tournament_data.get(tournament_id, {})
            tournament_name = tournament_info.get('name', '–¢—É—Ä–Ω–∏—Ä')
            
            player1_id = match_data.get('player1_id')
            player2_id = match_data.get('player2_id')
            
            message = f"‚öîÔ∏è <b>–ù–æ–≤—ã–π –º–∞—Ç—á –≤ —Ç—É—Ä–Ω–∏—Ä–µ!</b>\n\n"
            message += f"üèÜ –¢—É—Ä–Ω–∏—Ä: {tournament_name}\n"
            message += f"üìã –†–∞—É–Ω–¥: {match_data['round'] + 1}\n\n"
            
            if match_data['is_bye']:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
                player_id = player1_id or player2_id
                message += f"üÜì –í—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!\n"
                message += f"–û–∂–∏–¥–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞."
                
                try:
                    await self.bot.send_message(
                        chat_id=int(player_id),
                        text=message,
                        parse_mode='HTML'
                    )
                    return True
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ BYE –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {player_id}: {e}")
                    return False
            else:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –º–∞—Ç—á–µ
                player1_name = match_data.get('player1_name', '–ò–≥—Ä–æ–∫ 1')
                player2_name = match_data.get('player2_name', '–ò–≥—Ä–æ–∫ 2')
                
                message += f"üë§ –í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫: {player2_name if player1_id else player1_name}\n\n"
                message += f"üìä –î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /add_score"
                
                success_count = 0
                for player_id in [player1_id, player2_id]:
                    if player_id:
                        try:
                            await self.bot.send_message(
                                chat_id=int(player_id),
                                text=message,
                                parse_mode='HTML'
                            )
                            success_count += 1
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {player_id}: {e}")
                
                return success_count > 0
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –º–∞—Ç—á–µ: {e}")
            return False
    
    async def notify_tournament_completed(self, tournament_id: str, tournament_data: Dict[str, Any], winner_data: Dict[str, Any]) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞"""
        try:
            participants = tournament_data.get('participants', {})
            tournament_name = tournament_data.get('name', '–¢—É—Ä–Ω–∏—Ä')
            winner_name = winner_data.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message = f"üèÜ <b>–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
            message += f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {tournament_name}\n"
            message += f"ü•á –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_name}\n\n"
            message += f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            success_count = 0
            for user_id in participants.keys():
                try:
                    await self.bot.send_message(
                        chat_id=int(user_id),
                        text=message,
                        parse_mode='HTML'
                    )
                    success_count += 1
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {success_count} –∏–∑ {len(participants)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
            return success_count > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞ {tournament_id}: {e}")
            return False
