from datetime import datetime
from typing import List, Dict, Tuple
from collections import defaultdict

from config.config import BOT_USERNAME
from config.profile import get_sport_config
from services.storage import storage

async def get_users_by_location(search_type=None, country=None, city=None, sport_type=None, 
                               exclude_user_id=None, limit=20) -> Dict[str, int]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–∂–¥–æ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å: {–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π}
    """
    users = await storage.load_users()
    location_counts = defaultdict(int)
    
    for user_id, profile in users.items():
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if exclude_user_id and str(user_id) == str(exclude_user_id):
            continue
            
        if not profile.get('show_in_search', True):
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–æ–∏—Å–∫–∞
        if search_type == "coaches" and profile.get('role') != "–¢—Ä–µ–Ω–µ—Ä":
            continue
        elif search_type == "players" and profile.get('role') != "–ò–≥—Ä–æ–∫":
            continue
        elif search_type == "partner":
            # –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
            user_sport = profile.get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            config = get_sport_config(user_sport)
            if config.get("has_role", True) and profile.get('role') != "–ò–≥—Ä–æ–∫":
                continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
        if country and profile.get('country') != country:
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ –∏ –º—ã –∏—â–µ–º –≥–æ—Ä–æ–¥–∞)
        if country and city is None:
            # –î–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≥–æ—Ä–æ–¥–æ–≤ –≤ —Å—Ç—Ä–∞–Ω–µ
            user_city = profile.get('city')
            if user_city:
                location_counts[user_city] += 1
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≥–æ—Ä–æ–¥)
        if city and profile.get('city') != city:
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
        if search_type == "partner" and sport_type and profile.get('sport') != sport_type:
            continue
            
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ - —Å—á–∏—Ç–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
        if country is None:
            user_country = profile.get('country')
            if user_country:
                location_counts[user_country] += 1
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞, –Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥ - —Å—á–∏—Ç–∞–µ–º –≥–æ—Ä–æ–¥–∞
        elif country and city is None:
            user_city = profile.get('city')
            if user_city:
                location_counts[user_city] += 1
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –∏ —Å—Ç—Ä–∞–Ω–∞ –∏ –≥–æ—Ä–æ–¥ - —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        else:
            location_counts["users"] += 1
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ —É–±—ã–≤–∞–Ω–∏—é) –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç–æ–º
    sorted_locations = dict(sorted(
        location_counts.items(), 
        key=lambda x: x[1], 
        reverse=True
    ))
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–∏–º–∏—Ç
    if limit:
        limited_locations = {}
        for i, (location, count) in enumerate(sorted_locations.items()):
            if i >= limit:
                break
            limited_locations[location] = count
        return limited_locations
    
    return sorted_locations

async def count_users_by_location(search_type=None, country=None, city=None, sport_type=None, exclude_user_id=None):
    """–ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –ª–æ–∫–∞—Ü–∏–∏"""
    users = await storage.load_users()
    count = 0
    
    for user_id, profile in users.items():
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if exclude_user_id and str(user_id) == str(exclude_user_id):
            continue
            
        if not profile.get('show_in_search', True):
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –ø–æ–∏—Å–∫–∞
        if search_type == "coaches" and profile.get('role') != "–¢—Ä–µ–Ω–µ—Ä":
            continue
        elif search_type == "players" and profile.get('role') != "–ò–≥—Ä–æ–∫":
            continue
        elif search_type == "partner":
            # –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –Ω—É–∂–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–∞ —Å–ø–æ—Ä—Ç–∞
            user_sport = profile.get('sport', 'üéæ–ë–æ–ª—å—à–æ–π —Ç–µ–Ω–Ω–∏—Å')
            config = get_sport_config(user_sport)
            if config.get("has_role", True) and profile.get('role') != "–ò–≥—Ä–æ–∫":
                continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç—Ä–∞–Ω–µ
        if country and profile.get('country') != country:
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
        if city and profile.get('city') != city:
            continue
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É —Å–ø–æ—Ä—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞)
        if search_type == "partner" and sport_type and profile.get('sport') != sport_type:
            continue
            
        count += 1
    
    return count

async def calculate_age(birth_date_str: str) -> int:
    try:
        birth_date = datetime.strptime(birth_date_str, "%d.%m.%Y")
        today = datetime.now()
        age = today.year - birth_date.year - ((today.month, today.day) < (birth_date.month, birth_date.day))
        return age
    except:
        return 0

async def level_to_points(level: str) -> int:
    level_points = {
        "0.0": 0, "0.5": 300, "1.0": 500, "1.5": 700,
        "2.0": 900, "2.5": 1100, "3.0": 1200, "3.5": 1400,
        "4.0": 1600, "4.5": 1800, "5.0": 2000, "5.5": 2200,
        "6.0": 2400, "6.5": 2600, "7.0": 2800
    }
    return level_points.get(level, 0)

async def calculate_new_ratings(winner_points: int, loser_points: int, game_difference: int) -> tuple:
    points_change = game_difference * 0.004
    winner_new = winner_points + (loser_points * points_change)
    loser_new = loser_points - (winner_points * points_change)
    return round(winner_new), round(loser_new)

async def search_users(query: str, exclude_ids: List[str] = None) -> List[tuple]:
    users = await storage.load_users()
    results = []
    query = query.lower().strip()
    
    if exclude_ids is None:
        exclude_ids = []
    
    for user_id, user_data in users.items():
        if user_id in exclude_ids:
            continue
            
        first_name = user_data.get('first_name', '').lower()
        last_name = user_data.get('last_name', '').lower()
        
        if (query in first_name or query in last_name or 
            query in f"{first_name} {last_name}"):
            results.append((user_id, user_data))
    
    return results

async def count_users_by_filters(search_type, country=None, city=None, sport=None, gender=None, level=None):
    """
    –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º
    """
    users = await storage.load_users()
    count = 0
    
    for user_id, profile in users.items():
        if not profile.get('show_in_search', True):
            continue
            
        if search_type == "partner" and profile.get('role') != "–ò–≥—Ä–æ–∫":
            continue
            
        if country and profile.get('country') != country:
            continue
            
        if city and profile.get('city') != city:
            continue
            
        if sport and profile.get('sport') != sport:
            continue
            
        if gender and profile.get('gender') != gender:
            continue
            
        if level and profile.get('player_level') != level:
            continue
            
        count += 1
    
    return count

async def get_weekday_short(date_str: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ: –ü–Ω, –í—Ç, –°—Ä, –ß—Ç, –ü—Ç, –°–±, –í—Å)
    –ø–æ –¥–∞—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.
    """
    days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    try:
        dt = datetime.strptime(date_str, "%d.%m.%Y")
        return days[dt.weekday()]  # weekday(): –ü–Ω=0 ... –í—Å=6
    except ValueError:
        return "?"

async def create_user_profile_link(user_data: dict, user_id: str, additional=True) -> str:
    first_name = user_data.get('first_name', '')
    last_name = user_data.get('last_name', '')
    username = user_data.get('username', '')
    
    if user_data.get('player_level'):
        level = user_data.get('player_level')
        rating = user_data.get('rating_points')
    else:
        level = ""
        rating = "–¢—Ä–µ–Ω–µ—Ä"

    if additional:
        return f"[{first_name} {last_name} @{username} NTRP {level} (lvl. {rating})](https://t.me/{BOT_USERNAME}?start=profile_{user_id})"
    else:
        return f"[{first_name} {last_name}](https://t.me/{BOT_USERNAME}?start=profile_{user_id})"

async def format_tour_date(date_str):
    if not date_str or date_str == '-':
        return '-'
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        for fmt in ["%d.%m.%Y", "%Y-%m-%d", "%d/%m/%Y"]:
            try:
                dt = datetime.strptime(date_str, fmt)
                return dt.strftime("%d.%m.%y")  # 25.08.25
            except ValueError:
                continue
        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
        return date_str
    except:
        return date_str
            
def get_sort_key(offer):
    try:
        if offer.get('date') is None:
            date = datetime.min
        elif isinstance(offer['date'], str):
            date = datetime.strptime(offer['date'], '%d.%m.%Y')
        else:
            date = offer['date']
    except (ValueError, TypeError):
        date = datetime.min  # –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, —Å—Ç–∞–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É
        
    try:
        if offer.get('time') is None:
            time = datetime.min.time()
        elif isinstance(offer['time'], str):
            time = datetime.strptime(offer['time'], '%H:%M').time()
        else:
            time = offer['time']
    except (ValueError, TypeError):
        time = datetime.min.time()  # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —Å—Ç–∞–≤–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        
    return (date, time)
