from aiogram import Bot
from datetime import datetime
from config.config import CHANNEL_ID
from config.paths import BASE_DIR
from utils.json_data import load_users
from utils.utils import create_user_profile_link

async def send_subscription_reminders(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    users = load_users()
    current_time = datetime.now()
    
    for user_id, user_data in users.items():
        if 'subscription' in user_data and user_data['subscription'].get('active', False):
            subscription_until = user_data['subscription'].get('until')
            if subscription_until:
                try:
                    until_date = datetime.strptime(subscription_until, '%Y-%m-%d')
                    days_remaining = (until_date - current_time).days
                    
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 3 –¥–Ω—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    if days_remaining == 3:
                        try:
                            await bot.send_message(
                                int(user_id),
                                f"‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Tennis-Play PRO –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è ({until_date.strftime('%d.%m.%Y')}).\n\n"
                                "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ PRO-—Ñ—É–Ω–∫—Ü–∏—è–º!"
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 1 –¥–µ–Ω—å –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    elif days_remaining == 1:
                        try:
                            await bot.send_message(
                                int(user_id),
                                f"üîî –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Tennis-Play PRO –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞ ({until_date.strftime('%d.%m.%Y')})!\n\n"
                                "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º."
                            )
                        except Exception as e:
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            
                except ValueError:
                    continue

async def send_game_notification_to_channel(bot, data, users):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–≥—Ä–µ –≤ –∫–∞–Ω–∞–ª"""
    try:
        game_type = data.get('game_type')
        score = data.get('score')

        if game_type == 'single':
            # –û–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞
            player1_id = data.get('current_user_id')
            player2_id = data.get('opponent1', {}).get('telegram_id')
            
            player1 = users.get(player1_id, {})
            player2 = users.get(player2_id, {})
            
            player1_link = create_user_profile_link(player1, player1_id)
            player2_link = create_user_profile_link(player2, player2_id)
            
            winner_side = data.get('winner_side')
            if winner_side == "team1":
                winner_link = player1_link
                loser_link = player2_link
            else:
                winner_link = player2_link
                loser_link = player1_link
            
            game_text = (
                "üéæ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–¥–∏–Ω–æ—á–Ω–∞—è –∏–≥—Ä–∞!*\n\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {winner_link}\n"
                f"ü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π: {loser_link}\n"
                f"üìä –°—á–µ—Ç: {score}\n\n"
                f"#–∏–≥—Ä–∞ #–æ–¥–∏–Ω–æ—á–Ω–∞—è"
            )
            
        else:
            # –ü–∞—Ä–Ω–∞—è –∏–≥—Ä–∞
            team1_player1_id = str(data.get('current_user_id'))
            team1_player2_id = data.get('partner', {}).get('telegram_id')
            team2_player1_id = data.get('opponent1', {}).get('telegram_id')
            team2_player2_id = data.get('opponent2', {}).get('telegram_id')
            
            team1_player1 = users.get(team1_player1_id, {})
            team1_player2 = users.get(team1_player2_id, {})
            team2_player1 = users.get(team2_player1_id, {})
            team2_player2 = users.get(team2_player2_id, {})
            
            team1_player1_link = create_user_profile_link(team1_player1, team1_player1_id)
            team1_player2_link = create_user_profile_link(team1_player2, team1_player2_id)
            team2_player1_link = create_user_profile_link(team2_player1, team2_player1_id)
            team2_player2_link = create_user_profile_link(team2_player2, team2_player2_id)
            
            winner_side = data.get('winner_side')
            if winner_side == "team1":
                winner_team = f"{team1_player1_link} & {team1_player2_link}"
                loser_team = f"{team2_player1_link} & {team2_player2_link}"
            else:
                winner_team = f"{team2_player1_link} & {team2_player2_link}"
                loser_team = f"{team1_player1_link} & {team1_player2_link}"
            
            game_text = (
                "üéæ *–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–∞—Ä–Ω–∞—è –∏–≥—Ä–∞!*\n\n"
                f"üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: {winner_team}\n"
                f"ü•à –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ: {loser_team}\n"
                f"üìä –°—á–µ—Ç: {score}\n\n"
                f"#–∏–≥—Ä–∞ #–ø–∞—Ä–Ω–∞—è"
            )
        
        if data.get('photo_id'):
            await bot.send_photo(
                chat_id=CHANNEL_ID,
                photo=data['photo_id'],
                caption=game_text,
                parse_mode="Markdown"
            )
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID,
                text=game_text,
                parse_mode="Markdown"
            )
        
    except:
        pass
