import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from handlers import game_offers_menu, registration, game_offers, more, payments, profile, enter_invoice, search_partner, tours, admin, admin_edit
from config.config import TOKEN
from utils.notifications import send_subscription_reminders
from services.storage import storage

async def check_subscriptions(bot: Bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            users = await storage.load_users()
            current_time = datetime.now()
            updated = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
            for user_id, user_data in users.items():
                if 'subscription' in user_data and user_data['subscription'].get('active', False):
                    subscription_until = user_data['subscription'].get('until')
                    if subscription_until:
                        try:
                            until_date = datetime.strptime(subscription_until, '%Y-%m-%d')
                            if until_date < current_time:
                                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                                users[user_id]['subscription']['active'] = False
                                users[user_id]['subscription']['expired'] = True
                                updated = True
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                try:
                                    await bot.send_message(
                                        int(user_id),
                                        "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Tennis-Play PRO –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                                        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ PRO-—Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ 'üí≥ –ü–ª–∞—Ç–µ–∂–∏'"
                                    )
                                except Exception as e:
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                
                        except ValueError:
                            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                            users[user_id]['subscription']['active'] = False
                            users[user_id]['subscription']['error'] = 'invalid_date_format'
                            updated = True
            
            if updated:
                await storage.save_users(users)
                print(f"[{datetime.now()}] –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫")
            else:
                print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            await send_subscription_reminders(bot)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        
        # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞

async def check_repeating_games(bot: Bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–≥—Ä"""
    while True:
        try:
            users = await storage.load_users()
            current_time = datetime.now()
            updated = False
            games_updated = 0
            
            for user_id, user_data in users.items():
                if 'games' in user_data and user_data['games']:
                    for game in user_data['games']:
                        if game.get('repeat') and game.get('active', True):
                            try:
                                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–≥—Ä—ã
                                game_date = datetime.strptime(game['date'], '%d.%m.%Y')
                                
                                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–≥—Ä—ã –ø—Ä–æ—à–ª–∞, –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥
                                if game_date < current_time:
                                    new_date = game_date + timedelta(weeks=1)
                                    game['date'] = new_date.strftime('%d.%m.%Y')
                                    updated = True
                                    games_updated += 1
                                    
                                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ–Ω–æ—Å–µ
                                    try:
                                        await bot.send_message(
                                            int(user_id),
                                            f"üîÑ –í–∞—à–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∏–≥—Ä–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞:\n\n"
                                            f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {new_date.strftime('%d.%m.%Y')}\n"
                                            f"‚è∞ –í—Ä–µ–º—è: {game.get('time', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
                                            f"üèôÔ∏è –ì–æ—Ä–æ–¥: {game.get('city', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                                            f"üéæ –¢–∏–ø: {game.get('type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                                            f"–ò–≥—Ä–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é."
                                        )
                                    except Exception as e:
                                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                    
                            except (ValueError, KeyError) as e:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                                continue
            
            if updated:
                await storage.save_users(users)
                print(f"[{datetime.now()}] –û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–≥—Ä—ã: {games_updated} –∏–≥—Ä –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
            else:
                print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–≥—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–≥—Ä: {e}")
        
        # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã       
    dp.include_router(admin.admin_router)    
    dp.include_router(admin_edit.admin_edit_router) 
    dp.include_router(registration.router)
    dp.include_router(game_offers_menu.router)
    dp.include_router(game_offers.router)
    dp.include_router(more.router)
    dp.include_router(payments.router)
    dp.include_router(profile.router)
    dp.include_router(enter_invoice.router)
    dp.include_router(search_partner.router)
    dp.include_router(tours.router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    subscription_task = asyncio.create_task(check_subscriptions(bot))
    games_task = asyncio.create_task(check_repeating_games(bot))
    
    try:
        await dp.start_polling(bot)
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        subscription_task.cancel()
        games_task.cancel()
        
        try:
            await subscription_task
            await games_task
        except asyncio.CancelledError:
            pass
        
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
