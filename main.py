import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Filter
from handlers import game_offers_menu, registration, game_offers, more, payments, profile, enter_invoice, search_partner, tours, admin, admin_edit, tournament, invite, tournament_score
from config.config import TOKEN
from utils.admin import is_user_banned
from utils.notifications import send_subscription_reminders
from services.storage import storage

class BannedUserFilter(Filter):
    async def __call__(self, message: Message) -> bool:
        """–§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user_id = str(message.from_user.id)
        banned_users = await storage.load_banned_users()
        return user_id in banned_users

async def ban_check_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = str(message.from_user.id)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
    if await is_user_banned(user_id):
        await message.answer(
            "üö´ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
            "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
            "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
        return True
    return False

async def cleanup_expired_game_offers(bot: Bot):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
    try:
        users = await storage.load_users()
        current_time = datetime.now()
        updated = False
        expired_count = 0
        
        for user_id, user_data in users.items():
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if await is_user_banned(user_id):
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if 'games' in user_data and user_data['games']:
                games_to_keep = []
                
                for game in user_data['games']:
                    if game.get('active', True) and game.get('date') and game.get('time'):
                        try:
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–≥—Ä—ã
                            game_date_str = game.get('date')
                            game_time_str = game.get('time')
                            
                            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö)
                            if 'T' in game_date_str:
                                # ISO —Ñ–æ—Ä–º–∞—Ç: 2025-01-15T10:30
                                game_datetime = datetime.fromisoformat(game_date_str)
                            elif '.' in game_date_str and len(game_date_str.split('.')) == 2:
                                # –§–æ—Ä–º–∞—Ç: 20.09 (–¥–µ–Ω—å.–º–µ—Å—è—Ü) —Å —Ç–µ–∫—É—â–∏–º –≥–æ–¥–æ–º
                                day, month = game_date_str.split('.')
                                current_year = current_time.year
                                game_date = datetime.strptime(f"{day}.{month}.{current_year}", '%d.%m.%Y').date()
                                game_time = datetime.strptime(game_time_str, '%H:%M').time()
                                game_datetime = datetime.combine(game_date, game_time)
                            else:
                                # –ü—Ä–æ—Å—Ç–æ–π —Ñ–æ—Ä–º–∞—Ç: 2025-01-15
                                game_date = datetime.strptime(game_date_str, '%Y-%m-%d').date()
                                game_time = datetime.strptime(game_time_str, '%H:%M').time()
                                game_datetime = datetime.combine(game_date, game_time)
                            
                            # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ (–±–æ–ª–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥), —É–¥–∞–ª—è–µ–º –µ—ë
                            if game_datetime < current_time:
                                expired_count += 1
                                print(f"–£–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ—à–µ–¥—à–∞—è –∏–≥—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {game_date_str} {game_time_str}")
                            else:
                                games_to_keep.append(game)
                                
                        except (ValueError, TypeError) as e:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–≥—Ä—É
                            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞—Ç—É –∏–≥—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                            games_to_keep.append(game)
                    else:
                        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –∏–ª–∏ –∏–≥—Ä—ã –±–µ–∑ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º
                        games_to_keep.append(game)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
                if len(games_to_keep) != len(user_data['games']):
                    users[user_id]['games'] = games_to_keep
                    updated = True
        
        if updated:
            await storage.save_users(users)
            print(f"[{datetime.now()}] –û—á–∏—â–µ–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä: {expired_count}")
        else:
            print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∏–≥—Ä: {e}")

async def check_subscriptions(bot: Bot):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            users = await storage.load_users()
            current_time = datetime.now()
            updated = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
            for user_id, user_data in users.items():
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                if await is_user_banned(user_id):
                    continue
                    
                if 'subscription' in user_data and user_data['subscription'].get('active', False):
                    subscription_until = user_data['subscription'].get('until')
                    if subscription_until:
                        try:
                            until_date = datetime.strptime(subscription_until, '%Y-%m-%d')
                            if until_date < current_time:
                                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                                users[user_id]['subscription']['active'] = False
                                users[user_id]['subscription']['expired'] = True
                                updated = True
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                try:
                                    await bot.send_message(
                                        int(user_id),
                                        "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Tennis-Play PRO –∏—Å—Ç–µ–∫–ª–∞.\n\n"
                                        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ PRO-—Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ 'üí≥ –ü–ª–∞—Ç–µ–∂–∏'"
                                    )
                                except Exception as e:
                                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                
                        except ValueError:
                            # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
                            users[user_id]['subscription']['active'] = False
                            users[user_id]['subscription']['error'] = 'invalid_date_format'
                            updated = True
            
            if updated:
                await storage.save_users(users)
                print(f"[{datetime.now()}] –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—Ç–∞—Ç—É—Å—ã –ø–æ–¥–ø–∏—Å–æ–∫")
            else:
                print(f"[{datetime.now()}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç")
                
            # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—à–µ–¥—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–≥—Ä
            await cleanup_expired_game_offers(bot)
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
            await send_subscription_reminders(bot)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫: {e}")
        
        # –ñ–¥–µ–º 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞

async def main():
    bot = Bot(token=TOKEN)
    dp = Dispatcher()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ
    dp.message.register(ban_check_handler, BannedUserFilter())
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã       
    dp.include_router(admin.admin_router)
    dp.include_router(admin_edit.admin_edit_router) 
    dp.include_router(registration.router)
    dp.include_router(game_offers_menu.router)
    dp.include_router(game_offers.router)
    dp.include_router(more.router)
    dp.include_router(profile.router)
    dp.include_router(tournament_score.router)
    dp.include_router(enter_invoice.router)
    dp.include_router(search_partner.router)
    dp.include_router(tours.router)
    dp.include_router(tournament.router)
    dp.include_router(invite.router)
    dp.include_router(payments.router)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    subscription_task = asyncio.create_task(check_subscriptions(bot))
    
    try:
        await dp.start_polling(bot)
    finally:
        # –û—Ç–º–µ–Ω—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        subscription_task.cancel()
        
        try:
            await subscription_task
        except asyncio.CancelledError:
            pass
        
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
